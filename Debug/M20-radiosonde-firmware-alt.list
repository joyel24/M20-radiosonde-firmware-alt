
M20-radiosonde-firmware-alt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005070  08005070  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005078  08005078  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000070  080050f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080050f0  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6a2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfd  00000000  00000000  0002d73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012bc7  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbed  00000000  00000000  000436b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000764b0  00000000  00000000  000512a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7754  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f8c  00000000  00000000  000c77a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ef4 	.word	0x08004ef4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004ef4 	.word	0x08004ef4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f84c 	bl	8000310 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_f2uiz>:
 80002e0:	219e      	movs	r1, #158	; 0x9e
 80002e2:	b510      	push	{r4, lr}
 80002e4:	05c9      	lsls	r1, r1, #23
 80002e6:	1c04      	adds	r4, r0, #0
 80002e8:	f000 fd5c 	bl	8000da4 <__aeabi_fcmpge>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d103      	bne.n	80002f8 <__aeabi_f2uiz+0x18>
 80002f0:	1c20      	adds	r0, r4, #0
 80002f2:	f000 fcc5 	bl	8000c80 <__aeabi_f2iz>
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	219e      	movs	r1, #158	; 0x9e
 80002fa:	1c20      	adds	r0, r4, #0
 80002fc:	05c9      	lsls	r1, r1, #23
 80002fe:	f000 fb11 	bl	8000924 <__aeabi_fsub>
 8000302:	f000 fcbd 	bl	8000c80 <__aeabi_f2iz>
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	061b      	lsls	r3, r3, #24
 800030a:	469c      	mov	ip, r3
 800030c:	4460      	add	r0, ip
 800030e:	e7f2      	b.n	80002f6 <__aeabi_f2uiz+0x16>

08000310 <__udivmoddi4>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4657      	mov	r7, sl
 8000314:	464e      	mov	r6, r9
 8000316:	4645      	mov	r5, r8
 8000318:	46de      	mov	lr, fp
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	0004      	movs	r4, r0
 800031e:	000d      	movs	r5, r1
 8000320:	4692      	mov	sl, r2
 8000322:	4699      	mov	r9, r3
 8000324:	b083      	sub	sp, #12
 8000326:	428b      	cmp	r3, r1
 8000328:	d830      	bhi.n	800038c <__udivmoddi4+0x7c>
 800032a:	d02d      	beq.n	8000388 <__udivmoddi4+0x78>
 800032c:	4649      	mov	r1, r9
 800032e:	4650      	mov	r0, sl
 8000330:	f000 fd60 	bl	8000df4 <__clzdi2>
 8000334:	0029      	movs	r1, r5
 8000336:	0006      	movs	r6, r0
 8000338:	0020      	movs	r0, r4
 800033a:	f000 fd5b 	bl	8000df4 <__clzdi2>
 800033e:	1a33      	subs	r3, r6, r0
 8000340:	4698      	mov	r8, r3
 8000342:	3b20      	subs	r3, #32
 8000344:	469b      	mov	fp, r3
 8000346:	d433      	bmi.n	80003b0 <__udivmoddi4+0xa0>
 8000348:	465a      	mov	r2, fp
 800034a:	4653      	mov	r3, sl
 800034c:	4093      	lsls	r3, r2
 800034e:	4642      	mov	r2, r8
 8000350:	001f      	movs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d83a      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 800035c:	42af      	cmp	r7, r5
 800035e:	d100      	bne.n	8000362 <__udivmoddi4+0x52>
 8000360:	e078      	b.n	8000454 <__udivmoddi4+0x144>
 8000362:	465b      	mov	r3, fp
 8000364:	1ba4      	subs	r4, r4, r6
 8000366:	41bd      	sbcs	r5, r7
 8000368:	2b00      	cmp	r3, #0
 800036a:	da00      	bge.n	800036e <__udivmoddi4+0x5e>
 800036c:	e075      	b.n	800045a <__udivmoddi4+0x14a>
 800036e:	2200      	movs	r2, #0
 8000370:	2300      	movs	r3, #0
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	465a      	mov	r2, fp
 800037a:	4093      	lsls	r3, r2
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2301      	movs	r3, #1
 8000380:	4642      	mov	r2, r8
 8000382:	4093      	lsls	r3, r2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	e028      	b.n	80003da <__udivmoddi4+0xca>
 8000388:	4282      	cmp	r2, r0
 800038a:	d9cf      	bls.n	800032c <__udivmoddi4+0x1c>
 800038c:	2200      	movs	r2, #0
 800038e:	2300      	movs	r3, #0
 8000390:	9200      	str	r2, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <__udivmoddi4+0x8e>
 800039a:	601c      	str	r4, [r3, #0]
 800039c:	605d      	str	r5, [r3, #4]
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	b003      	add	sp, #12
 80003a4:	bcf0      	pop	{r4, r5, r6, r7}
 80003a6:	46bb      	mov	fp, r7
 80003a8:	46b2      	mov	sl, r6
 80003aa:	46a9      	mov	r9, r5
 80003ac:	46a0      	mov	r8, r4
 80003ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	4652      	mov	r2, sl
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	4641      	mov	r1, r8
 80003bc:	0013      	movs	r3, r2
 80003be:	464a      	mov	r2, r9
 80003c0:	408a      	lsls	r2, r1
 80003c2:	0017      	movs	r7, r2
 80003c4:	4642      	mov	r2, r8
 80003c6:	431f      	orrs	r7, r3
 80003c8:	4653      	mov	r3, sl
 80003ca:	4093      	lsls	r3, r2
 80003cc:	001e      	movs	r6, r3
 80003ce:	42af      	cmp	r7, r5
 80003d0:	d9c4      	bls.n	800035c <__udivmoddi4+0x4c>
 80003d2:	2200      	movs	r2, #0
 80003d4:	2300      	movs	r3, #0
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	4643      	mov	r3, r8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0d9      	beq.n	8000394 <__udivmoddi4+0x84>
 80003e0:	07fb      	lsls	r3, r7, #31
 80003e2:	0872      	lsrs	r2, r6, #1
 80003e4:	431a      	orrs	r2, r3
 80003e6:	4646      	mov	r6, r8
 80003e8:	087b      	lsrs	r3, r7, #1
 80003ea:	e00e      	b.n	800040a <__udivmoddi4+0xfa>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d101      	bne.n	80003f4 <__udivmoddi4+0xe4>
 80003f0:	42a2      	cmp	r2, r4
 80003f2:	d80c      	bhi.n	800040e <__udivmoddi4+0xfe>
 80003f4:	1aa4      	subs	r4, r4, r2
 80003f6:	419d      	sbcs	r5, r3
 80003f8:	2001      	movs	r0, #1
 80003fa:	1924      	adds	r4, r4, r4
 80003fc:	416d      	adcs	r5, r5
 80003fe:	2100      	movs	r1, #0
 8000400:	3e01      	subs	r6, #1
 8000402:	1824      	adds	r4, r4, r0
 8000404:	414d      	adcs	r5, r1
 8000406:	2e00      	cmp	r6, #0
 8000408:	d006      	beq.n	8000418 <__udivmoddi4+0x108>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d9ee      	bls.n	80003ec <__udivmoddi4+0xdc>
 800040e:	3e01      	subs	r6, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2e00      	cmp	r6, #0
 8000416:	d1f8      	bne.n	800040a <__udivmoddi4+0xfa>
 8000418:	9800      	ldr	r0, [sp, #0]
 800041a:	9901      	ldr	r1, [sp, #4]
 800041c:	465b      	mov	r3, fp
 800041e:	1900      	adds	r0, r0, r4
 8000420:	4169      	adcs	r1, r5
 8000422:	2b00      	cmp	r3, #0
 8000424:	db24      	blt.n	8000470 <__udivmoddi4+0x160>
 8000426:	002b      	movs	r3, r5
 8000428:	465a      	mov	r2, fp
 800042a:	4644      	mov	r4, r8
 800042c:	40d3      	lsrs	r3, r2
 800042e:	002a      	movs	r2, r5
 8000430:	40e2      	lsrs	r2, r4
 8000432:	001c      	movs	r4, r3
 8000434:	465b      	mov	r3, fp
 8000436:	0015      	movs	r5, r2
 8000438:	2b00      	cmp	r3, #0
 800043a:	db2a      	blt.n	8000492 <__udivmoddi4+0x182>
 800043c:	0026      	movs	r6, r4
 800043e:	409e      	lsls	r6, r3
 8000440:	0033      	movs	r3, r6
 8000442:	0026      	movs	r6, r4
 8000444:	4647      	mov	r7, r8
 8000446:	40be      	lsls	r6, r7
 8000448:	0032      	movs	r2, r6
 800044a:	1a80      	subs	r0, r0, r2
 800044c:	4199      	sbcs	r1, r3
 800044e:	9000      	str	r0, [sp, #0]
 8000450:	9101      	str	r1, [sp, #4]
 8000452:	e79f      	b.n	8000394 <__udivmoddi4+0x84>
 8000454:	42a3      	cmp	r3, r4
 8000456:	d8bc      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 8000458:	e783      	b.n	8000362 <__udivmoddi4+0x52>
 800045a:	4642      	mov	r2, r8
 800045c:	2320      	movs	r3, #32
 800045e:	2100      	movs	r1, #0
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	2200      	movs	r2, #0
 8000464:	9100      	str	r1, [sp, #0]
 8000466:	9201      	str	r2, [sp, #4]
 8000468:	2201      	movs	r2, #1
 800046a:	40da      	lsrs	r2, r3
 800046c:	9201      	str	r2, [sp, #4]
 800046e:	e786      	b.n	800037e <__udivmoddi4+0x6e>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	1a9b      	subs	r3, r3, r2
 8000476:	002a      	movs	r2, r5
 8000478:	4646      	mov	r6, r8
 800047a:	409a      	lsls	r2, r3
 800047c:	0023      	movs	r3, r4
 800047e:	40f3      	lsrs	r3, r6
 8000480:	4644      	mov	r4, r8
 8000482:	4313      	orrs	r3, r2
 8000484:	002a      	movs	r2, r5
 8000486:	40e2      	lsrs	r2, r4
 8000488:	001c      	movs	r4, r3
 800048a:	465b      	mov	r3, fp
 800048c:	0015      	movs	r5, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	dad4      	bge.n	800043c <__udivmoddi4+0x12c>
 8000492:	4642      	mov	r2, r8
 8000494:	002f      	movs	r7, r5
 8000496:	2320      	movs	r3, #32
 8000498:	0026      	movs	r6, r4
 800049a:	4097      	lsls	r7, r2
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	40de      	lsrs	r6, r3
 80004a0:	003b      	movs	r3, r7
 80004a2:	4333      	orrs	r3, r6
 80004a4:	e7cd      	b.n	8000442 <__udivmoddi4+0x132>
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	0047      	lsls	r7, r0, #1
 80004b6:	1c0c      	adds	r4, r1, #0
 80004b8:	0a6d      	lsrs	r5, r5, #9
 80004ba:	0e3f      	lsrs	r7, r7, #24
 80004bc:	0fc6      	lsrs	r6, r0, #31
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fdiv+0x1c>
 80004c2:	e070      	b.n	80005a6 <__aeabi_fdiv+0xfe>
 80004c4:	2fff      	cmp	r7, #255	; 0xff
 80004c6:	d100      	bne.n	80004ca <__aeabi_fdiv+0x22>
 80004c8:	e075      	b.n	80005b6 <__aeabi_fdiv+0x10e>
 80004ca:	00eb      	lsls	r3, r5, #3
 80004cc:	2580      	movs	r5, #128	; 0x80
 80004ce:	04ed      	lsls	r5, r5, #19
 80004d0:	431d      	orrs	r5, r3
 80004d2:	2300      	movs	r3, #0
 80004d4:	4699      	mov	r9, r3
 80004d6:	469a      	mov	sl, r3
 80004d8:	3f7f      	subs	r7, #127	; 0x7f
 80004da:	0260      	lsls	r0, r4, #9
 80004dc:	0a43      	lsrs	r3, r0, #9
 80004de:	4698      	mov	r8, r3
 80004e0:	0063      	lsls	r3, r4, #1
 80004e2:	0e1b      	lsrs	r3, r3, #24
 80004e4:	0fe4      	lsrs	r4, r4, #31
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d04e      	beq.n	8000588 <__aeabi_fdiv+0xe0>
 80004ea:	2bff      	cmp	r3, #255	; 0xff
 80004ec:	d046      	beq.n	800057c <__aeabi_fdiv+0xd4>
 80004ee:	4642      	mov	r2, r8
 80004f0:	00d0      	lsls	r0, r2, #3
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4302      	orrs	r2, r0
 80004f8:	4690      	mov	r8, r2
 80004fa:	2200      	movs	r2, #0
 80004fc:	3b7f      	subs	r3, #127	; 0x7f
 80004fe:	0031      	movs	r1, r6
 8000500:	1aff      	subs	r7, r7, r3
 8000502:	464b      	mov	r3, r9
 8000504:	4061      	eors	r1, r4
 8000506:	b2c9      	uxtb	r1, r1
 8000508:	4313      	orrs	r3, r2
 800050a:	2b0f      	cmp	r3, #15
 800050c:	d900      	bls.n	8000510 <__aeabi_fdiv+0x68>
 800050e:	e0b5      	b.n	800067c <__aeabi_fdiv+0x1d4>
 8000510:	486e      	ldr	r0, [pc, #440]	; (80006cc <__aeabi_fdiv+0x224>)
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	58c3      	ldr	r3, [r0, r3]
 8000516:	469f      	mov	pc, r3
 8000518:	2300      	movs	r3, #0
 800051a:	4698      	mov	r8, r3
 800051c:	0026      	movs	r6, r4
 800051e:	4645      	mov	r5, r8
 8000520:	4692      	mov	sl, r2
 8000522:	4653      	mov	r3, sl
 8000524:	2b02      	cmp	r3, #2
 8000526:	d100      	bne.n	800052a <__aeabi_fdiv+0x82>
 8000528:	e089      	b.n	800063e <__aeabi_fdiv+0x196>
 800052a:	2b03      	cmp	r3, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e09e      	b.n	800066e <__aeabi_fdiv+0x1c6>
 8000530:	2b01      	cmp	r3, #1
 8000532:	d018      	beq.n	8000566 <__aeabi_fdiv+0xbe>
 8000534:	003b      	movs	r3, r7
 8000536:	337f      	adds	r3, #127	; 0x7f
 8000538:	2b00      	cmp	r3, #0
 800053a:	dd69      	ble.n	8000610 <__aeabi_fdiv+0x168>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	4b60      	ldr	r3, [pc, #384]	; (80006d0 <__aeabi_fdiv+0x228>)
 8000550:	401d      	ands	r5, r3
 8000552:	003b      	movs	r3, r7
 8000554:	3380      	adds	r3, #128	; 0x80
 8000556:	2bfe      	cmp	r3, #254	; 0xfe
 8000558:	dd00      	ble.n	800055c <__aeabi_fdiv+0xb4>
 800055a:	e070      	b.n	800063e <__aeabi_fdiv+0x196>
 800055c:	01ad      	lsls	r5, r5, #6
 800055e:	0a6d      	lsrs	r5, r5, #9
 8000560:	b2d8      	uxtb	r0, r3
 8000562:	e002      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000564:	000e      	movs	r6, r1
 8000566:	2000      	movs	r0, #0
 8000568:	2500      	movs	r5, #0
 800056a:	05c0      	lsls	r0, r0, #23
 800056c:	4328      	orrs	r0, r5
 800056e:	07f6      	lsls	r6, r6, #31
 8000570:	4330      	orrs	r0, r6
 8000572:	bce0      	pop	{r5, r6, r7}
 8000574:	46ba      	mov	sl, r7
 8000576:	46b1      	mov	r9, r6
 8000578:	46a8      	mov	r8, r5
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	4643      	mov	r3, r8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d13f      	bne.n	8000602 <__aeabi_fdiv+0x15a>
 8000582:	2202      	movs	r2, #2
 8000584:	3fff      	subs	r7, #255	; 0xff
 8000586:	e003      	b.n	8000590 <__aeabi_fdiv+0xe8>
 8000588:	4643      	mov	r3, r8
 800058a:	2b00      	cmp	r3, #0
 800058c:	d12d      	bne.n	80005ea <__aeabi_fdiv+0x142>
 800058e:	2201      	movs	r2, #1
 8000590:	0031      	movs	r1, r6
 8000592:	464b      	mov	r3, r9
 8000594:	4061      	eors	r1, r4
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	4313      	orrs	r3, r2
 800059a:	2b0f      	cmp	r3, #15
 800059c:	d834      	bhi.n	8000608 <__aeabi_fdiv+0x160>
 800059e:	484d      	ldr	r0, [pc, #308]	; (80006d4 <__aeabi_fdiv+0x22c>)
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	58c3      	ldr	r3, [r0, r3]
 80005a4:	469f      	mov	pc, r3
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d113      	bne.n	80005d2 <__aeabi_fdiv+0x12a>
 80005aa:	2304      	movs	r3, #4
 80005ac:	4699      	mov	r9, r3
 80005ae:	3b03      	subs	r3, #3
 80005b0:	2700      	movs	r7, #0
 80005b2:	469a      	mov	sl, r3
 80005b4:	e791      	b.n	80004da <__aeabi_fdiv+0x32>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d105      	bne.n	80005c6 <__aeabi_fdiv+0x11e>
 80005ba:	2308      	movs	r3, #8
 80005bc:	4699      	mov	r9, r3
 80005be:	3b06      	subs	r3, #6
 80005c0:	27ff      	movs	r7, #255	; 0xff
 80005c2:	469a      	mov	sl, r3
 80005c4:	e789      	b.n	80004da <__aeabi_fdiv+0x32>
 80005c6:	230c      	movs	r3, #12
 80005c8:	4699      	mov	r9, r3
 80005ca:	3b09      	subs	r3, #9
 80005cc:	27ff      	movs	r7, #255	; 0xff
 80005ce:	469a      	mov	sl, r3
 80005d0:	e783      	b.n	80004da <__aeabi_fdiv+0x32>
 80005d2:	0028      	movs	r0, r5
 80005d4:	f000 fbf0 	bl	8000db8 <__clzsi2>
 80005d8:	2776      	movs	r7, #118	; 0x76
 80005da:	1f43      	subs	r3, r0, #5
 80005dc:	409d      	lsls	r5, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	427f      	negs	r7, r7
 80005e2:	4699      	mov	r9, r3
 80005e4:	469a      	mov	sl, r3
 80005e6:	1a3f      	subs	r7, r7, r0
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x32>
 80005ea:	4640      	mov	r0, r8
 80005ec:	f000 fbe4 	bl	8000db8 <__clzsi2>
 80005f0:	4642      	mov	r2, r8
 80005f2:	1f43      	subs	r3, r0, #5
 80005f4:	409a      	lsls	r2, r3
 80005f6:	2376      	movs	r3, #118	; 0x76
 80005f8:	425b      	negs	r3, r3
 80005fa:	4690      	mov	r8, r2
 80005fc:	1a1b      	subs	r3, r3, r0
 80005fe:	2200      	movs	r2, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	23ff      	movs	r3, #255	; 0xff
 8000604:	2203      	movs	r2, #3
 8000606:	e77a      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000608:	000e      	movs	r6, r1
 800060a:	20ff      	movs	r0, #255	; 0xff
 800060c:	2500      	movs	r5, #0
 800060e:	e7ac      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000610:	2001      	movs	r0, #1
 8000612:	1ac0      	subs	r0, r0, r3
 8000614:	281b      	cmp	r0, #27
 8000616:	dca6      	bgt.n	8000566 <__aeabi_fdiv+0xbe>
 8000618:	379e      	adds	r7, #158	; 0x9e
 800061a:	002a      	movs	r2, r5
 800061c:	40bd      	lsls	r5, r7
 800061e:	40c2      	lsrs	r2, r0
 8000620:	1e6b      	subs	r3, r5, #1
 8000622:	419d      	sbcs	r5, r3
 8000624:	4315      	orrs	r5, r2
 8000626:	076b      	lsls	r3, r5, #29
 8000628:	d004      	beq.n	8000634 <__aeabi_fdiv+0x18c>
 800062a:	230f      	movs	r3, #15
 800062c:	402b      	ands	r3, r5
 800062e:	2b04      	cmp	r3, #4
 8000630:	d000      	beq.n	8000634 <__aeabi_fdiv+0x18c>
 8000632:	3504      	adds	r5, #4
 8000634:	016b      	lsls	r3, r5, #5
 8000636:	d544      	bpl.n	80006c2 <__aeabi_fdiv+0x21a>
 8000638:	2001      	movs	r0, #1
 800063a:	2500      	movs	r5, #0
 800063c:	e795      	b.n	800056a <__aeabi_fdiv+0xc2>
 800063e:	20ff      	movs	r0, #255	; 0xff
 8000640:	2500      	movs	r5, #0
 8000642:	e792      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000644:	2580      	movs	r5, #128	; 0x80
 8000646:	2600      	movs	r6, #0
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	03ed      	lsls	r5, r5, #15
 800064c:	e78d      	b.n	800056a <__aeabi_fdiv+0xc2>
 800064e:	2300      	movs	r3, #0
 8000650:	4698      	mov	r8, r3
 8000652:	2080      	movs	r0, #128	; 0x80
 8000654:	03c0      	lsls	r0, r0, #15
 8000656:	4205      	tst	r5, r0
 8000658:	d009      	beq.n	800066e <__aeabi_fdiv+0x1c6>
 800065a:	4643      	mov	r3, r8
 800065c:	4203      	tst	r3, r0
 800065e:	d106      	bne.n	800066e <__aeabi_fdiv+0x1c6>
 8000660:	4645      	mov	r5, r8
 8000662:	4305      	orrs	r5, r0
 8000664:	026d      	lsls	r5, r5, #9
 8000666:	0026      	movs	r6, r4
 8000668:	20ff      	movs	r0, #255	; 0xff
 800066a:	0a6d      	lsrs	r5, r5, #9
 800066c:	e77d      	b.n	800056a <__aeabi_fdiv+0xc2>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4305      	orrs	r5, r0
 8000674:	026d      	lsls	r5, r5, #9
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	0a6d      	lsrs	r5, r5, #9
 800067a:	e776      	b.n	800056a <__aeabi_fdiv+0xc2>
 800067c:	4642      	mov	r2, r8
 800067e:	016b      	lsls	r3, r5, #5
 8000680:	0150      	lsls	r0, r2, #5
 8000682:	4283      	cmp	r3, r0
 8000684:	d219      	bcs.n	80006ba <__aeabi_fdiv+0x212>
 8000686:	221b      	movs	r2, #27
 8000688:	2500      	movs	r5, #0
 800068a:	3f01      	subs	r7, #1
 800068c:	2601      	movs	r6, #1
 800068e:	001c      	movs	r4, r3
 8000690:	006d      	lsls	r5, r5, #1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	2c00      	cmp	r4, #0
 8000696:	db01      	blt.n	800069c <__aeabi_fdiv+0x1f4>
 8000698:	4298      	cmp	r0, r3
 800069a:	d801      	bhi.n	80006a0 <__aeabi_fdiv+0x1f8>
 800069c:	1a1b      	subs	r3, r3, r0
 800069e:	4335      	orrs	r5, r6
 80006a0:	3a01      	subs	r2, #1
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d1f3      	bne.n	800068e <__aeabi_fdiv+0x1e6>
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	4193      	sbcs	r3, r2
 80006aa:	431d      	orrs	r5, r3
 80006ac:	003b      	movs	r3, r7
 80006ae:	337f      	adds	r3, #127	; 0x7f
 80006b0:	000e      	movs	r6, r1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd00      	ble.n	80006b8 <__aeabi_fdiv+0x210>
 80006b6:	e741      	b.n	800053c <__aeabi_fdiv+0x94>
 80006b8:	e7aa      	b.n	8000610 <__aeabi_fdiv+0x168>
 80006ba:	221a      	movs	r2, #26
 80006bc:	2501      	movs	r5, #1
 80006be:	1a1b      	subs	r3, r3, r0
 80006c0:	e7e4      	b.n	800068c <__aeabi_fdiv+0x1e4>
 80006c2:	01ad      	lsls	r5, r5, #6
 80006c4:	2000      	movs	r0, #0
 80006c6:	0a6d      	lsrs	r5, r5, #9
 80006c8:	e74f      	b.n	800056a <__aeabi_fdiv+0xc2>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	08004f10 	.word	0x08004f10
 80006d0:	f7ffffff 	.word	0xf7ffffff
 80006d4:	08004f50 	.word	0x08004f50

080006d8 <__aeabi_fmul>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	464f      	mov	r7, r9
 80006dc:	4646      	mov	r6, r8
 80006de:	46d6      	mov	lr, sl
 80006e0:	0244      	lsls	r4, r0, #9
 80006e2:	0045      	lsls	r5, r0, #1
 80006e4:	b5c0      	push	{r6, r7, lr}
 80006e6:	0a64      	lsrs	r4, r4, #9
 80006e8:	1c0f      	adds	r7, r1, #0
 80006ea:	0e2d      	lsrs	r5, r5, #24
 80006ec:	0fc6      	lsrs	r6, r0, #31
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fmul+0x1c>
 80006f2:	e08d      	b.n	8000810 <__aeabi_fmul+0x138>
 80006f4:	2dff      	cmp	r5, #255	; 0xff
 80006f6:	d100      	bne.n	80006fa <__aeabi_fmul+0x22>
 80006f8:	e092      	b.n	8000820 <__aeabi_fmul+0x148>
 80006fa:	2300      	movs	r3, #0
 80006fc:	2080      	movs	r0, #128	; 0x80
 80006fe:	4699      	mov	r9, r3
 8000700:	469a      	mov	sl, r3
 8000702:	00e4      	lsls	r4, r4, #3
 8000704:	04c0      	lsls	r0, r0, #19
 8000706:	4304      	orrs	r4, r0
 8000708:	3d7f      	subs	r5, #127	; 0x7f
 800070a:	0278      	lsls	r0, r7, #9
 800070c:	0a43      	lsrs	r3, r0, #9
 800070e:	4698      	mov	r8, r3
 8000710:	007b      	lsls	r3, r7, #1
 8000712:	0e1b      	lsrs	r3, r3, #24
 8000714:	0fff      	lsrs	r7, r7, #31
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fmul+0x44>
 800071a:	e070      	b.n	80007fe <__aeabi_fmul+0x126>
 800071c:	2bff      	cmp	r3, #255	; 0xff
 800071e:	d100      	bne.n	8000722 <__aeabi_fmul+0x4a>
 8000720:	e086      	b.n	8000830 <__aeabi_fmul+0x158>
 8000722:	4642      	mov	r2, r8
 8000724:	00d0      	lsls	r0, r2, #3
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	3b7f      	subs	r3, #127	; 0x7f
 800072a:	18ed      	adds	r5, r5, r3
 800072c:	2300      	movs	r3, #0
 800072e:	04d2      	lsls	r2, r2, #19
 8000730:	4302      	orrs	r2, r0
 8000732:	4690      	mov	r8, r2
 8000734:	469c      	mov	ip, r3
 8000736:	0031      	movs	r1, r6
 8000738:	464b      	mov	r3, r9
 800073a:	4079      	eors	r1, r7
 800073c:	1c68      	adds	r0, r5, #1
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d81c      	bhi.n	800077c <__aeabi_fmul+0xa4>
 8000742:	4a76      	ldr	r2, [pc, #472]	; (800091c <__aeabi_fmul+0x244>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	58d3      	ldr	r3, [r2, r3]
 8000748:	469f      	mov	pc, r3
 800074a:	0039      	movs	r1, r7
 800074c:	4644      	mov	r4, r8
 800074e:	46e2      	mov	sl, ip
 8000750:	4653      	mov	r3, sl
 8000752:	2b02      	cmp	r3, #2
 8000754:	d00f      	beq.n	8000776 <__aeabi_fmul+0x9e>
 8000756:	2b03      	cmp	r3, #3
 8000758:	d100      	bne.n	800075c <__aeabi_fmul+0x84>
 800075a:	e0d7      	b.n	800090c <__aeabi_fmul+0x234>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d137      	bne.n	80007d0 <__aeabi_fmul+0xf8>
 8000760:	2000      	movs	r0, #0
 8000762:	2400      	movs	r4, #0
 8000764:	05c0      	lsls	r0, r0, #23
 8000766:	4320      	orrs	r0, r4
 8000768:	07c9      	lsls	r1, r1, #31
 800076a:	4308      	orrs	r0, r1
 800076c:	bce0      	pop	{r5, r6, r7}
 800076e:	46ba      	mov	sl, r7
 8000770:	46b1      	mov	r9, r6
 8000772:	46a8      	mov	r8, r5
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	20ff      	movs	r0, #255	; 0xff
 8000778:	2400      	movs	r4, #0
 800077a:	e7f3      	b.n	8000764 <__aeabi_fmul+0x8c>
 800077c:	0c26      	lsrs	r6, r4, #16
 800077e:	0424      	lsls	r4, r4, #16
 8000780:	0c22      	lsrs	r2, r4, #16
 8000782:	4644      	mov	r4, r8
 8000784:	0424      	lsls	r4, r4, #16
 8000786:	0c24      	lsrs	r4, r4, #16
 8000788:	4643      	mov	r3, r8
 800078a:	0027      	movs	r7, r4
 800078c:	0c1b      	lsrs	r3, r3, #16
 800078e:	4357      	muls	r7, r2
 8000790:	4374      	muls	r4, r6
 8000792:	435a      	muls	r2, r3
 8000794:	435e      	muls	r6, r3
 8000796:	1912      	adds	r2, r2, r4
 8000798:	0c3b      	lsrs	r3, r7, #16
 800079a:	189b      	adds	r3, r3, r2
 800079c:	429c      	cmp	r4, r3
 800079e:	d903      	bls.n	80007a8 <__aeabi_fmul+0xd0>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0252      	lsls	r2, r2, #9
 80007a4:	4694      	mov	ip, r2
 80007a6:	4466      	add	r6, ip
 80007a8:	043f      	lsls	r7, r7, #16
 80007aa:	041a      	lsls	r2, r3, #16
 80007ac:	0c3f      	lsrs	r7, r7, #16
 80007ae:	19d2      	adds	r2, r2, r7
 80007b0:	0194      	lsls	r4, r2, #6
 80007b2:	1e67      	subs	r7, r4, #1
 80007b4:	41bc      	sbcs	r4, r7
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	0e92      	lsrs	r2, r2, #26
 80007ba:	199b      	adds	r3, r3, r6
 80007bc:	4314      	orrs	r4, r2
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	431c      	orrs	r4, r3
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	d400      	bmi.n	80007c8 <__aeabi_fmul+0xf0>
 80007c6:	e09b      	b.n	8000900 <__aeabi_fmul+0x228>
 80007c8:	2301      	movs	r3, #1
 80007ca:	0862      	lsrs	r2, r4, #1
 80007cc:	401c      	ands	r4, r3
 80007ce:	4314      	orrs	r4, r2
 80007d0:	0002      	movs	r2, r0
 80007d2:	327f      	adds	r2, #127	; 0x7f
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	dd64      	ble.n	80008a2 <__aeabi_fmul+0x1ca>
 80007d8:	0763      	lsls	r3, r4, #29
 80007da:	d004      	beq.n	80007e6 <__aeabi_fmul+0x10e>
 80007dc:	230f      	movs	r3, #15
 80007de:	4023      	ands	r3, r4
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fmul+0x10e>
 80007e4:	3404      	adds	r4, #4
 80007e6:	0123      	lsls	r3, r4, #4
 80007e8:	d503      	bpl.n	80007f2 <__aeabi_fmul+0x11a>
 80007ea:	0002      	movs	r2, r0
 80007ec:	4b4c      	ldr	r3, [pc, #304]	; (8000920 <__aeabi_fmul+0x248>)
 80007ee:	3280      	adds	r2, #128	; 0x80
 80007f0:	401c      	ands	r4, r3
 80007f2:	2afe      	cmp	r2, #254	; 0xfe
 80007f4:	dcbf      	bgt.n	8000776 <__aeabi_fmul+0x9e>
 80007f6:	01a4      	lsls	r4, r4, #6
 80007f8:	0a64      	lsrs	r4, r4, #9
 80007fa:	b2d0      	uxtb	r0, r2
 80007fc:	e7b2      	b.n	8000764 <__aeabi_fmul+0x8c>
 80007fe:	4643      	mov	r3, r8
 8000800:	2b00      	cmp	r3, #0
 8000802:	d13d      	bne.n	8000880 <__aeabi_fmul+0x1a8>
 8000804:	464a      	mov	r2, r9
 8000806:	3301      	adds	r3, #1
 8000808:	431a      	orrs	r2, r3
 800080a:	4691      	mov	r9, r2
 800080c:	469c      	mov	ip, r3
 800080e:	e792      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000810:	2c00      	cmp	r4, #0
 8000812:	d129      	bne.n	8000868 <__aeabi_fmul+0x190>
 8000814:	2304      	movs	r3, #4
 8000816:	4699      	mov	r9, r3
 8000818:	3b03      	subs	r3, #3
 800081a:	2500      	movs	r5, #0
 800081c:	469a      	mov	sl, r3
 800081e:	e774      	b.n	800070a <__aeabi_fmul+0x32>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d11b      	bne.n	800085c <__aeabi_fmul+0x184>
 8000824:	2308      	movs	r3, #8
 8000826:	4699      	mov	r9, r3
 8000828:	3b06      	subs	r3, #6
 800082a:	25ff      	movs	r5, #255	; 0xff
 800082c:	469a      	mov	sl, r3
 800082e:	e76c      	b.n	800070a <__aeabi_fmul+0x32>
 8000830:	4643      	mov	r3, r8
 8000832:	35ff      	adds	r5, #255	; 0xff
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10b      	bne.n	8000850 <__aeabi_fmul+0x178>
 8000838:	2302      	movs	r3, #2
 800083a:	464a      	mov	r2, r9
 800083c:	431a      	orrs	r2, r3
 800083e:	4691      	mov	r9, r2
 8000840:	469c      	mov	ip, r3
 8000842:	e778      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000844:	4653      	mov	r3, sl
 8000846:	0031      	movs	r1, r6
 8000848:	2b02      	cmp	r3, #2
 800084a:	d000      	beq.n	800084e <__aeabi_fmul+0x176>
 800084c:	e783      	b.n	8000756 <__aeabi_fmul+0x7e>
 800084e:	e792      	b.n	8000776 <__aeabi_fmul+0x9e>
 8000850:	2303      	movs	r3, #3
 8000852:	464a      	mov	r2, r9
 8000854:	431a      	orrs	r2, r3
 8000856:	4691      	mov	r9, r2
 8000858:	469c      	mov	ip, r3
 800085a:	e76c      	b.n	8000736 <__aeabi_fmul+0x5e>
 800085c:	230c      	movs	r3, #12
 800085e:	4699      	mov	r9, r3
 8000860:	3b09      	subs	r3, #9
 8000862:	25ff      	movs	r5, #255	; 0xff
 8000864:	469a      	mov	sl, r3
 8000866:	e750      	b.n	800070a <__aeabi_fmul+0x32>
 8000868:	0020      	movs	r0, r4
 800086a:	f000 faa5 	bl	8000db8 <__clzsi2>
 800086e:	2576      	movs	r5, #118	; 0x76
 8000870:	1f43      	subs	r3, r0, #5
 8000872:	409c      	lsls	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	426d      	negs	r5, r5
 8000878:	4699      	mov	r9, r3
 800087a:	469a      	mov	sl, r3
 800087c:	1a2d      	subs	r5, r5, r0
 800087e:	e744      	b.n	800070a <__aeabi_fmul+0x32>
 8000880:	4640      	mov	r0, r8
 8000882:	f000 fa99 	bl	8000db8 <__clzsi2>
 8000886:	4642      	mov	r2, r8
 8000888:	1f43      	subs	r3, r0, #5
 800088a:	409a      	lsls	r2, r3
 800088c:	2300      	movs	r3, #0
 800088e:	1a2d      	subs	r5, r5, r0
 8000890:	4690      	mov	r8, r2
 8000892:	469c      	mov	ip, r3
 8000894:	3d76      	subs	r5, #118	; 0x76
 8000896:	e74e      	b.n	8000736 <__aeabi_fmul+0x5e>
 8000898:	2480      	movs	r4, #128	; 0x80
 800089a:	2100      	movs	r1, #0
 800089c:	20ff      	movs	r0, #255	; 0xff
 800089e:	03e4      	lsls	r4, r4, #15
 80008a0:	e760      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008a2:	2301      	movs	r3, #1
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	2b1b      	cmp	r3, #27
 80008a8:	dd00      	ble.n	80008ac <__aeabi_fmul+0x1d4>
 80008aa:	e759      	b.n	8000760 <__aeabi_fmul+0x88>
 80008ac:	0022      	movs	r2, r4
 80008ae:	309e      	adds	r0, #158	; 0x9e
 80008b0:	40da      	lsrs	r2, r3
 80008b2:	4084      	lsls	r4, r0
 80008b4:	0013      	movs	r3, r2
 80008b6:	1e62      	subs	r2, r4, #1
 80008b8:	4194      	sbcs	r4, r2
 80008ba:	431c      	orrs	r4, r3
 80008bc:	0763      	lsls	r3, r4, #29
 80008be:	d004      	beq.n	80008ca <__aeabi_fmul+0x1f2>
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x1f2>
 80008c8:	3404      	adds	r4, #4
 80008ca:	0163      	lsls	r3, r4, #5
 80008cc:	d51a      	bpl.n	8000904 <__aeabi_fmul+0x22c>
 80008ce:	2001      	movs	r0, #1
 80008d0:	2400      	movs	r4, #0
 80008d2:	e747      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008d4:	2080      	movs	r0, #128	; 0x80
 80008d6:	03c0      	lsls	r0, r0, #15
 80008d8:	4204      	tst	r4, r0
 80008da:	d009      	beq.n	80008f0 <__aeabi_fmul+0x218>
 80008dc:	4643      	mov	r3, r8
 80008de:	4203      	tst	r3, r0
 80008e0:	d106      	bne.n	80008f0 <__aeabi_fmul+0x218>
 80008e2:	4644      	mov	r4, r8
 80008e4:	4304      	orrs	r4, r0
 80008e6:	0264      	lsls	r4, r4, #9
 80008e8:	0039      	movs	r1, r7
 80008ea:	20ff      	movs	r0, #255	; 0xff
 80008ec:	0a64      	lsrs	r4, r4, #9
 80008ee:	e739      	b.n	8000764 <__aeabi_fmul+0x8c>
 80008f0:	2080      	movs	r0, #128	; 0x80
 80008f2:	03c0      	lsls	r0, r0, #15
 80008f4:	4304      	orrs	r4, r0
 80008f6:	0264      	lsls	r4, r4, #9
 80008f8:	0031      	movs	r1, r6
 80008fa:	20ff      	movs	r0, #255	; 0xff
 80008fc:	0a64      	lsrs	r4, r4, #9
 80008fe:	e731      	b.n	8000764 <__aeabi_fmul+0x8c>
 8000900:	0028      	movs	r0, r5
 8000902:	e765      	b.n	80007d0 <__aeabi_fmul+0xf8>
 8000904:	01a4      	lsls	r4, r4, #6
 8000906:	2000      	movs	r0, #0
 8000908:	0a64      	lsrs	r4, r4, #9
 800090a:	e72b      	b.n	8000764 <__aeabi_fmul+0x8c>
 800090c:	2080      	movs	r0, #128	; 0x80
 800090e:	03c0      	lsls	r0, r0, #15
 8000910:	4304      	orrs	r4, r0
 8000912:	0264      	lsls	r4, r4, #9
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	0a64      	lsrs	r4, r4, #9
 8000918:	e724      	b.n	8000764 <__aeabi_fmul+0x8c>
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	08004f90 	.word	0x08004f90
 8000920:	f7ffffff 	.word	0xf7ffffff

08000924 <__aeabi_fsub>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	46ce      	mov	lr, r9
 8000928:	4647      	mov	r7, r8
 800092a:	0243      	lsls	r3, r0, #9
 800092c:	0a5b      	lsrs	r3, r3, #9
 800092e:	024e      	lsls	r6, r1, #9
 8000930:	00da      	lsls	r2, r3, #3
 8000932:	4694      	mov	ip, r2
 8000934:	0a72      	lsrs	r2, r6, #9
 8000936:	4691      	mov	r9, r2
 8000938:	0045      	lsls	r5, r0, #1
 800093a:	004a      	lsls	r2, r1, #1
 800093c:	b580      	push	{r7, lr}
 800093e:	0e2d      	lsrs	r5, r5, #24
 8000940:	001f      	movs	r7, r3
 8000942:	0fc4      	lsrs	r4, r0, #31
 8000944:	0e12      	lsrs	r2, r2, #24
 8000946:	0fc9      	lsrs	r1, r1, #31
 8000948:	09b6      	lsrs	r6, r6, #6
 800094a:	2aff      	cmp	r2, #255	; 0xff
 800094c:	d05b      	beq.n	8000a06 <__aeabi_fsub+0xe2>
 800094e:	2001      	movs	r0, #1
 8000950:	4041      	eors	r1, r0
 8000952:	428c      	cmp	r4, r1
 8000954:	d039      	beq.n	80009ca <__aeabi_fsub+0xa6>
 8000956:	1aa8      	subs	r0, r5, r2
 8000958:	2800      	cmp	r0, #0
 800095a:	dd5a      	ble.n	8000a12 <__aeabi_fsub+0xee>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d06a      	beq.n	8000a36 <__aeabi_fsub+0x112>
 8000960:	2dff      	cmp	r5, #255	; 0xff
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x42>
 8000964:	e0d9      	b.n	8000b1a <__aeabi_fsub+0x1f6>
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4316      	orrs	r6, r2
 800096c:	281b      	cmp	r0, #27
 800096e:	dc00      	bgt.n	8000972 <__aeabi_fsub+0x4e>
 8000970:	e0e9      	b.n	8000b46 <__aeabi_fsub+0x222>
 8000972:	2001      	movs	r0, #1
 8000974:	4663      	mov	r3, ip
 8000976:	1a18      	subs	r0, r3, r0
 8000978:	0143      	lsls	r3, r0, #5
 800097a:	d400      	bmi.n	800097e <__aeabi_fsub+0x5a>
 800097c:	e0b4      	b.n	8000ae8 <__aeabi_fsub+0x1c4>
 800097e:	0180      	lsls	r0, r0, #6
 8000980:	0987      	lsrs	r7, r0, #6
 8000982:	0038      	movs	r0, r7
 8000984:	f000 fa18 	bl	8000db8 <__clzsi2>
 8000988:	3805      	subs	r0, #5
 800098a:	4087      	lsls	r7, r0
 800098c:	4285      	cmp	r5, r0
 800098e:	dc00      	bgt.n	8000992 <__aeabi_fsub+0x6e>
 8000990:	e0cc      	b.n	8000b2c <__aeabi_fsub+0x208>
 8000992:	1a2d      	subs	r5, r5, r0
 8000994:	48b5      	ldr	r0, [pc, #724]	; (8000c6c <__aeabi_fsub+0x348>)
 8000996:	4038      	ands	r0, r7
 8000998:	0743      	lsls	r3, r0, #29
 800099a:	d004      	beq.n	80009a6 <__aeabi_fsub+0x82>
 800099c:	230f      	movs	r3, #15
 800099e:	4003      	ands	r3, r0
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fsub+0x82>
 80009a4:	3004      	adds	r0, #4
 80009a6:	0143      	lsls	r3, r0, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fsub+0x88>
 80009aa:	e0a0      	b.n	8000aee <__aeabi_fsub+0x1ca>
 80009ac:	1c6a      	adds	r2, r5, #1
 80009ae:	2dfe      	cmp	r5, #254	; 0xfe
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0x90>
 80009b2:	e08d      	b.n	8000ad0 <__aeabi_fsub+0x1ac>
 80009b4:	0180      	lsls	r0, r0, #6
 80009b6:	0a47      	lsrs	r7, r0, #9
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	05d0      	lsls	r0, r2, #23
 80009bc:	4338      	orrs	r0, r7
 80009be:	07e4      	lsls	r4, r4, #31
 80009c0:	4320      	orrs	r0, r4
 80009c2:	bcc0      	pop	{r6, r7}
 80009c4:	46b9      	mov	r9, r7
 80009c6:	46b0      	mov	r8, r6
 80009c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ca:	1aa8      	subs	r0, r5, r2
 80009cc:	4680      	mov	r8, r0
 80009ce:	2800      	cmp	r0, #0
 80009d0:	dd45      	ble.n	8000a5e <__aeabi_fsub+0x13a>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d070      	beq.n	8000ab8 <__aeabi_fsub+0x194>
 80009d6:	2dff      	cmp	r5, #255	; 0xff
 80009d8:	d100      	bne.n	80009dc <__aeabi_fsub+0xb8>
 80009da:	e09e      	b.n	8000b1a <__aeabi_fsub+0x1f6>
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	04db      	lsls	r3, r3, #19
 80009e0:	431e      	orrs	r6, r3
 80009e2:	4643      	mov	r3, r8
 80009e4:	2b1b      	cmp	r3, #27
 80009e6:	dc00      	bgt.n	80009ea <__aeabi_fsub+0xc6>
 80009e8:	e0d2      	b.n	8000b90 <__aeabi_fsub+0x26c>
 80009ea:	2001      	movs	r0, #1
 80009ec:	4460      	add	r0, ip
 80009ee:	0143      	lsls	r3, r0, #5
 80009f0:	d57a      	bpl.n	8000ae8 <__aeabi_fsub+0x1c4>
 80009f2:	3501      	adds	r5, #1
 80009f4:	2dff      	cmp	r5, #255	; 0xff
 80009f6:	d06b      	beq.n	8000ad0 <__aeabi_fsub+0x1ac>
 80009f8:	2301      	movs	r3, #1
 80009fa:	4a9d      	ldr	r2, [pc, #628]	; (8000c70 <__aeabi_fsub+0x34c>)
 80009fc:	4003      	ands	r3, r0
 80009fe:	0840      	lsrs	r0, r0, #1
 8000a00:	4010      	ands	r0, r2
 8000a02:	4318      	orrs	r0, r3
 8000a04:	e7c8      	b.n	8000998 <__aeabi_fsub+0x74>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d020      	beq.n	8000a4c <__aeabi_fsub+0x128>
 8000a0a:	428c      	cmp	r4, r1
 8000a0c:	d023      	beq.n	8000a56 <__aeabi_fsub+0x132>
 8000a0e:	0028      	movs	r0, r5
 8000a10:	38ff      	subs	r0, #255	; 0xff
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d039      	beq.n	8000a8a <__aeabi_fsub+0x166>
 8000a16:	1b57      	subs	r7, r2, r5
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fsub+0xfa>
 8000a1c:	e09d      	b.n	8000b5a <__aeabi_fsub+0x236>
 8000a1e:	4663      	mov	r3, ip
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d100      	bne.n	8000a26 <__aeabi_fsub+0x102>
 8000a24:	e0db      	b.n	8000bde <__aeabi_fsub+0x2ba>
 8000a26:	1e7b      	subs	r3, r7, #1
 8000a28:	2f01      	cmp	r7, #1
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0x10a>
 8000a2c:	e10d      	b.n	8000c4a <__aeabi_fsub+0x326>
 8000a2e:	2fff      	cmp	r7, #255	; 0xff
 8000a30:	d071      	beq.n	8000b16 <__aeabi_fsub+0x1f2>
 8000a32:	001f      	movs	r7, r3
 8000a34:	e098      	b.n	8000b68 <__aeabi_fsub+0x244>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x118>
 8000a3a:	e0a7      	b.n	8000b8c <__aeabi_fsub+0x268>
 8000a3c:	1e42      	subs	r2, r0, #1
 8000a3e:	2801      	cmp	r0, #1
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x120>
 8000a42:	e0e6      	b.n	8000c12 <__aeabi_fsub+0x2ee>
 8000a44:	28ff      	cmp	r0, #255	; 0xff
 8000a46:	d068      	beq.n	8000b1a <__aeabi_fsub+0x1f6>
 8000a48:	0010      	movs	r0, r2
 8000a4a:	e78f      	b.n	800096c <__aeabi_fsub+0x48>
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	4041      	eors	r1, r0
 8000a50:	42a1      	cmp	r1, r4
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fsub+0x132>
 8000a54:	e77f      	b.n	8000956 <__aeabi_fsub+0x32>
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	4240      	negs	r0, r0
 8000a5a:	4680      	mov	r8, r0
 8000a5c:	44a8      	add	r8, r5
 8000a5e:	4640      	mov	r0, r8
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d038      	beq.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000a64:	1b51      	subs	r1, r2, r5
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x148>
 8000a6a:	e0ae      	b.n	8000bca <__aeabi_fsub+0x2a6>
 8000a6c:	2aff      	cmp	r2, #255	; 0xff
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x14e>
 8000a70:	e0df      	b.n	8000c32 <__aeabi_fsub+0x30e>
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	4660      	mov	r0, ip
 8000a76:	04db      	lsls	r3, r3, #19
 8000a78:	4318      	orrs	r0, r3
 8000a7a:	4684      	mov	ip, r0
 8000a7c:	291b      	cmp	r1, #27
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_fsub+0x15e>
 8000a80:	e0d9      	b.n	8000c36 <__aeabi_fsub+0x312>
 8000a82:	2001      	movs	r0, #1
 8000a84:	0015      	movs	r5, r2
 8000a86:	1980      	adds	r0, r0, r6
 8000a88:	e7b1      	b.n	80009ee <__aeabi_fsub+0xca>
 8000a8a:	20fe      	movs	r0, #254	; 0xfe
 8000a8c:	1c6a      	adds	r2, r5, #1
 8000a8e:	4210      	tst	r0, r2
 8000a90:	d171      	bne.n	8000b76 <__aeabi_fsub+0x252>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	d000      	beq.n	8000a98 <__aeabi_fsub+0x174>
 8000a96:	e0a6      	b.n	8000be6 <__aeabi_fsub+0x2c2>
 8000a98:	4663      	mov	r3, ip
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_fsub+0x17c>
 8000a9e:	e0d9      	b.n	8000c54 <__aeabi_fsub+0x330>
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fsub+0x184>
 8000aa6:	e788      	b.n	80009ba <__aeabi_fsub+0x96>
 8000aa8:	1b98      	subs	r0, r3, r6
 8000aaa:	0143      	lsls	r3, r0, #5
 8000aac:	d400      	bmi.n	8000ab0 <__aeabi_fsub+0x18c>
 8000aae:	e0e1      	b.n	8000c74 <__aeabi_fsub+0x350>
 8000ab0:	4663      	mov	r3, ip
 8000ab2:	000c      	movs	r4, r1
 8000ab4:	1af0      	subs	r0, r6, r3
 8000ab6:	e76f      	b.n	8000998 <__aeabi_fsub+0x74>
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_fsub+0x19a>
 8000abc:	e0b7      	b.n	8000c2e <__aeabi_fsub+0x30a>
 8000abe:	0002      	movs	r2, r0
 8000ac0:	3a01      	subs	r2, #1
 8000ac2:	2801      	cmp	r0, #1
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fsub+0x1a4>
 8000ac6:	e09c      	b.n	8000c02 <__aeabi_fsub+0x2de>
 8000ac8:	28ff      	cmp	r0, #255	; 0xff
 8000aca:	d026      	beq.n	8000b1a <__aeabi_fsub+0x1f6>
 8000acc:	4690      	mov	r8, r2
 8000ace:	e788      	b.n	80009e2 <__aeabi_fsub+0xbe>
 8000ad0:	22ff      	movs	r2, #255	; 0xff
 8000ad2:	2700      	movs	r7, #0
 8000ad4:	e771      	b.n	80009ba <__aeabi_fsub+0x96>
 8000ad6:	20fe      	movs	r0, #254	; 0xfe
 8000ad8:	1c6a      	adds	r2, r5, #1
 8000ada:	4210      	tst	r0, r2
 8000adc:	d064      	beq.n	8000ba8 <__aeabi_fsub+0x284>
 8000ade:	2aff      	cmp	r2, #255	; 0xff
 8000ae0:	d0f6      	beq.n	8000ad0 <__aeabi_fsub+0x1ac>
 8000ae2:	0015      	movs	r5, r2
 8000ae4:	4466      	add	r6, ip
 8000ae6:	0870      	lsrs	r0, r6, #1
 8000ae8:	0743      	lsls	r3, r0, #29
 8000aea:	d000      	beq.n	8000aee <__aeabi_fsub+0x1ca>
 8000aec:	e756      	b.n	800099c <__aeabi_fsub+0x78>
 8000aee:	08c3      	lsrs	r3, r0, #3
 8000af0:	2dff      	cmp	r5, #255	; 0xff
 8000af2:	d012      	beq.n	8000b1a <__aeabi_fsub+0x1f6>
 8000af4:	025b      	lsls	r3, r3, #9
 8000af6:	0a5f      	lsrs	r7, r3, #9
 8000af8:	b2ea      	uxtb	r2, r5
 8000afa:	e75e      	b.n	80009ba <__aeabi_fsub+0x96>
 8000afc:	4662      	mov	r2, ip
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d100      	bne.n	8000b04 <__aeabi_fsub+0x1e0>
 8000b02:	e096      	b.n	8000c32 <__aeabi_fsub+0x30e>
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d008      	beq.n	8000b1a <__aeabi_fsub+0x1f6>
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	03d2      	lsls	r2, r2, #15
 8000b0c:	4213      	tst	r3, r2
 8000b0e:	d004      	beq.n	8000b1a <__aeabi_fsub+0x1f6>
 8000b10:	4648      	mov	r0, r9
 8000b12:	4210      	tst	r0, r2
 8000b14:	d101      	bne.n	8000b1a <__aeabi_fsub+0x1f6>
 8000b16:	000c      	movs	r4, r1
 8000b18:	464b      	mov	r3, r9
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0d8      	beq.n	8000ad0 <__aeabi_fsub+0x1ac>
 8000b1e:	2780      	movs	r7, #128	; 0x80
 8000b20:	03ff      	lsls	r7, r7, #15
 8000b22:	431f      	orrs	r7, r3
 8000b24:	027f      	lsls	r7, r7, #9
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	0a7f      	lsrs	r7, r7, #9
 8000b2a:	e746      	b.n	80009ba <__aeabi_fsub+0x96>
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	003a      	movs	r2, r7
 8000b30:	1b45      	subs	r5, r0, r5
 8000b32:	0038      	movs	r0, r7
 8000b34:	3501      	adds	r5, #1
 8000b36:	40ea      	lsrs	r2, r5
 8000b38:	1b5d      	subs	r5, r3, r5
 8000b3a:	40a8      	lsls	r0, r5
 8000b3c:	1e43      	subs	r3, r0, #1
 8000b3e:	4198      	sbcs	r0, r3
 8000b40:	2500      	movs	r5, #0
 8000b42:	4310      	orrs	r0, r2
 8000b44:	e728      	b.n	8000998 <__aeabi_fsub+0x74>
 8000b46:	2320      	movs	r3, #32
 8000b48:	1a1b      	subs	r3, r3, r0
 8000b4a:	0032      	movs	r2, r6
 8000b4c:	409e      	lsls	r6, r3
 8000b4e:	40c2      	lsrs	r2, r0
 8000b50:	0030      	movs	r0, r6
 8000b52:	1e43      	subs	r3, r0, #1
 8000b54:	4198      	sbcs	r0, r3
 8000b56:	4310      	orrs	r0, r2
 8000b58:	e70c      	b.n	8000974 <__aeabi_fsub+0x50>
 8000b5a:	2aff      	cmp	r2, #255	; 0xff
 8000b5c:	d0db      	beq.n	8000b16 <__aeabi_fsub+0x1f2>
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	4660      	mov	r0, ip
 8000b62:	04db      	lsls	r3, r3, #19
 8000b64:	4318      	orrs	r0, r3
 8000b66:	4684      	mov	ip, r0
 8000b68:	2f1b      	cmp	r7, #27
 8000b6a:	dd56      	ble.n	8000c1a <__aeabi_fsub+0x2f6>
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	000c      	movs	r4, r1
 8000b70:	0015      	movs	r5, r2
 8000b72:	1a30      	subs	r0, r6, r0
 8000b74:	e700      	b.n	8000978 <__aeabi_fsub+0x54>
 8000b76:	4663      	mov	r3, ip
 8000b78:	1b9f      	subs	r7, r3, r6
 8000b7a:	017b      	lsls	r3, r7, #5
 8000b7c:	d43d      	bmi.n	8000bfa <__aeabi_fsub+0x2d6>
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d000      	beq.n	8000b84 <__aeabi_fsub+0x260>
 8000b82:	e6fe      	b.n	8000982 <__aeabi_fsub+0x5e>
 8000b84:	2400      	movs	r4, #0
 8000b86:	2200      	movs	r2, #0
 8000b88:	2700      	movs	r7, #0
 8000b8a:	e716      	b.n	80009ba <__aeabi_fsub+0x96>
 8000b8c:	0005      	movs	r5, r0
 8000b8e:	e7af      	b.n	8000af0 <__aeabi_fsub+0x1cc>
 8000b90:	0032      	movs	r2, r6
 8000b92:	4643      	mov	r3, r8
 8000b94:	4641      	mov	r1, r8
 8000b96:	40da      	lsrs	r2, r3
 8000b98:	2320      	movs	r3, #32
 8000b9a:	1a5b      	subs	r3, r3, r1
 8000b9c:	409e      	lsls	r6, r3
 8000b9e:	0030      	movs	r0, r6
 8000ba0:	1e43      	subs	r3, r0, #1
 8000ba2:	4198      	sbcs	r0, r3
 8000ba4:	4310      	orrs	r0, r2
 8000ba6:	e721      	b.n	80009ec <__aeabi_fsub+0xc8>
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d1a7      	bne.n	8000afc <__aeabi_fsub+0x1d8>
 8000bac:	4663      	mov	r3, ip
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d059      	beq.n	8000c66 <__aeabi_fsub+0x342>
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fsub+0x296>
 8000bb8:	e6ff      	b.n	80009ba <__aeabi_fsub+0x96>
 8000bba:	0030      	movs	r0, r6
 8000bbc:	4460      	add	r0, ip
 8000bbe:	0143      	lsls	r3, r0, #5
 8000bc0:	d592      	bpl.n	8000ae8 <__aeabi_fsub+0x1c4>
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <__aeabi_fsub+0x348>)
 8000bc4:	3501      	adds	r5, #1
 8000bc6:	4018      	ands	r0, r3
 8000bc8:	e78e      	b.n	8000ae8 <__aeabi_fsub+0x1c4>
 8000bca:	4663      	mov	r3, ip
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d047      	beq.n	8000c60 <__aeabi_fsub+0x33c>
 8000bd0:	1e4b      	subs	r3, r1, #1
 8000bd2:	2901      	cmp	r1, #1
 8000bd4:	d015      	beq.n	8000c02 <__aeabi_fsub+0x2de>
 8000bd6:	29ff      	cmp	r1, #255	; 0xff
 8000bd8:	d02b      	beq.n	8000c32 <__aeabi_fsub+0x30e>
 8000bda:	0019      	movs	r1, r3
 8000bdc:	e74e      	b.n	8000a7c <__aeabi_fsub+0x158>
 8000bde:	000c      	movs	r4, r1
 8000be0:	464b      	mov	r3, r9
 8000be2:	003d      	movs	r5, r7
 8000be4:	e784      	b.n	8000af0 <__aeabi_fsub+0x1cc>
 8000be6:	4662      	mov	r2, ip
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d18b      	bne.n	8000b04 <__aeabi_fsub+0x1e0>
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d192      	bne.n	8000b16 <__aeabi_fsub+0x1f2>
 8000bf0:	2780      	movs	r7, #128	; 0x80
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	03ff      	lsls	r7, r7, #15
 8000bf8:	e6df      	b.n	80009ba <__aeabi_fsub+0x96>
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1af7      	subs	r7, r6, r3
 8000c00:	e6bf      	b.n	8000982 <__aeabi_fsub+0x5e>
 8000c02:	0030      	movs	r0, r6
 8000c04:	4460      	add	r0, ip
 8000c06:	2501      	movs	r5, #1
 8000c08:	0143      	lsls	r3, r0, #5
 8000c0a:	d400      	bmi.n	8000c0e <__aeabi_fsub+0x2ea>
 8000c0c:	e76c      	b.n	8000ae8 <__aeabi_fsub+0x1c4>
 8000c0e:	2502      	movs	r5, #2
 8000c10:	e6f2      	b.n	80009f8 <__aeabi_fsub+0xd4>
 8000c12:	4663      	mov	r3, ip
 8000c14:	2501      	movs	r5, #1
 8000c16:	1b98      	subs	r0, r3, r6
 8000c18:	e6ae      	b.n	8000978 <__aeabi_fsub+0x54>
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	4664      	mov	r4, ip
 8000c1e:	4660      	mov	r0, ip
 8000c20:	40fc      	lsrs	r4, r7
 8000c22:	1bdf      	subs	r7, r3, r7
 8000c24:	40b8      	lsls	r0, r7
 8000c26:	1e43      	subs	r3, r0, #1
 8000c28:	4198      	sbcs	r0, r3
 8000c2a:	4320      	orrs	r0, r4
 8000c2c:	e79f      	b.n	8000b6e <__aeabi_fsub+0x24a>
 8000c2e:	0005      	movs	r5, r0
 8000c30:	e75e      	b.n	8000af0 <__aeabi_fsub+0x1cc>
 8000c32:	464b      	mov	r3, r9
 8000c34:	e771      	b.n	8000b1a <__aeabi_fsub+0x1f6>
 8000c36:	2320      	movs	r3, #32
 8000c38:	4665      	mov	r5, ip
 8000c3a:	4660      	mov	r0, ip
 8000c3c:	40cd      	lsrs	r5, r1
 8000c3e:	1a59      	subs	r1, r3, r1
 8000c40:	4088      	lsls	r0, r1
 8000c42:	1e43      	subs	r3, r0, #1
 8000c44:	4198      	sbcs	r0, r3
 8000c46:	4328      	orrs	r0, r5
 8000c48:	e71c      	b.n	8000a84 <__aeabi_fsub+0x160>
 8000c4a:	4663      	mov	r3, ip
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	2501      	movs	r5, #1
 8000c50:	1af0      	subs	r0, r6, r3
 8000c52:	e691      	b.n	8000978 <__aeabi_fsub+0x54>
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d095      	beq.n	8000b84 <__aeabi_fsub+0x260>
 8000c58:	000c      	movs	r4, r1
 8000c5a:	464f      	mov	r7, r9
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	e6ac      	b.n	80009ba <__aeabi_fsub+0x96>
 8000c60:	464b      	mov	r3, r9
 8000c62:	000d      	movs	r5, r1
 8000c64:	e744      	b.n	8000af0 <__aeabi_fsub+0x1cc>
 8000c66:	464f      	mov	r7, r9
 8000c68:	2200      	movs	r2, #0
 8000c6a:	e6a6      	b.n	80009ba <__aeabi_fsub+0x96>
 8000c6c:	fbffffff 	.word	0xfbffffff
 8000c70:	7dffffff 	.word	0x7dffffff
 8000c74:	2800      	cmp	r0, #0
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fsub+0x356>
 8000c78:	e736      	b.n	8000ae8 <__aeabi_fsub+0x1c4>
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	e69c      	b.n	80009ba <__aeabi_fsub+0x96>

08000c80 <__aeabi_f2iz>:
 8000c80:	0241      	lsls	r1, r0, #9
 8000c82:	0042      	lsls	r2, r0, #1
 8000c84:	0fc3      	lsrs	r3, r0, #31
 8000c86:	0a49      	lsrs	r1, r1, #9
 8000c88:	2000      	movs	r0, #0
 8000c8a:	0e12      	lsrs	r2, r2, #24
 8000c8c:	2a7e      	cmp	r2, #126	; 0x7e
 8000c8e:	dd03      	ble.n	8000c98 <__aeabi_f2iz+0x18>
 8000c90:	2a9d      	cmp	r2, #157	; 0x9d
 8000c92:	dd02      	ble.n	8000c9a <__aeabi_f2iz+0x1a>
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <__aeabi_f2iz+0x3c>)
 8000c96:	1898      	adds	r0, r3, r2
 8000c98:	4770      	bx	lr
 8000c9a:	2080      	movs	r0, #128	; 0x80
 8000c9c:	0400      	lsls	r0, r0, #16
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	2a95      	cmp	r2, #149	; 0x95
 8000ca2:	dc07      	bgt.n	8000cb4 <__aeabi_f2iz+0x34>
 8000ca4:	2096      	movs	r0, #150	; 0x96
 8000ca6:	1a82      	subs	r2, r0, r2
 8000ca8:	40d1      	lsrs	r1, r2
 8000caa:	4248      	negs	r0, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f3      	bne.n	8000c98 <__aeabi_f2iz+0x18>
 8000cb0:	0008      	movs	r0, r1
 8000cb2:	e7f1      	b.n	8000c98 <__aeabi_f2iz+0x18>
 8000cb4:	3a96      	subs	r2, #150	; 0x96
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	e7f7      	b.n	8000caa <__aeabi_f2iz+0x2a>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	7fffffff 	.word	0x7fffffff

08000cc0 <__aeabi_ui2f>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	1e05      	subs	r5, r0, #0
 8000cc4:	d00e      	beq.n	8000ce4 <__aeabi_ui2f+0x24>
 8000cc6:	f000 f877 	bl	8000db8 <__clzsi2>
 8000cca:	239e      	movs	r3, #158	; 0x9e
 8000ccc:	0004      	movs	r4, r0
 8000cce:	1a1b      	subs	r3, r3, r0
 8000cd0:	2b96      	cmp	r3, #150	; 0x96
 8000cd2:	dc0c      	bgt.n	8000cee <__aeabi_ui2f+0x2e>
 8000cd4:	2808      	cmp	r0, #8
 8000cd6:	dd01      	ble.n	8000cdc <__aeabi_ui2f+0x1c>
 8000cd8:	3c08      	subs	r4, #8
 8000cda:	40a5      	lsls	r5, r4
 8000cdc:	026d      	lsls	r5, r5, #9
 8000cde:	0a6d      	lsrs	r5, r5, #9
 8000ce0:	b2d8      	uxtb	r0, r3
 8000ce2:	e001      	b.n	8000ce8 <__aeabi_ui2f+0x28>
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	2500      	movs	r5, #0
 8000ce8:	05c0      	lsls	r0, r0, #23
 8000cea:	4328      	orrs	r0, r5
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
 8000cee:	2b99      	cmp	r3, #153	; 0x99
 8000cf0:	dd09      	ble.n	8000d06 <__aeabi_ui2f+0x46>
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	0029      	movs	r1, r5
 8000cf6:	321b      	adds	r2, #27
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	1e4a      	subs	r2, r1, #1
 8000cfc:	4191      	sbcs	r1, r2
 8000cfe:	2205      	movs	r2, #5
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	40d5      	lsrs	r5, r2
 8000d04:	430d      	orrs	r5, r1
 8000d06:	2c05      	cmp	r4, #5
 8000d08:	dc12      	bgt.n	8000d30 <__aeabi_ui2f+0x70>
 8000d0a:	0029      	movs	r1, r5
 8000d0c:	4e0c      	ldr	r6, [pc, #48]	; (8000d40 <__aeabi_ui2f+0x80>)
 8000d0e:	4031      	ands	r1, r6
 8000d10:	076a      	lsls	r2, r5, #29
 8000d12:	d009      	beq.n	8000d28 <__aeabi_ui2f+0x68>
 8000d14:	200f      	movs	r0, #15
 8000d16:	4028      	ands	r0, r5
 8000d18:	2804      	cmp	r0, #4
 8000d1a:	d005      	beq.n	8000d28 <__aeabi_ui2f+0x68>
 8000d1c:	3104      	adds	r1, #4
 8000d1e:	014a      	lsls	r2, r1, #5
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_ui2f+0x68>
 8000d22:	239f      	movs	r3, #159	; 0x9f
 8000d24:	4031      	ands	r1, r6
 8000d26:	1b1b      	subs	r3, r3, r4
 8000d28:	0189      	lsls	r1, r1, #6
 8000d2a:	0a4d      	lsrs	r5, r1, #9
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e7db      	b.n	8000ce8 <__aeabi_ui2f+0x28>
 8000d30:	1f62      	subs	r2, r4, #5
 8000d32:	4095      	lsls	r5, r2
 8000d34:	0029      	movs	r1, r5
 8000d36:	4e02      	ldr	r6, [pc, #8]	; (8000d40 <__aeabi_ui2f+0x80>)
 8000d38:	4031      	ands	r1, r6
 8000d3a:	076a      	lsls	r2, r5, #29
 8000d3c:	d0f4      	beq.n	8000d28 <__aeabi_ui2f+0x68>
 8000d3e:	e7e9      	b.n	8000d14 <__aeabi_ui2f+0x54>
 8000d40:	fbffffff 	.word	0xfbffffff

08000d44 <__aeabi_cfrcmple>:
 8000d44:	4684      	mov	ip, r0
 8000d46:	0008      	movs	r0, r1
 8000d48:	4661      	mov	r1, ip
 8000d4a:	e7ff      	b.n	8000d4c <__aeabi_cfcmpeq>

08000d4c <__aeabi_cfcmpeq>:
 8000d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d4e:	f000 f8c9 	bl	8000ee4 <__lesf2>
 8000d52:	2800      	cmp	r0, #0
 8000d54:	d401      	bmi.n	8000d5a <__aeabi_cfcmpeq+0xe>
 8000d56:	2100      	movs	r1, #0
 8000d58:	42c8      	cmn	r0, r1
 8000d5a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d5c <__aeabi_fcmpeq>:
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	f000 f855 	bl	8000e0c <__eqsf2>
 8000d62:	4240      	negs	r0, r0
 8000d64:	3001      	adds	r0, #1
 8000d66:	bd10      	pop	{r4, pc}

08000d68 <__aeabi_fcmplt>:
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	f000 f8bb 	bl	8000ee4 <__lesf2>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	db01      	blt.n	8000d76 <__aeabi_fcmplt+0xe>
 8000d72:	2000      	movs	r0, #0
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	2001      	movs	r0, #1
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)

08000d7c <__aeabi_fcmple>:
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	f000 f8b1 	bl	8000ee4 <__lesf2>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	dd01      	ble.n	8000d8a <__aeabi_fcmple+0xe>
 8000d86:	2000      	movs	r0, #0
 8000d88:	bd10      	pop	{r4, pc}
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	bd10      	pop	{r4, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)

08000d90 <__aeabi_fcmpgt>:
 8000d90:	b510      	push	{r4, lr}
 8000d92:	f000 f861 	bl	8000e58 <__gesf2>
 8000d96:	2800      	cmp	r0, #0
 8000d98:	dc01      	bgt.n	8000d9e <__aeabi_fcmpgt+0xe>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	bd10      	pop	{r4, pc}
 8000d9e:	2001      	movs	r0, #1
 8000da0:	bd10      	pop	{r4, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)

08000da4 <__aeabi_fcmpge>:
 8000da4:	b510      	push	{r4, lr}
 8000da6:	f000 f857 	bl	8000e58 <__gesf2>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	da01      	bge.n	8000db2 <__aeabi_fcmpge+0xe>
 8000dae:	2000      	movs	r0, #0
 8000db0:	bd10      	pop	{r4, pc}
 8000db2:	2001      	movs	r0, #1
 8000db4:	bd10      	pop	{r4, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)

08000db8 <__clzsi2>:
 8000db8:	211c      	movs	r1, #28
 8000dba:	2301      	movs	r3, #1
 8000dbc:	041b      	lsls	r3, r3, #16
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d301      	bcc.n	8000dc6 <__clzsi2+0xe>
 8000dc2:	0c00      	lsrs	r0, r0, #16
 8000dc4:	3910      	subs	r1, #16
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	4298      	cmp	r0, r3
 8000dca:	d301      	bcc.n	8000dd0 <__clzsi2+0x18>
 8000dcc:	0a00      	lsrs	r0, r0, #8
 8000dce:	3908      	subs	r1, #8
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	4298      	cmp	r0, r3
 8000dd4:	d301      	bcc.n	8000dda <__clzsi2+0x22>
 8000dd6:	0900      	lsrs	r0, r0, #4
 8000dd8:	3904      	subs	r1, #4
 8000dda:	a202      	add	r2, pc, #8	; (adr r2, 8000de4 <__clzsi2+0x2c>)
 8000ddc:	5c10      	ldrb	r0, [r2, r0]
 8000dde:	1840      	adds	r0, r0, r1
 8000de0:	4770      	bx	lr
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	02020304 	.word	0x02020304
 8000de8:	01010101 	.word	0x01010101
	...

08000df4 <__clzdi2>:
 8000df4:	b510      	push	{r4, lr}
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d103      	bne.n	8000e02 <__clzdi2+0xe>
 8000dfa:	f7ff ffdd 	bl	8000db8 <__clzsi2>
 8000dfe:	3020      	adds	r0, #32
 8000e00:	e002      	b.n	8000e08 <__clzdi2+0x14>
 8000e02:	0008      	movs	r0, r1
 8000e04:	f7ff ffd8 	bl	8000db8 <__clzsi2>
 8000e08:	bd10      	pop	{r4, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)

08000e0c <__eqsf2>:
 8000e0c:	b570      	push	{r4, r5, r6, lr}
 8000e0e:	0042      	lsls	r2, r0, #1
 8000e10:	0245      	lsls	r5, r0, #9
 8000e12:	024e      	lsls	r6, r1, #9
 8000e14:	004c      	lsls	r4, r1, #1
 8000e16:	0fc3      	lsrs	r3, r0, #31
 8000e18:	0a6d      	lsrs	r5, r5, #9
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	0e12      	lsrs	r2, r2, #24
 8000e1e:	0a76      	lsrs	r6, r6, #9
 8000e20:	0e24      	lsrs	r4, r4, #24
 8000e22:	0fc9      	lsrs	r1, r1, #31
 8000e24:	2aff      	cmp	r2, #255	; 0xff
 8000e26:	d006      	beq.n	8000e36 <__eqsf2+0x2a>
 8000e28:	2cff      	cmp	r4, #255	; 0xff
 8000e2a:	d003      	beq.n	8000e34 <__eqsf2+0x28>
 8000e2c:	42a2      	cmp	r2, r4
 8000e2e:	d101      	bne.n	8000e34 <__eqsf2+0x28>
 8000e30:	42b5      	cmp	r5, r6
 8000e32:	d006      	beq.n	8000e42 <__eqsf2+0x36>
 8000e34:	bd70      	pop	{r4, r5, r6, pc}
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d1fc      	bne.n	8000e34 <__eqsf2+0x28>
 8000e3a:	2cff      	cmp	r4, #255	; 0xff
 8000e3c:	d1fa      	bne.n	8000e34 <__eqsf2+0x28>
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d1f8      	bne.n	8000e34 <__eqsf2+0x28>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d006      	beq.n	8000e54 <__eqsf2+0x48>
 8000e46:	2001      	movs	r0, #1
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d1f3      	bne.n	8000e34 <__eqsf2+0x28>
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	1e43      	subs	r3, r0, #1
 8000e50:	4198      	sbcs	r0, r3
 8000e52:	e7ef      	b.n	8000e34 <__eqsf2+0x28>
 8000e54:	2000      	movs	r0, #0
 8000e56:	e7ed      	b.n	8000e34 <__eqsf2+0x28>

08000e58 <__gesf2>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	0042      	lsls	r2, r0, #1
 8000e5c:	0245      	lsls	r5, r0, #9
 8000e5e:	024e      	lsls	r6, r1, #9
 8000e60:	004c      	lsls	r4, r1, #1
 8000e62:	0fc3      	lsrs	r3, r0, #31
 8000e64:	0a6d      	lsrs	r5, r5, #9
 8000e66:	0e12      	lsrs	r2, r2, #24
 8000e68:	0a76      	lsrs	r6, r6, #9
 8000e6a:	0e24      	lsrs	r4, r4, #24
 8000e6c:	0fc8      	lsrs	r0, r1, #31
 8000e6e:	2aff      	cmp	r2, #255	; 0xff
 8000e70:	d01b      	beq.n	8000eaa <__gesf2+0x52>
 8000e72:	2cff      	cmp	r4, #255	; 0xff
 8000e74:	d00e      	beq.n	8000e94 <__gesf2+0x3c>
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	d11b      	bne.n	8000eb2 <__gesf2+0x5a>
 8000e7a:	2c00      	cmp	r4, #0
 8000e7c:	d101      	bne.n	8000e82 <__gesf2+0x2a>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d01c      	beq.n	8000ebc <__gesf2+0x64>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d00c      	beq.n	8000ea0 <__gesf2+0x48>
 8000e86:	4283      	cmp	r3, r0
 8000e88:	d01c      	beq.n	8000ec4 <__gesf2+0x6c>
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	1e58      	subs	r0, r3, #1
 8000e8e:	4008      	ands	r0, r1
 8000e90:	3801      	subs	r0, #1
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d122      	bne.n	8000ede <__gesf2+0x86>
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	d1f4      	bne.n	8000e86 <__gesf2+0x2e>
 8000e9c:	2d00      	cmp	r5, #0
 8000e9e:	d1f2      	bne.n	8000e86 <__gesf2+0x2e>
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d1f6      	bne.n	8000e92 <__gesf2+0x3a>
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	e7f3      	b.n	8000e92 <__gesf2+0x3a>
 8000eaa:	2d00      	cmp	r5, #0
 8000eac:	d117      	bne.n	8000ede <__gesf2+0x86>
 8000eae:	2cff      	cmp	r4, #255	; 0xff
 8000eb0:	d0f0      	beq.n	8000e94 <__gesf2+0x3c>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d1e7      	bne.n	8000e86 <__gesf2+0x2e>
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d1e5      	bne.n	8000e86 <__gesf2+0x2e>
 8000eba:	e7e6      	b.n	8000e8a <__gesf2+0x32>
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0e7      	beq.n	8000e92 <__gesf2+0x3a>
 8000ec2:	e7e2      	b.n	8000e8a <__gesf2+0x32>
 8000ec4:	42a2      	cmp	r2, r4
 8000ec6:	dc05      	bgt.n	8000ed4 <__gesf2+0x7c>
 8000ec8:	dbea      	blt.n	8000ea0 <__gesf2+0x48>
 8000eca:	42b5      	cmp	r5, r6
 8000ecc:	d802      	bhi.n	8000ed4 <__gesf2+0x7c>
 8000ece:	d3e7      	bcc.n	8000ea0 <__gesf2+0x48>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e7de      	b.n	8000e92 <__gesf2+0x3a>
 8000ed4:	4243      	negs	r3, r0
 8000ed6:	4158      	adcs	r0, r3
 8000ed8:	0040      	lsls	r0, r0, #1
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7d9      	b.n	8000e92 <__gesf2+0x3a>
 8000ede:	2002      	movs	r0, #2
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	e7d6      	b.n	8000e92 <__gesf2+0x3a>

08000ee4 <__lesf2>:
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	0042      	lsls	r2, r0, #1
 8000ee8:	0245      	lsls	r5, r0, #9
 8000eea:	024e      	lsls	r6, r1, #9
 8000eec:	004c      	lsls	r4, r1, #1
 8000eee:	0fc3      	lsrs	r3, r0, #31
 8000ef0:	0a6d      	lsrs	r5, r5, #9
 8000ef2:	0e12      	lsrs	r2, r2, #24
 8000ef4:	0a76      	lsrs	r6, r6, #9
 8000ef6:	0e24      	lsrs	r4, r4, #24
 8000ef8:	0fc8      	lsrs	r0, r1, #31
 8000efa:	2aff      	cmp	r2, #255	; 0xff
 8000efc:	d00b      	beq.n	8000f16 <__lesf2+0x32>
 8000efe:	2cff      	cmp	r4, #255	; 0xff
 8000f00:	d00d      	beq.n	8000f1e <__lesf2+0x3a>
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	d11f      	bne.n	8000f46 <__lesf2+0x62>
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d116      	bne.n	8000f38 <__lesf2+0x54>
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d114      	bne.n	8000f38 <__lesf2+0x54>
 8000f0e:	2000      	movs	r0, #0
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	d010      	beq.n	8000f36 <__lesf2+0x52>
 8000f14:	e009      	b.n	8000f2a <__lesf2+0x46>
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d10c      	bne.n	8000f34 <__lesf2+0x50>
 8000f1a:	2cff      	cmp	r4, #255	; 0xff
 8000f1c:	d113      	bne.n	8000f46 <__lesf2+0x62>
 8000f1e:	2e00      	cmp	r6, #0
 8000f20:	d108      	bne.n	8000f34 <__lesf2+0x50>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d008      	beq.n	8000f38 <__lesf2+0x54>
 8000f26:	4283      	cmp	r3, r0
 8000f28:	d012      	beq.n	8000f50 <__lesf2+0x6c>
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	1e58      	subs	r0, r3, #1
 8000f2e:	4008      	ands	r0, r1
 8000f30:	3801      	subs	r0, #1
 8000f32:	e000      	b.n	8000f36 <__lesf2+0x52>
 8000f34:	2002      	movs	r0, #2
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d1f4      	bne.n	8000f26 <__lesf2+0x42>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	d1fa      	bne.n	8000f36 <__lesf2+0x52>
 8000f40:	2001      	movs	r0, #1
 8000f42:	4240      	negs	r0, r0
 8000f44:	e7f7      	b.n	8000f36 <__lesf2+0x52>
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	d1ed      	bne.n	8000f26 <__lesf2+0x42>
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	d1eb      	bne.n	8000f26 <__lesf2+0x42>
 8000f4e:	e7ec      	b.n	8000f2a <__lesf2+0x46>
 8000f50:	42a2      	cmp	r2, r4
 8000f52:	dc05      	bgt.n	8000f60 <__lesf2+0x7c>
 8000f54:	dbf2      	blt.n	8000f3c <__lesf2+0x58>
 8000f56:	42b5      	cmp	r5, r6
 8000f58:	d802      	bhi.n	8000f60 <__lesf2+0x7c>
 8000f5a:	d3ef      	bcc.n	8000f3c <__lesf2+0x58>
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	e7ea      	b.n	8000f36 <__lesf2+0x52>
 8000f60:	4243      	negs	r3, r0
 8000f62:	4158      	adcs	r0, r3
 8000f64:	0040      	lsls	r0, r0, #1
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e5      	b.n	8000f36 <__lesf2+0x52>
 8000f6a:	46c0      	nop			; (mov r8, r8)

08000f6c <setfreq>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t setfreq(float freq, float fPFD, uint8_t prescaler)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	701a      	strb	r2, [r3, #0]
	float latch = freq / fPFD;
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff fa93 	bl	80004a8 <__aeabi_fdiv>
 8000f82:	1c03      	adds	r3, r0, #0
 8000f84:	61fb      	str	r3, [r7, #28]
	uint32_t Nint = latch;
 8000f86:	69f8      	ldr	r0, [r7, #28]
 8000f88:	f7ff f9aa 	bl	80002e0 <__aeabi_f2uiz>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	61bb      	str	r3, [r7, #24]
	latch = latch - Nint;
 8000f90:	69b8      	ldr	r0, [r7, #24]
 8000f92:	f7ff fe95 	bl	8000cc0 <__aeabi_ui2f>
 8000f96:	1c03      	adds	r3, r0, #0
 8000f98:	1c19      	adds	r1, r3, #0
 8000f9a:	69f8      	ldr	r0, [r7, #28]
 8000f9c:	f7ff fcc2 	bl	8000924 <__aeabi_fsub>
 8000fa0:	1c03      	adds	r3, r0, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
	uint32_t Nfrac = latch * 4096;
 8000fa4:	218b      	movs	r1, #139	; 0x8b
 8000fa6:	05c9      	lsls	r1, r1, #23
 8000fa8:	69f8      	ldr	r0, [r7, #28]
 8000faa:	f7ff fb95 	bl	80006d8 <__aeabi_fmul>
 8000fae:	1c03      	adds	r3, r0, #0
 8000fb0:	1c18      	adds	r0, r3, #0
 8000fb2:	f7ff f995 	bl	80002e0 <__aeabi_f2uiz>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	617b      	str	r3, [r7, #20]
	uint32_t ret = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
	ret = ret | prescaler << 22;
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	059b      	lsls	r3, r3, #22
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
	ret = ret | Nint << 14;
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	039b      	lsls	r3, r3, #14
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
	ret = ret | Nfrac << 2;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
	ret = ret | 0b00000001;
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
	return ret;
 8000fe8:	693b      	ldr	r3, [r7, #16]
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b008      	add	sp, #32
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <myspi>:

void myspi(uint32_t datain)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	uint32_t data = datain;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	617b      	str	r3, [r7, #20]
	uint32_t delay = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, GPIO_PIN_RESET);
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	482f      	ldr	r0, [pc, #188]	; (80010c8 <myspi+0xd4>)
 800100a:	2200      	movs	r2, #0
 800100c:	0019      	movs	r1, r3
 800100e:	f001 f9e9 	bl	80023e4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	482c      	ldr	r0, [pc, #176]	; (80010c8 <myspi+0xd4>)
 8001018:	2200      	movs	r2, #0
 800101a:	0019      	movs	r1, r3
 800101c:	f001 f9e2 	bl	80023e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <myspi+0xd4>)
 8001022:	2200      	movs	r2, #0
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0018      	movs	r0, r3
 8001028:	f001 f9dc 	bl	80023e4 <HAL_GPIO_WritePin>
	//HAL_Delay(delay);
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <myspi+0xd8>)
 800102e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <myspi+0xd8>)
 8001032:	2101      	movs	r1, #1
 8001034:	430a      	orrs	r2, r1
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <myspi+0xd8>)
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	2201      	movs	r2, #1
 800103e:	4013      	ands	r3, r2
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
	for (int i = 0; i < 32; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	e023      	b.n	8001092 <myspi+0x9e>
		HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <myspi+0xd4>)
 800104c:	2200      	movs	r2, #0
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	0018      	movs	r0, r3
 8001052:	f001 f9c7 	bl	80023e4 <HAL_GPIO_WritePin>
		if (data & 0b10000000000000000000000000000000)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	da07      	bge.n	800106c <myspi+0x78>
		{
			HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <myspi+0xd4>)
 8001062:	2201      	movs	r2, #1
 8001064:	0019      	movs	r1, r3
 8001066:	f001 f9bd 	bl	80023e4 <HAL_GPIO_WritePin>
 800106a:	e006      	b.n	800107a <myspi+0x86>
		} else {
			HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4815      	ldr	r0, [pc, #84]	; (80010c8 <myspi+0xd4>)
 8001072:	2200      	movs	r2, #0
 8001074:	0019      	movs	r1, r3
 8001076:	f001 f9b5 	bl	80023e4 <HAL_GPIO_WritePin>
		}
	//	HAL_Delay(delay);
		HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <myspi+0xd4>)
 800107c:	2201      	movs	r2, #1
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	0018      	movs	r0, r3
 8001082:	f001 f9af 	bl	80023e4 <HAL_GPIO_WritePin>
		data = data << 1;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 32; i++) {
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	3301      	adds	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2b1f      	cmp	r3, #31
 8001096:	ddd8      	ble.n	800104a <myspi+0x56>
	}
	HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, GPIO_PIN_SET);
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <myspi+0xd4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	0019      	movs	r1, r3
 80010a2:	f001 f99f 	bl	80023e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, GPIO_PIN_RESET);
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <myspi+0xd4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	0019      	movs	r1, r3
 80010b0:	f001 f998 	bl	80023e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <myspi+0xd4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 f992 	bl	80023e4 <HAL_GPIO_WritePin>

}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b006      	add	sp, #24
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	50000800 	.word	0x50000800
 80010cc:	40021000 	.word	0x40021000

080010d0 <TIM22_test>:

void TIM22_test(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	//for (int a=1; a<20; a++){
		htim22.Instance->CNT = 0;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <TIM22_test+0x70>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24

		//int delai=100;
		HAL_GPIO_WritePin(TXDATA_GPIO_Port, TXDATA_Pin, GPIO_PIN_SET);
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	019b      	lsls	r3, r3, #6
 80010e0:	4818      	ldr	r0, [pc, #96]	; (8001144 <TIM22_test+0x74>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	0019      	movs	r1, r3
 80010e6:	f001 f97d 	bl	80023e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	01db      	lsls	r3, r3, #7
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <TIM22_test+0x78>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	0019      	movs	r1, r3
 80010f4:	f001 f976 	bl	80023e4 <HAL_GPIO_WritePin>

		//printf(htim22.Instance->CNT);

		sprintf(UartBuffOut, ".");
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <TIM22_test+0x7c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <TIM22_test+0x80>)
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f003 fa8e 	bl	8004620 <siprintf>
		HAL_UART_Transmit(&huart1, UartBuffOut, strlen(UartBuffOut), 1000);
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <TIM22_test+0x80>)
 8001106:	0018      	movs	r0, r3
 8001108:	f7fe fffe 	bl	8000108 <strlen>
 800110c:	0003      	movs	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	23fa      	movs	r3, #250	; 0xfa
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <TIM22_test+0x80>)
 8001116:	480f      	ldr	r0, [pc, #60]	; (8001154 <TIM22_test+0x84>)
 8001118:	f002 fd02 	bl	8003b20 <HAL_UART_Transmit>

		//printf("test");
		//sprintf("test2");
		HAL_GPIO_WritePin(TXDATA_GPIO_Port, TXDATA_Pin, GPIO_PIN_RESET);
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	019b      	lsls	r3, r3, #6
 8001120:	4808      	ldr	r0, [pc, #32]	; (8001144 <TIM22_test+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	0019      	movs	r1, r3
 8001126:	f001 f95d 	bl	80023e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	01db      	lsls	r3, r3, #7
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <TIM22_test+0x78>)
 8001130:	2200      	movs	r2, #0
 8001132:	0019      	movs	r1, r3
 8001134:	f001 f956 	bl	80023e4 <HAL_GPIO_WritePin>

	//}

}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	200001a8 	.word	0x200001a8
 8001144:	50000400 	.word	0x50000400
 8001148:	50000800 	.word	0x50000800
 800114c:	08004f0c 	.word	0x08004f0c
 8001150:	2000008c 	.word	0x2000008c
 8001154:	200001e8 	.word	0x200001e8

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f000 fc40 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f85c 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f000 f9fe 	bl	8001564 <MX_GPIO_Init>
  MX_ADC_Init();
 8001168:	f000 f8d2 	bl	8001310 <MX_ADC_Init>
  MX_TIM22_Init();
 800116c:	f000 f972 	bl	8001454 <MX_TIM22_Init>
  MX_TIM6_Init();
 8001170:	f000 f934 	bl	80013dc <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001174:	f000 f9c6 	bl	8001504 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Main_Supply_GPIO_Port, Main_Supply_Pin, GPIO_PIN_SET);
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	0159      	lsls	r1, r3, #5
 800117c:	23a0      	movs	r3, #160	; 0xa0
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	2201      	movs	r2, #1
 8001182:	0018      	movs	r0, r3
 8001184:	f001 f92e 	bl	80023e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_Supply_GPIO_Port, GPS_Supply_Pin, GPIO_PIN_SET);
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	01db      	lsls	r3, r3, #7
 800118c:	481b      	ldr	r0, [pc, #108]	; (80011fc <main+0xa4>)
 800118e:	2201      	movs	r2, #1
 8001190:	0019      	movs	r1, r3
 8001192:	f001 f927 	bl	80023e4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001196:	2064      	movs	r0, #100	; 0x64
 8001198:	f000 fc92 	bl	8001ac0 <HAL_Delay>

  //403,5 MHz
  myspi(0x03c4204c);/* Reg 0 R Register
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <main+0xa8>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff ff28 	bl	8000ff4 <myspi>
  XOEB = 1 (XTAL Osc Off)
  Crystal doubler OFF
  4bit R div = 0b001 = 1
  11Bit Freq err corr 0b10011
  */
  myspi(0x000c9c01);/*
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <main+0xac>)
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff ff24 	bl	8000ff4 <myspi>
  Prescaler = 0b0 = 4/5
  8Bits integer N = 0b110010
  12bits factional N = 0b011100000000

  */
  myspi(0x00005fe2);/*
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <main+0xb0>)
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff ff20 	bl	8000ff4 <myspi>
  Modulation deviation ????
  Power ampli 0b111111
  GOOK 0 = Gaussian OOK = Off
  Mod control 0b00 FSK
  */
  myspi(0x007418af);/*
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <main+0xb4>)
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff ff1c 	bl	8000ff4 <myspi>
  clkout enable = 0b0 = Off
  PA Enable = 0b1 PA on
  PLL Enable = 0b1 PLL On
  */

  myspi(0x03c4204c);
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <main+0xa8>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff ff18 	bl	8000ff4 <myspi>
  myspi(setfreq(446150000, 8000000, 0));
 80011c4:	4912      	ldr	r1, [pc, #72]	; (8001210 <main+0xb8>)
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <main+0xbc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	1c18      	adds	r0, r3, #0
 80011cc:	f7ff fece 	bl	8000f6c <setfreq>
 80011d0:	0003      	movs	r3, r0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff ff0e 	bl	8000ff4 <myspi>
  myspi(0x00005fe2);
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <main+0xb0>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f7ff ff0a 	bl	8000ff4 <myspi>
  myspi(0x007418af);
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <main+0xb4>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ff06 	bl	8000ff4 <myspi>

  if (HAL_TIM_Base_Start_IT(&htim22) != HAL_OK)
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <main+0xc0>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f002 f8ce 	bl	800338c <HAL_TIM_Base_Start_IT>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <main+0xa0>
   {
     /* Starting Error */
     Error_Handler();
 80011f4:	f000 fa8a 	bl	800170c <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <main+0xa0>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	50000400 	.word	0x50000400
 8001200:	03c4204c 	.word	0x03c4204c
 8001204:	000c9c01 	.word	0x000c9c01
 8001208:	00005fe2 	.word	0x00005fe2
 800120c:	007418af 	.word	0x007418af
 8001210:	4af42400 	.word	0x4af42400
 8001214:	4dd4bdac 	.word	0x4dd4bdac
 8001218:	200001a8 	.word	0x200001a8

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b09b      	sub	sp, #108	; 0x6c
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	2434      	movs	r4, #52	; 0x34
 8001224:	193b      	adds	r3, r7, r4
 8001226:	0018      	movs	r0, r3
 8001228:	2334      	movs	r3, #52	; 0x34
 800122a:	001a      	movs	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f003 f9ef 	bl	8004610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001232:	2320      	movs	r3, #32
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	0018      	movs	r0, r3
 8001238:	2314      	movs	r3, #20
 800123a:	001a      	movs	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	f003 f9e7 	bl	8004610 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	0018      	movs	r0, r3
 8001246:	231c      	movs	r3, #28
 8001248:	001a      	movs	r2, r3
 800124a:	2100      	movs	r1, #0
 800124c:	f003 f9e0 	bl	8004610 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <SystemClock_Config+0xec>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a2d      	ldr	r2, [pc, #180]	; (800130c <SystemClock_Config+0xf0>)
 8001256:	401a      	ands	r2, r3
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <SystemClock_Config+0xec>)
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	0109      	lsls	r1, r1, #4
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001262:	0021      	movs	r1, r4
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	0252      	lsls	r2, r2, #9
 8001270:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2202      	movs	r2, #2
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0252      	lsls	r2, r2, #9
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2200      	movs	r2, #0
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	0412      	lsls	r2, r2, #16
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	187b      	adds	r3, r7, r1
 8001290:	0018      	movs	r0, r3
 8001292:	f001 f8c5 	bl	8002420 <HAL_RCC_OscConfig>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800129a:	f000 fa37 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	2120      	movs	r1, #32
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	220f      	movs	r2, #15
 80012a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2203      	movs	r2, #3
 80012aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2100      	movs	r1, #0
 80012c2:	0018      	movs	r0, r3
 80012c4:	f001 fc16 	bl	8002af4 <HAL_RCC_ClockConfig>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012cc:	f000 fa1e 	bl	800170c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 feda 	bl	8003098 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80012e8:	f000 fa10 	bl	800170c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	045b      	lsls	r3, r3, #17
 80012f0:	2200      	movs	r2, #0
 80012f2:	0019      	movs	r1, r3
 80012f4:	2000      	movs	r0, #0
 80012f6:	f001 fd45 	bl	8002d84 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80012fa:	f001 fdc7 	bl	8002e8c <HAL_RCC_EnableCSS>
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b01b      	add	sp, #108	; 0x6c
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	40007000 	.word	0x40007000
 800130c:	ffffe7ff 	.word	0xffffe7ff

08001310 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	003b      	movs	r3, r7
 8001318:	0018      	movs	r0, r3
 800131a:	2308      	movs	r3, #8
 800131c:	001a      	movs	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	f003 f976 	bl	8004610 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001326:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <MX_ADC_Init+0xc4>)
 8001328:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_ADC_Init+0xc0>)
 800132c:	2200      	movs	r2, #0
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001332:	22c0      	movs	r2, #192	; 0xc0
 8001334:	0612      	lsls	r2, r2, #24
 8001336:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MX_ADC_Init+0xc0>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001340:	2200      	movs	r2, #0
 8001342:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001346:	2201      	movs	r2, #1
 8001348:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_ADC_Init+0xc0>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001352:	2220      	movs	r2, #32
 8001354:	2100      	movs	r1, #0
 8001356:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_ADC_Init+0xc0>)
 800135a:	2221      	movs	r2, #33	; 0x21
 800135c:	2100      	movs	r1, #0
 800135e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001368:	22c2      	movs	r2, #194	; 0xc2
 800136a:	32ff      	adds	r2, #255	; 0xff
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001370:	222c      	movs	r2, #44	; 0x2c
 8001372:	2100      	movs	r1, #0
 8001374:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001378:	2204      	movs	r2, #4
 800137a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_ADC_Init+0xc0>)
 800137e:	2200      	movs	r2, #0
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_ADC_Init+0xc0>)
 800138a:	2200      	movs	r2, #0
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_ADC_Init+0xc0>)
 8001396:	0018      	movs	r0, r3
 8001398:	f000 fbb6 	bl	8001b08 <HAL_ADC_Init>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80013a0:	f000 f9b4 	bl	800170c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013a4:	003b      	movs	r3, r7
 80013a6:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <MX_ADC_Init+0xc8>)
 80013a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80013aa:	003b      	movs	r3, r7
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	0152      	lsls	r2, r2, #5
 80013b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013b2:	003a      	movs	r2, r7
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_ADC_Init+0xc0>)
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f000 fd19 	bl	8001df0 <HAL_ADC_ConfigChannel>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80013c2:	f000 f9a3 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	2000010c 	.word	0x2000010c
 80013d4:	40012400 	.word	0x40012400
 80013d8:	08000004 	.word	0x08000004

080013dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e2:	003b      	movs	r3, r7
 80013e4:	0018      	movs	r0, r3
 80013e6:	2308      	movs	r3, #8
 80013e8:	001a      	movs	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	f003 f910 	bl	8004610 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_TIM6_Init+0x6c>)
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <MX_TIM6_Init+0x70>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_TIM6_Init+0x6c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_TIM6_Init+0x6c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_TIM6_Init+0x6c>)
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_TIM6_Init+0x74>)
 8001406:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_TIM6_Init+0x6c>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_TIM6_Init+0x6c>)
 8001410:	0018      	movs	r0, r3
 8001412:	f001 ff7b 	bl	800330c <HAL_TIM_Base_Init>
 8001416:	1e03      	subs	r3, r0, #0
 8001418:	d001      	beq.n	800141e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800141a:	f000 f977 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	003b      	movs	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	003b      	movs	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800142a:	003a      	movs	r2, r7
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_TIM6_Init+0x6c>)
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f002 fac9 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800143a:	f000 f967 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000168 	.word	0x20000168
 800144c:	40001000 	.word	0x40001000
 8001450:	0000ffff 	.word	0x0000ffff

08001454 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	2308      	movs	r3, #8
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	0018      	movs	r0, r3
 8001460:	2310      	movs	r3, #16
 8001462:	001a      	movs	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	f003 f8d3 	bl	8004610 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146a:	003b      	movs	r3, r7
 800146c:	0018      	movs	r0, r3
 800146e:	2308      	movs	r3, #8
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f003 f8cc 	bl	8004610 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_TIM22_Init+0xa0>)
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <MX_TIM22_Init+0xa4>)
 800147c:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 799;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_TIM22_Init+0xa0>)
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <MX_TIM22_Init+0xa8>)
 8001482:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_TIM22_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 10000;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM22_Init+0xa0>)
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <MX_TIM22_Init+0xac>)
 800148e:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM22_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_TIM22_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM22_Init+0xa0>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f001 ff34 	bl	800330c <HAL_TIM_Base_Init>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 80014a8:	f000 f930 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ac:	2108      	movs	r1, #8
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	0152      	lsls	r2, r2, #5
 80014b4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80014b6:	187a      	adds	r2, r7, r1
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_TIM22_Init+0xa0>)
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f002 f899 	bl	80035f4 <HAL_TIM_ConfigClockSource>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 80014c6:	f000 f921 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ca:	003b      	movs	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	003b      	movs	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80014d6:	003a      	movs	r2, r7
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_TIM22_Init+0xa0>)
 80014da:	0011      	movs	r1, r2
 80014dc:	0018      	movs	r0, r3
 80014de:	f002 fa73 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 80014e6:	f000 f911 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b006      	add	sp, #24
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	200001a8 	.word	0x200001a8
 80014f8:	40011400 	.word	0x40011400
 80014fc:	0000031f 	.word	0x0000031f
 8001500:	00002710 	.word	0x00002710

08001504 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_USART1_UART_Init+0x58>)
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <MX_USART1_UART_Init+0x5c>)
 800150c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_USART1_UART_Init+0x58>)
 8001510:	22e1      	movs	r2, #225	; 0xe1
 8001512:	0252      	lsls	r2, r2, #9
 8001514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART1_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_USART1_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART1_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART1_UART_Init+0x58>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART1_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART1_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART1_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART1_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <MX_USART1_UART_Init+0x58>)
 8001548:	0018      	movs	r0, r3
 800154a:	f002 fa95 	bl	8003a78 <HAL_UART_Init>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001552:	f000 f8db 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200001e8 	.word	0x200001e8
 8001560:	40013800 	.word	0x40013800

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b08b      	sub	sp, #44	; 0x2c
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	2414      	movs	r4, #20
 800156c:	193b      	adds	r3, r7, r4
 800156e:	0018      	movs	r0, r3
 8001570:	2314      	movs	r3, #20
 8001572:	001a      	movs	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	f003 f84b 	bl	8004610 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <MX_GPIO_Init+0x194>)
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <MX_GPIO_Init+0x194>)
 8001580:	2104      	movs	r1, #4
 8001582:	430a      	orrs	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	; 0x2c
 8001586:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <MX_GPIO_Init+0x194>)
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	2204      	movs	r2, #4
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001592:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <MX_GPIO_Init+0x194>)
 8001594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001596:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <MX_GPIO_Init+0x194>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <MX_GPIO_Init+0x194>)
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <MX_GPIO_Init+0x194>)
 80015ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <MX_GPIO_Init+0x194>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b6:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <MX_GPIO_Init+0x194>)
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	2201      	movs	r2, #1
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <MX_GPIO_Init+0x194>)
 80015c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <MX_GPIO_Init+0x194>)
 80015c8:	2102      	movs	r1, #2
 80015ca:	430a      	orrs	r2, r1
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ce:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <MX_GPIO_Init+0x194>)
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|CLK_Pin|DATA_Pin|LE_Pin, GPIO_PIN_RESET);
 80015da:	2387      	movs	r3, #135	; 0x87
 80015dc:	01db      	lsls	r3, r3, #7
 80015de:	4847      	ldr	r0, [pc, #284]	; (80016fc <MX_GPIO_Init+0x198>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	0019      	movs	r1, r3
 80015e4:	f000 fefe 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Pin4_Pin|Pin13____Pin|Main_Supply_Pin, GPIO_PIN_RESET);
 80015e8:	4945      	ldr	r1, [pc, #276]	; (8001700 <MX_GPIO_Init+0x19c>)
 80015ea:	23a0      	movs	r3, #160	; 0xa0
 80015ec:	05db      	lsls	r3, r3, #23
 80015ee:	2200      	movs	r2, #0
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 fef7 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin13_____Pin|Pin9_Pin|Pin7_Pin|Pin6_Pin
 80015f6:	4943      	ldr	r1, [pc, #268]	; (8001704 <MX_GPIO_Init+0x1a0>)
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <MX_GPIO_Init+0x1a4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 fef1 	bl	80023e4 <HAL_GPIO_WritePin>
                          |TXDATA_Pin|GPS_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	01d2      	lsls	r2, r2, #7
 8001608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2201      	movs	r2, #1
 800160e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	193b      	adds	r3, r7, r4
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	193b      	adds	r3, r7, r4
 8001618:	2203      	movs	r2, #3
 800161a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800161c:	193b      	adds	r3, r7, r4
 800161e:	4a37      	ldr	r2, [pc, #220]	; (80016fc <MX_GPIO_Init+0x198>)
 8001620:	0019      	movs	r1, r3
 8001622:	0010      	movs	r0, r2
 8001624:	f000 fd68 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin4_Pin Pin13____Pin Main_Supply_Pin */
  GPIO_InitStruct.Pin = Pin4_Pin|Pin13____Pin|Main_Supply_Pin;
 8001628:	193b      	adds	r3, r7, r4
 800162a:	4a35      	ldr	r2, [pc, #212]	; (8001700 <MX_GPIO_Init+0x19c>)
 800162c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	193b      	adds	r3, r7, r4
 8001630:	2201      	movs	r2, #1
 8001632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	193b      	adds	r3, r7, r4
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	193a      	adds	r2, r7, r4
 8001642:	23a0      	movs	r3, #160	; 0xa0
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	0011      	movs	r1, r2
 8001648:	0018      	movs	r0, r3
 800164a:	f000 fd55 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin13_____Pin Pin9_Pin Pin7_Pin Pin6_Pin
                           TXDATA_Pin GPS_Supply_Pin */
  GPIO_InitStruct.Pin = Pin13_____Pin|Pin9_Pin|Pin7_Pin|Pin6_Pin
 800164e:	193b      	adds	r3, r7, r4
 8001650:	4a2c      	ldr	r2, [pc, #176]	; (8001704 <MX_GPIO_Init+0x1a0>)
 8001652:	601a      	str	r2, [r3, #0]
                          |TXDATA_Pin|GPS_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	193b      	adds	r3, r7, r4
 8001656:	2201      	movs	r2, #1
 8001658:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	193b      	adds	r3, r7, r4
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	193b      	adds	r3, r7, r4
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	193b      	adds	r3, r7, r4
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <MX_GPIO_Init+0x1a4>)
 800166a:	0019      	movs	r1, r3
 800166c:	0010      	movs	r0, r2
 800166e:	f000 fd43 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin LE_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin|LE_Pin;
 8001672:	0021      	movs	r1, r4
 8001674:	187b      	adds	r3, r7, r1
 8001676:	22e0      	movs	r2, #224	; 0xe0
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	000c      	movs	r4, r1
 800167e:	193b      	adds	r3, r7, r4
 8001680:	2201      	movs	r2, #1
 8001682:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	193b      	adds	r3, r7, r4
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	193b      	adds	r3, r7, r4
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001690:	193b      	adds	r3, r7, r4
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <MX_GPIO_Init+0x198>)
 8001694:	0019      	movs	r1, r3
 8001696:	0010      	movs	r0, r2
 8001698:	f000 fd2e 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC2_Pin */
  GPIO_InitStruct.Pin = OSC2_Pin;
 800169c:	0021      	movs	r1, r4
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0052      	lsls	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	000c      	movs	r4, r1
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	2202      	movs	r2, #2
 80016ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	2203      	movs	r2, #3
 80016b8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80016ba:	193b      	adds	r3, r7, r4
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(OSC2_GPIO_Port, &GPIO_InitStruct);
 80016c0:	193a      	adds	r2, r7, r4
 80016c2:	23a0      	movs	r3, #160	; 0xa0
 80016c4:	05db      	lsls	r3, r3, #23
 80016c6:	0011      	movs	r1, r2
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 fd15 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_Data_Pin */
  GPIO_InitStruct.Pin = GPS_Data_Pin;
 80016ce:	0021      	movs	r1, r4
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPS_Data_GPIO_Port, &GPIO_InitStruct);
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <MX_GPIO_Init+0x198>)
 80016e8:	0019      	movs	r1, r3
 80016ea:	0010      	movs	r0, r2
 80016ec:	f000 fd04 	bl	80020f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b00b      	add	sp, #44	; 0x2c
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	50000800 	.word	0x50000800
 8001700:	00001009 	.word	0x00001009
 8001704:	00006c06 	.word	0x00006c06
 8001708:	50000400 	.word	0x50000400

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_MspInit+0x24>)
 800171e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_MspInit+0x24>)
 8001722:	2101      	movs	r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_MspInit+0x24>)
 800172a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_MspInit+0x24>)
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	0549      	lsls	r1, r1, #21
 8001732:	430a      	orrs	r2, r1
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	240c      	movs	r4, #12
 800174a:	193b      	adds	r3, r7, r4
 800174c:	0018      	movs	r0, r3
 800174e:	2314      	movs	r3, #20
 8001750:	001a      	movs	r2, r3
 8001752:	2100      	movs	r1, #0
 8001754:	f002 ff5c 	bl	8004610 <memset>
  if(hadc->Instance==ADC1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <HAL_ADC_MspInit+0x70>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d122      	bne.n	80017a8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_ADC_MspInit+0x74>)
 8001764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_ADC_MspInit+0x74>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0089      	lsls	r1, r1, #2
 800176c:	430a      	orrs	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_ADC_MspInit+0x74>)
 8001772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_ADC_MspInit+0x74>)
 8001776:	2101      	movs	r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_ADC_MspInit+0x74>)
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2201      	movs	r2, #1
 8001782:	4013      	ands	r3, r2
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	2204      	movs	r2, #4
 800178c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2203      	movs	r2, #3
 8001792:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	193b      	adds	r3, r7, r4
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	193a      	adds	r2, r7, r4
 800179c:	23a0      	movs	r3, #160	; 0xa0
 800179e:	05db      	lsls	r3, r3, #23
 80017a0:	0011      	movs	r1, r2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 fca8 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b009      	add	sp, #36	; 0x24
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	40012400 	.word	0x40012400
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_TIM_Base_MspInit+0x60>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10e      	bne.n	80017e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_TIM_Base_MspInit+0x64>)
 80017cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_TIM_Base_MspInit+0x64>)
 80017d0:	2110      	movs	r1, #16
 80017d2:	430a      	orrs	r2, r1
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2011      	movs	r0, #17
 80017dc:	f000 fc5a 	bl	8002094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017e0:	2011      	movs	r0, #17
 80017e2:	f000 fc6c 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80017e6:	e012      	b.n	800180e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM22)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <HAL_TIM_Base_MspInit+0x68>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10d      	bne.n	800180e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_TIM_Base_MspInit+0x64>)
 80017f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_TIM_Base_MspInit+0x64>)
 80017f8:	2120      	movs	r1, #32
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2016      	movs	r0, #22
 8001804:	f000 fc46 	bl	8002094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8001808:	2016      	movs	r0, #22
 800180a:	f000 fc58 	bl	80020be <HAL_NVIC_EnableIRQ>
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b002      	add	sp, #8
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	40001000 	.word	0x40001000
 800181c:	40021000 	.word	0x40021000
 8001820:	40011400 	.word	0x40011400

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	240c      	movs	r4, #12
 800182e:	193b      	adds	r3, r7, r4
 8001830:	0018      	movs	r0, r3
 8001832:	2314      	movs	r3, #20
 8001834:	001a      	movs	r2, r3
 8001836:	2100      	movs	r1, #0
 8001838:	f002 feea 	bl	8004610 <memset>
  if(huart->Instance==USART1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <HAL_UART_MspInit+0x80>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12a      	bne.n	800189c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_UART_MspInit+0x84>)
 8001848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_UART_MspInit+0x84>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	01c9      	lsls	r1, r1, #7
 8001850:	430a      	orrs	r2, r1
 8001852:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_UART_MspInit+0x84>)
 8001856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_UART_MspInit+0x84>)
 800185a:	2101      	movs	r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_UART_MspInit+0x84>)
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800186c:	193b      	adds	r3, r7, r4
 800186e:	22c0      	movs	r2, #192	; 0xc0
 8001870:	00d2      	lsls	r2, r2, #3
 8001872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	0021      	movs	r1, r4
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2202      	movs	r2, #2
 800187a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	187b      	adds	r3, r7, r1
 8001884:	2203      	movs	r2, #3
 8001886:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001888:	187b      	adds	r3, r7, r1
 800188a:	2204      	movs	r2, #4
 800188c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	187a      	adds	r2, r7, r1
 8001890:	23a0      	movs	r3, #160	; 0xa0
 8001892:	05db      	lsls	r3, r3, #23
 8001894:	0011      	movs	r1, r2
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fc2e 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b009      	add	sp, #36	; 0x24
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40021000 	.word	0x40021000

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80018b0:	f001 fbd6 	bl	8003060 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x8>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d4:	f000 f8d8 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <TIM6_IRQHandler+0x14>)
 80018e6:	0018      	movs	r0, r3
 80018e8:	f001 fd9c 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20000168 	.word	0x20000168

080018f8 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <TIM22_IRQHandler+0x18>)
 80018fe:	0018      	movs	r0, r3
 8001900:	f001 fd90 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  TIM22_test();
 8001904:	f7ff fbe4 	bl	80010d0 <TIM22_test>

  /* USER CODE END TIM22_IRQn 1 */
  https://github.com/joyel24/M20-sandbox.git}
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	200001a8 	.word	0x200001a8

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d207      	bcs.n	8001954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001944:	f002 fe3a 	bl	80045bc <__errno>
 8001948:	0003      	movs	r3, r0
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	2301      	movs	r3, #1
 8001950:	425b      	negs	r3, r3
 8001952:	e009      	b.n	8001968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	18d2      	adds	r2, r2, r3
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <_sbrk+0x64>)
 8001964:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b006      	add	sp, #24
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20002000 	.word	0x20002000
 8001974:	00000400 	.word	0x00000400
 8001978:	20000270 	.word	0x20000270
 800197c:	20000288 	.word	0x20000288

08001980 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800198e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001992:	490e      	ldr	r1, [pc, #56]	; (80019cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <LoopForever+0xe>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a8:	4c0b      	ldr	r4, [pc, #44]	; (80019d8 <LoopForever+0x16>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019b6:	f7ff ffe3 	bl	8001980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f002 fe05 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fbcb 	bl	8001158 <main>

080019c2 <LoopForever>:

LoopForever:
    b LoopForever
 80019c2:	e7fe      	b.n	80019c2 <LoopForever>
   ldr   r0, =_estack
 80019c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019d0:	08005080 	.word	0x08005080
  ldr r2, =_sbss
 80019d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019d8:	20000288 	.word	0x20000288

080019dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC1_COMP_IRQHandler>
	...

080019e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_Init+0x3c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_Init+0x3c>)
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f811 	bl	8001a20 <HAL_InitTick>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e001      	b.n	8001a0e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a0a:	f7ff fe85 	bl	8001718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_InitTick+0x5c>)
 8001a2a:	681c      	ldr	r4, [r3, #0]
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_InitTick+0x60>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	0019      	movs	r1, r3
 8001a32:	23fa      	movs	r3, #250	; 0xfa
 8001a34:	0098      	lsls	r0, r3, #2
 8001a36:	f7fe fb79 	bl	800012c <__udivsi3>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	0020      	movs	r0, r4
 8001a40:	f7fe fb74 	bl	800012c <__udivsi3>
 8001a44:	0003      	movs	r3, r0
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 fb49 	bl	80020de <HAL_SYSTICK_Config>
 8001a4c:	1e03      	subs	r3, r0, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e00f      	b.n	8001a74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d80b      	bhi.n	8001a72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	425b      	negs	r3, r3
 8001a60:	2200      	movs	r2, #0
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 fb16 	bl	8002094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_InitTick+0x64>)
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b003      	add	sp, #12
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x1c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	001a      	movs	r2, r3
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	18d2      	adds	r2, r2, r3
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000274 	.word	0x20000274

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <HAL_GetTick+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	20000274 	.word	0x20000274

08001ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff fff0 	bl	8001aac <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_Delay+0x44>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	001a      	movs	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	189b      	adds	r3, r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	f7ff ffe0 	bl	8001aac <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d8f7      	bhi.n	8001ae8 <HAL_Delay+0x28>
  {
  }
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b004      	add	sp, #16
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	20000008 	.word	0x20000008

08001b08 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e159      	b.n	8001dce <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10a      	bne.n	8001b38 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2250      	movs	r2, #80	; 0x50
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff fe04 	bl	8001740 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d005      	beq.n	8001b50 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b4e:	d00b      	beq.n	8001b68 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	2210      	movs	r2, #16
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2250      	movs	r2, #80	; 0x50
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e132      	b.n	8001dce <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	4a9a      	ldr	r2, [pc, #616]	; (8001dd8 <HAL_ADC_Init+0x2d0>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2202      	movs	r2, #2
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_ADC_Init+0x90>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_Init+0x90>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_ADC_Init+0x92>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d149      	bne.n	8001c32 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	23c0      	movs	r3, #192	; 0xc0
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_ADC_Init+0xba>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d005      	beq.n	8001bc2 <HAL_ADC_Init+0xba>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	061b      	lsls	r3, r3, #24
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d111      	bne.n	8001be6 <HAL_ADC_Init+0xde>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	0892      	lsrs	r2, r2, #2
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6919      	ldr	r1, [r3, #16]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	e014      	b.n	8001c10 <HAL_ADC_Init+0x108>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	0892      	lsrs	r2, r2, #2
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	4b79      	ldr	r3, [pc, #484]	; (8001ddc <HAL_ADC_Init+0x2d4>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <HAL_ADC_Init+0x2d4>)
 8001bfc:	4978      	ldr	r1, [pc, #480]	; (8001de0 <HAL_ADC_Init+0x2d8>)
 8001bfe:	400a      	ands	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	4b76      	ldr	r3, [pc, #472]	; (8001ddc <HAL_ADC_Init+0x2d4>)
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4b74      	ldr	r3, [pc, #464]	; (8001ddc <HAL_ADC_Init+0x2d4>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2118      	movs	r1, #24
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68d9      	ldr	r1, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_ADC_Init+0x2d4>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <HAL_ADC_Init+0x2d4>)
 8001c38:	496a      	ldr	r1, [pc, #424]	; (8001de4 <HAL_ADC_Init+0x2dc>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001c3e:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_ADC_Init+0x2d4>)
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c46:	065a      	lsls	r2, r3, #25
 8001c48:	4b64      	ldr	r3, [pc, #400]	; (8001ddc <HAL_ADC_Init+0x2d4>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	055b      	lsls	r3, r3, #21
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d108      	bne.n	8001c6e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	0549      	lsls	r1, r1, #21
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	495b      	ldr	r1, [pc, #364]	; (8001de8 <HAL_ADC_Init+0x2e0>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68d9      	ldr	r1, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_Init+0x18c>
 8001c90:	2304      	movs	r3, #4
 8001c92:	e000      	b.n	8001c96 <HAL_ADC_Init+0x18e>
 8001c94:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c96:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2020      	movs	r0, #32
 8001c9c:	5c1b      	ldrb	r3, [r3, r0]
 8001c9e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ca0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	202c      	movs	r0, #44	; 0x2c
 8001ca6:	5c1b      	ldrb	r3, [r3, r0]
 8001ca8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001caa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cb0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001cb8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001cc0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cce:	23c2      	movs	r3, #194	; 0xc2
 8001cd0:	33ff      	adds	r3, #255	; 0xff
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d00b      	beq.n	8001cee <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68d9      	ldr	r1, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2221      	movs	r2, #33	; 0x21
 8001cf2:	5c9b      	ldrb	r3, [r3, r2]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d11a      	bne.n	8001d2e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0249      	lsls	r1, r1, #9
 8001d10:	430a      	orrs	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	e00b      	b.n	8001d2e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	2201      	movs	r2, #1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d11f      	bne.n	8001d76 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	492a      	ldr	r1, [pc, #168]	; (8001dec <HAL_ADC_Init+0x2e4>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6919      	ldr	r1, [r3, #16]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d54:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001d5a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	430a      	orrs	r2, r1
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	e00e      	b.n	8001d94 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	438a      	bics	r2, r1
 8001d92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2107      	movs	r1, #7
 8001da0:	438a      	bics	r2, r1
 8001da2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6959      	ldr	r1, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	fffffefd 	.word	0xfffffefd
 8001ddc:	40012708 	.word	0x40012708
 8001de0:	ffc3ffff 	.word	0xffc3ffff
 8001de4:	fdffffff 	.word	0xfdffffff
 8001de8:	fffe0219 	.word	0xfffe0219
 8001dec:	fffffc03 	.word	0xfffffc03

08001df0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2250      	movs	r2, #80	; 0x50
 8001dfe:	5c9b      	ldrb	r3, [r3, r2]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x18>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e06c      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0xf2>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2250      	movs	r2, #80	; 0x50
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2204      	movs	r2, #4
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d00b      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	2220      	movs	r2, #32
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2250      	movs	r2, #80	; 0x50
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e056      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <HAL_ADC_ConfigChannel+0xfc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d028      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	035b      	lsls	r3, r3, #13
 8001e4a:	0b5a      	lsrs	r2, r3, #13
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	02db      	lsls	r3, r3, #11
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <HAL_ADC_ConfigChannel+0x100>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_ADC_ConfigChannel+0x100>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0409      	lsls	r1, r1, #16
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001e6e:	200a      	movs	r0, #10
 8001e70:	f000 f844 	bl	8001efc <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	029b      	lsls	r3, r3, #10
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d02b      	beq.n	8001ed8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_ADC_ConfigChannel+0x100>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_ADC_ConfigChannel+0x100>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	03c9      	lsls	r1, r1, #15
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e023      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	035b      	lsls	r3, r3, #13
 8001e9c:	0b5b      	lsrs	r3, r3, #13
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	02db      	lsls	r3, r3, #11
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d005      	beq.n	8001ec0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_ADC_ConfigChannel+0x100>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_ADC_ConfigChannel+0x100>)
 8001eba:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <HAL_ADC_ConfigChannel+0x104>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d005      	beq.n	8001ed8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_ADC_ConfigChannel+0x100>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_ADC_ConfigChannel+0x100>)
 8001ed2:	4909      	ldr	r1, [pc, #36]	; (8001ef8 <HAL_ADC_ConfigChannel+0x108>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2250      	movs	r2, #80	; 0x50
 8001edc:	2100      	movs	r1, #0
 8001ede:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	00001001 	.word	0x00001001
 8001ef0:	40012708 	.word	0x40012708
 8001ef4:	ff7fffff 	.word	0xff7fffff
 8001ef8:	ffbfffff 	.word	0xffbfffff

08001efc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <ADC_DelayMicroSecond+0x38>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	490b      	ldr	r1, [pc, #44]	; (8001f38 <ADC_DelayMicroSecond+0x3c>)
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7fe f90e 	bl	800012c <__udivsi3>
 8001f10:	0003      	movs	r3, r0
 8001f12:	001a      	movs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4353      	muls	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001f1a:	e002      	b.n	8001f22 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f9      	bne.n	8001f1c <ADC_DelayMicroSecond+0x20>
  }
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	20000000 	.word	0x20000000
 8001f38:	000f4240 	.word	0x000f4240

08001f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	0002      	movs	r2, r0
 8001f44:	1dfb      	adds	r3, r7, #7
 8001f46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f4e:	d809      	bhi.n	8001f64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	001a      	movs	r2, r3
 8001f56:	231f      	movs	r3, #31
 8001f58:	401a      	ands	r2, r3
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_EnableIRQ+0x30>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4091      	lsls	r1, r2
 8001f60:	000a      	movs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
  }
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	0002      	movs	r2, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b7f      	cmp	r3, #127	; 0x7f
 8001f84:	d828      	bhi.n	8001fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <__NVIC_SetPriority+0xd4>)
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	33c0      	adds	r3, #192	; 0xc0
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	589b      	ldr	r3, [r3, r2]
 8001f96:	1dfa      	adds	r2, r7, #7
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	00d2      	lsls	r2, r2, #3
 8001fa2:	21ff      	movs	r1, #255	; 0xff
 8001fa4:	4091      	lsls	r1, r2
 8001fa6:	000a      	movs	r2, r1
 8001fa8:	43d2      	mvns	r2, r2
 8001faa:	401a      	ands	r2, r3
 8001fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	22ff      	movs	r2, #255	; 0xff
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	4003      	ands	r3, r0
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc4:	481f      	ldr	r0, [pc, #124]	; (8002044 <__NVIC_SetPriority+0xd4>)
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	33c0      	adds	r3, #192	; 0xc0
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fd6:	e031      	b.n	800203c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <__NVIC_SetPriority+0xd8>)
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0019      	movs	r1, r3
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	3b08      	subs	r3, #8
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3306      	adds	r3, #6
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	3304      	adds	r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1dfa      	adds	r2, r7, #7
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	00d2      	lsls	r2, r2, #3
 8001ffe:	21ff      	movs	r1, #255	; 0xff
 8002000:	4091      	lsls	r1, r2
 8002002:	000a      	movs	r2, r1
 8002004:	43d2      	mvns	r2, r2
 8002006:	401a      	ands	r2, r3
 8002008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	22ff      	movs	r2, #255	; 0xff
 8002010:	401a      	ands	r2, r3
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	0018      	movs	r0, r3
 8002018:	2303      	movs	r3, #3
 800201a:	4003      	ands	r3, r0
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <__NVIC_SetPriority+0xd8>)
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	001c      	movs	r4, r3
 8002028:	230f      	movs	r3, #15
 800202a:	4023      	ands	r3, r4
 800202c:	3b08      	subs	r3, #8
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	430a      	orrs	r2, r1
 8002032:	3306      	adds	r3, #6
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	18c3      	adds	r3, r0, r3
 8002038:	3304      	adds	r3, #4
 800203a:	601a      	str	r2, [r3, #0]
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b003      	add	sp, #12
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	045b      	lsls	r3, r3, #17
 800205c:	429a      	cmp	r2, r3
 800205e:	d301      	bcc.n	8002064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002060:	2301      	movs	r3, #1
 8002062:	e010      	b.n	8002086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <SysTick_Config+0x44>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	3a01      	subs	r2, #1
 800206a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206c:	2301      	movs	r3, #1
 800206e:	425b      	negs	r3, r3
 8002070:	2103      	movs	r1, #3
 8002072:	0018      	movs	r0, r3
 8002074:	f7ff ff7c 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x44>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x44>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	210f      	movs	r1, #15
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	1c02      	adds	r2, r0, #0
 80020a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	0011      	movs	r1, r2
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b004      	add	sp, #16
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	0002      	movs	r2, r0
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ff33 	bl	8001f3c <__NVIC_EnableIRQ>
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f7ff ffaf 	bl	800204c <SysTick_Config>
 80020ee:	0003      	movs	r3, r0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800210e:	e14f      	b.n	80023b0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4091      	lsls	r1, r2
 800211a:	000a      	movs	r2, r1
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d100      	bne.n	8002128 <HAL_GPIO_Init+0x30>
 8002126:	e140      	b.n	80023aa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	4013      	ands	r3, r2
 8002130:	2b01      	cmp	r3, #1
 8002132:	d005      	beq.n	8002140 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800213c:	2b02      	cmp	r3, #2
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	409a      	lsls	r2, r3
 800214e:	0013      	movs	r3, r2
 8002150:	43da      	mvns	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	409a      	lsls	r2, r3
 8002162:	0013      	movs	r3, r2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	43da      	mvns	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	2201      	movs	r2, #1
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
 8002194:	0013      	movs	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d017      	beq.n	80021de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	409a      	lsls	r2, r3
 80021bc:	0013      	movs	r3, r2
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	409a      	lsls	r2, r3
 80021d0:	0013      	movs	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2203      	movs	r2, #3
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d123      	bne.n	8002232 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	58d3      	ldr	r3, [r2, r3]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	43da      	mvns	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2107      	movs	r1, #7
 8002216:	400b      	ands	r3, r1
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	409a      	lsls	r2, r3
 800221c:	0013      	movs	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	6939      	ldr	r1, [r7, #16]
 8002230:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	409a      	lsls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	43da      	mvns	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	401a      	ands	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	4013      	ands	r3, r2
 8002270:	d100      	bne.n	8002274 <HAL_GPIO_Init+0x17c>
 8002272:	e09a      	b.n	80023aa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_GPIO_Init+0x2d4>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	589b      	ldr	r3, [r3, r2]
 800228c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2203      	movs	r2, #3
 8002292:	4013      	ands	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	409a      	lsls	r2, r3
 800229a:	0013      	movs	r3, r2
 800229c:	43da      	mvns	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	23a0      	movs	r3, #160	; 0xa0
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x1ea>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <HAL_GPIO_Init+0x2d8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x1e6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a46      	ldr	r2, [pc, #280]	; (80023d4 <HAL_GPIO_Init+0x2dc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x1e2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <HAL_GPIO_Init+0x2e0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x1de>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a44      	ldr	r2, [pc, #272]	; (80023dc <HAL_GPIO_Init+0x2e4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x1da>
 80022ce:	2305      	movs	r3, #5
 80022d0:	e008      	b.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022e2:	2300      	movs	r3, #0
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	2103      	movs	r1, #3
 80022e8:	400a      	ands	r2, r1
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	; (80023cc <HAL_GPIO_Init+0x2d4>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	43da      	mvns	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	035b      	lsls	r3, r3, #13
 800231a:	4013      	ands	r3, r2
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002326:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	43da      	mvns	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	039b      	lsls	r3, r3, #14
 8002344:	4013      	ands	r3, r2
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43da      	mvns	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	029b      	lsls	r3, r3, #10
 800236e:	4013      	ands	r3, r2
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43da      	mvns	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	025b      	lsls	r3, r3, #9
 8002398:	4013      	ands	r3, r2
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_GPIO_Init+0x2e8>)
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	40da      	lsrs	r2, r3
 80023b8:	1e13      	subs	r3, r2, #0
 80023ba:	d000      	beq.n	80023be <HAL_GPIO_Init+0x2c6>
 80023bc:	e6a8      	b.n	8002110 <HAL_GPIO_Init+0x18>
  }
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b006      	add	sp, #24
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010000 	.word	0x40010000
 80023d0:	50000400 	.word	0x50000400
 80023d4:	50000800 	.word	0x50000800
 80023d8:	50000c00 	.word	0x50000c00
 80023dc:	50001c00 	.word	0x50001c00
 80023e0:	40010400 	.word	0x40010400

080023e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	0008      	movs	r0, r1
 80023ee:	0011      	movs	r1, r2
 80023f0:	1cbb      	adds	r3, r7, #2
 80023f2:	1c02      	adds	r2, r0, #0
 80023f4:	801a      	strh	r2, [r3, #0]
 80023f6:	1c7b      	adds	r3, r7, #1
 80023f8:	1c0a      	adds	r2, r1, #0
 80023fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023fc:	1c7b      	adds	r3, r7, #1
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002404:	1cbb      	adds	r3, r7, #2
 8002406:	881a      	ldrh	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800240c:	e003      	b.n	8002416 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800240e:	1cbb      	adds	r3, r7, #2
 8002410:	881a      	ldrh	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	f000 fb5a 	bl	8002ae8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002434:	4bce      	ldr	r3, [pc, #824]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	220c      	movs	r2, #12
 800243a:	4013      	ands	r3, r2
 800243c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243e:	4bcc      	ldr	r3, [pc, #816]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	025b      	lsls	r3, r3, #9
 8002446:	4013      	ands	r3, r2
 8002448:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d100      	bne.n	8002456 <HAL_RCC_OscConfig+0x36>
 8002454:	e07c      	b.n	8002550 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d007      	beq.n	800246c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d111      	bne.n	8002486 <HAL_RCC_OscConfig+0x66>
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	025b      	lsls	r3, r3, #9
 8002468:	429a      	cmp	r2, r3
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	4bc0      	ldr	r3, [pc, #768]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	029b      	lsls	r3, r3, #10
 8002474:	4013      	ands	r3, r2
 8002476:	d100      	bne.n	800247a <HAL_RCC_OscConfig+0x5a>
 8002478:	e069      	b.n	800254e <HAL_RCC_OscConfig+0x12e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d165      	bne.n	800254e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e330      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	429a      	cmp	r2, r3
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_OscConfig+0x82>
 8002492:	4bb7      	ldr	r3, [pc, #732]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4bb6      	ldr	r3, [pc, #728]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0249      	lsls	r1, r1, #9
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e027      	b.n	80024f2 <HAL_RCC_OscConfig+0xd2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	23a0      	movs	r3, #160	; 0xa0
 80024a8:	02db      	lsls	r3, r3, #11
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d10e      	bne.n	80024cc <HAL_RCC_OscConfig+0xac>
 80024ae:	4bb0      	ldr	r3, [pc, #704]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4baf      	ldr	r3, [pc, #700]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	02c9      	lsls	r1, r1, #11
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	4bac      	ldr	r3, [pc, #688]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4bab      	ldr	r3, [pc, #684]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0249      	lsls	r1, r1, #9
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e012      	b.n	80024f2 <HAL_RCC_OscConfig+0xd2>
 80024cc:	4ba8      	ldr	r3, [pc, #672]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4ba7      	ldr	r3, [pc, #668]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024d2:	49a8      	ldr	r1, [pc, #672]	; (8002774 <HAL_RCC_OscConfig+0x354>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	4ba5      	ldr	r3, [pc, #660]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4ba2      	ldr	r3, [pc, #648]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4ba1      	ldr	r3, [pc, #644]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80024ec:	49a2      	ldr	r1, [pc, #648]	; (8002778 <HAL_RCC_OscConfig+0x358>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d014      	beq.n	8002524 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fad7 	bl	8001aac <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff fad2 	bl	8001aac <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e2e8      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002516:	4b96      	ldr	r3, [pc, #600]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	029b      	lsls	r3, r3, #10
 800251e:	4013      	ands	r3, r2
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xe4>
 8002522:	e015      	b.n	8002550 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fac2 	bl	8001aac <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252e:	f7ff fabd 	bl	8001aac <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e2d3      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002540:	4b8b      	ldr	r3, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	029b      	lsls	r3, r3, #10
 8002548:	4013      	ands	r3, r2
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x10e>
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d100      	bne.n	800255c <HAL_RCC_OscConfig+0x13c>
 800255a:	e08b      	b.n	8002674 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d13e      	bne.n	80025ec <HAL_RCC_OscConfig+0x1cc>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d13b      	bne.n	80025ec <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002574:	4b7e      	ldr	r3, [pc, #504]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2204      	movs	r2, #4
 800257a:	4013      	ands	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_RCC_OscConfig+0x168>
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e2af      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b79      	ldr	r3, [pc, #484]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a7b      	ldr	r2, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x35c>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	021a      	lsls	r2, r3, #8
 8002598:	4b75      	ldr	r3, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800259e:	4b74      	ldr	r3, [pc, #464]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2209      	movs	r2, #9
 80025a4:	4393      	bics	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	4b71      	ldr	r3, [pc, #452]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025b0:	f000 fc7a 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 80025b4:	0001      	movs	r1, r0
 80025b6:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	220f      	movs	r2, #15
 80025be:	4013      	ands	r3, r2
 80025c0:	4a6f      	ldr	r2, [pc, #444]	; (8002780 <HAL_RCC_OscConfig+0x360>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	000a      	movs	r2, r1
 80025c6:	40da      	lsrs	r2, r3
 80025c8:	4b6e      	ldr	r3, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x364>)
 80025ca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80025cc:	4b6e      	ldr	r3, [pc, #440]	; (8002788 <HAL_RCC_OscConfig+0x368>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2513      	movs	r5, #19
 80025d2:	197c      	adds	r4, r7, r5
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff fa23 	bl	8001a20 <HAL_InitTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80025de:	197b      	adds	r3, r7, r5
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d046      	beq.n	8002674 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80025e6:	197b      	adds	r3, r7, r5
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	e27d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d027      	beq.n	8002642 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025f2:	4b5f      	ldr	r3, [pc, #380]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2209      	movs	r2, #9
 80025f8:	4393      	bics	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff fa52 	bl	8001aac <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7ff fa4d 	bl	8001aac <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e263      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2204      	movs	r2, #4
 8002626:	4013      	ands	r3, r2
 8002628:	d0f1      	beq.n	800260e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262a:	4b51      	ldr	r3, [pc, #324]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a53      	ldr	r2, [pc, #332]	; (800277c <HAL_RCC_OscConfig+0x35c>)
 8002630:	4013      	ands	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	021a      	lsls	r2, r3, #8
 800263a:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	e018      	b.n	8002674 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002648:	2101      	movs	r1, #1
 800264a:	438a      	bics	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7ff fa2d 	bl	8001aac <HAL_GetTick>
 8002652:	0003      	movs	r3, r0
 8002654:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff fa28 	bl	8001aac <HAL_GetTick>
 800265c:	0002      	movs	r2, r0
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e23e      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2204      	movs	r2, #4
 8002670:	4013      	ands	r3, r2
 8002672:	d1f1      	bne.n	8002658 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2210      	movs	r2, #16
 800267a:	4013      	ands	r3, r2
 800267c:	d100      	bne.n	8002680 <HAL_RCC_OscConfig+0x260>
 800267e:	e0a1      	b.n	80027c4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d140      	bne.n	8002708 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002686:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4013      	ands	r3, r2
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x27e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e224      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269e:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a3a      	ldr	r2, [pc, #232]	; (800278c <HAL_RCC_OscConfig+0x36c>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	0a19      	lsrs	r1, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	061a      	lsls	r2, r3, #24
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	0b5b      	lsrs	r3, r3, #13
 80026cc:	3301      	adds	r3, #1
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	0212      	lsls	r2, r2, #8
 80026d2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	210f      	movs	r1, #15
 80026dc:	400b      	ands	r3, r1
 80026de:	4928      	ldr	r1, [pc, #160]	; (8002780 <HAL_RCC_OscConfig+0x360>)
 80026e0:	5ccb      	ldrb	r3, [r1, r3]
 80026e2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_RCC_OscConfig+0x364>)
 80026e6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x368>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2513      	movs	r5, #19
 80026ee:	197c      	adds	r4, r7, r5
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff f995 	bl	8001a20 <HAL_InitTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80026fa:	197b      	adds	r3, r7, r5
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d060      	beq.n	80027c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8002702:	197b      	adds	r3, r7, r5
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	e1ef      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d03f      	beq.n	8002790 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	0049      	lsls	r1, r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff f9c5 	bl	8001aac <HAL_GetTick>
 8002722:	0003      	movs	r3, r0
 8002724:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002728:	f7ff f9c0 	bl	8001aac <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1d6      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x36c>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	0a19      	lsrs	r1, r3, #8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	061a      	lsls	r2, r3, #24
 8002768:	4b01      	ldr	r3, [pc, #4]	; (8002770 <HAL_RCC_OscConfig+0x350>)
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	e029      	b.n	80027c4 <HAL_RCC_OscConfig+0x3a4>
 8002770:	40021000 	.word	0x40021000
 8002774:	fffeffff 	.word	0xfffeffff
 8002778:	fffbffff 	.word	0xfffbffff
 800277c:	ffffe0ff 	.word	0xffffe0ff
 8002780:	08004fd0 	.word	0x08004fd0
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004
 800278c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002790:	4bbe      	ldr	r3, [pc, #760]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4bbd      	ldr	r3, [pc, #756]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002796:	49be      	ldr	r1, [pc, #760]	; (8002a90 <HAL_RCC_OscConfig+0x670>)
 8002798:	400a      	ands	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff f986 	bl	8001aac <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a6:	f7ff f981 	bl	8001aac <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e197      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027b8:	4bb4      	ldr	r3, [pc, #720]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2208      	movs	r2, #8
 80027ca:	4013      	ands	r3, r2
 80027cc:	d036      	beq.n	800283c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d019      	beq.n	800280a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4bad      	ldr	r3, [pc, #692]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80027d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027da:	4bac      	ldr	r3, [pc, #688]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80027dc:	2101      	movs	r1, #1
 80027de:	430a      	orrs	r2, r1
 80027e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7ff f963 	bl	8001aac <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ec:	f7ff f95e 	bl	8001aac <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e174      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027fe:	4ba3      	ldr	r3, [pc, #652]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	2202      	movs	r2, #2
 8002804:	4013      	ands	r3, r2
 8002806:	d0f1      	beq.n	80027ec <HAL_RCC_OscConfig+0x3cc>
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4ba0      	ldr	r3, [pc, #640]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 800280c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800280e:	4b9f      	ldr	r3, [pc, #636]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002810:	2101      	movs	r1, #1
 8002812:	438a      	bics	r2, r1
 8002814:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7ff f949 	bl	8001aac <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002820:	f7ff f944 	bl	8001aac <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e15a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002832:	4b96      	ldr	r3, [pc, #600]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002836:	2202      	movs	r2, #2
 8002838:	4013      	ands	r3, r2
 800283a:	d1f1      	bne.n	8002820 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2204      	movs	r2, #4
 8002842:	4013      	ands	r3, r2
 8002844:	d100      	bne.n	8002848 <HAL_RCC_OscConfig+0x428>
 8002846:	e0ae      	b.n	80029a6 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002848:	2027      	movs	r0, #39	; 0x27
 800284a:	183b      	adds	r3, r7, r0
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002850:	4b8e      	ldr	r3, [pc, #568]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	055b      	lsls	r3, r3, #21
 8002858:	4013      	ands	r3, r2
 800285a:	d109      	bne.n	8002870 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	4b8b      	ldr	r3, [pc, #556]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 800285e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002860:	4b8a      	ldr	r3, [pc, #552]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0549      	lsls	r1, r1, #21
 8002866:	430a      	orrs	r2, r1
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800286a:	183b      	adds	r3, r7, r0
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b88      	ldr	r3, [pc, #544]	; (8002a94 <HAL_RCC_OscConfig+0x674>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d11a      	bne.n	80028b2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287c:	4b85      	ldr	r3, [pc, #532]	; (8002a94 <HAL_RCC_OscConfig+0x674>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b84      	ldr	r3, [pc, #528]	; (8002a94 <HAL_RCC_OscConfig+0x674>)
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	0049      	lsls	r1, r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7ff f90f 	bl	8001aac <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7ff f90a 	bl	8001aac <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e120      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x674>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_OscConfig+0x4ae>
 80028be:	4b73      	ldr	r3, [pc, #460]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80028c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028c2:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	0049      	lsls	r1, r1, #1
 80028c8:	430a      	orrs	r2, r1
 80028ca:	651a      	str	r2, [r3, #80]	; 0x50
 80028cc:	e031      	b.n	8002932 <HAL_RCC_OscConfig+0x512>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4d0>
 80028d6:	4b6d      	ldr	r3, [pc, #436]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80028d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028da:	4b6c      	ldr	r3, [pc, #432]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80028dc:	496c      	ldr	r1, [pc, #432]	; (8002a90 <HAL_RCC_OscConfig+0x670>)
 80028de:	400a      	ands	r2, r1
 80028e0:	651a      	str	r2, [r3, #80]	; 0x50
 80028e2:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80028e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028e6:	4b69      	ldr	r3, [pc, #420]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80028e8:	496b      	ldr	r1, [pc, #428]	; (8002a98 <HAL_RCC_OscConfig+0x678>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	651a      	str	r2, [r3, #80]	; 0x50
 80028ee:	e020      	b.n	8002932 <HAL_RCC_OscConfig+0x512>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	23a0      	movs	r3, #160	; 0xa0
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d10e      	bne.n	800291a <HAL_RCC_OscConfig+0x4fa>
 80028fc:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80028fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002900:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	00c9      	lsls	r1, r1, #3
 8002906:	430a      	orrs	r2, r1
 8002908:	651a      	str	r2, [r3, #80]	; 0x50
 800290a:	4b60      	ldr	r3, [pc, #384]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 800290c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	0049      	lsls	r1, r1, #1
 8002914:	430a      	orrs	r2, r1
 8002916:	651a      	str	r2, [r3, #80]	; 0x50
 8002918:	e00b      	b.n	8002932 <HAL_RCC_OscConfig+0x512>
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 800291c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800291e:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002920:	495b      	ldr	r1, [pc, #364]	; (8002a90 <HAL_RCC_OscConfig+0x670>)
 8002922:	400a      	ands	r2, r1
 8002924:	651a      	str	r2, [r3, #80]	; 0x50
 8002926:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800292a:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 800292c:	495a      	ldr	r1, [pc, #360]	; (8002a98 <HAL_RCC_OscConfig+0x678>)
 800292e:	400a      	ands	r2, r1
 8002930:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d015      	beq.n	8002966 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7ff f8b7 	bl	8001aac <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002942:	e009      	b.n	8002958 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7ff f8b2 	bl	8001aac <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	4a53      	ldr	r2, [pc, #332]	; (8002a9c <HAL_RCC_OscConfig+0x67c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0c7      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002958:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 800295a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d0ef      	beq.n	8002944 <HAL_RCC_OscConfig+0x524>
 8002964:	e014      	b.n	8002990 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7ff f8a1 	bl	8001aac <HAL_GetTick>
 800296a:	0003      	movs	r3, r0
 800296c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800296e:	e009      	b.n	8002984 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7ff f89c 	bl	8001aac <HAL_GetTick>
 8002974:	0002      	movs	r2, r0
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	4a48      	ldr	r2, [pc, #288]	; (8002a9c <HAL_RCC_OscConfig+0x67c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e0b1      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d1ef      	bne.n	8002970 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002990:	2327      	movs	r3, #39	; 0x27
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d105      	bne.n	80029a6 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299a:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 800299c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80029a0:	493f      	ldr	r1, [pc, #252]	; (8002aa0 <HAL_RCC_OscConfig+0x680>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d100      	bne.n	80029b0 <HAL_RCC_OscConfig+0x590>
 80029ae:	e09a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d064      	beq.n	8002a80 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d145      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80029c4:	4937      	ldr	r1, [pc, #220]	; (8002aa4 <HAL_RCC_OscConfig+0x684>)
 80029c6:	400a      	ands	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7ff f86f 	bl	8001aac <HAL_GetTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7ff f86a 	bl	8001aac <HAL_GetTick>
 80029d8:	0002      	movs	r2, r0
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e080      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	049b      	lsls	r3, r3, #18
 80029ee:	4013      	ands	r3, r2
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <HAL_RCC_OscConfig+0x688>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0449      	lsls	r1, r1, #17
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff f844 	bl	8001aac <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7ff f83f 	bl	8001aac <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e055      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	049b      	lsls	r3, r3, #18
 8002a44:	4013      	ands	r3, r2
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x60a>
 8002a48:	e04d      	b.n	8002ae6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002a50:	4914      	ldr	r1, [pc, #80]	; (8002aa4 <HAL_RCC_OscConfig+0x684>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7ff f829 	bl	8001aac <HAL_GetTick>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7ff f824 	bl	8001aac <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e03a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_OscConfig+0x66c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	049b      	lsls	r3, r3, #18
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x640>
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d111      	bne.n	8002aac <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e02d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	fffffeff 	.word	0xfffffeff
 8002a94:	40007000 	.word	0x40007000
 8002a98:	fffffbff 	.word	0xfffffbff
 8002a9c:	00001388 	.word	0x00001388
 8002aa0:	efffffff 	.word	0xefffffff
 8002aa4:	feffffff 	.word	0xfeffffff
 8002aa8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_RCC_OscConfig+0x6d0>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	025b      	lsls	r3, r3, #9
 8002ab8:	401a      	ands	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	23f0      	movs	r3, #240	; 0xf0
 8002ac6:	039b      	lsls	r3, r3, #14
 8002ac8:	401a      	ands	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	23c0      	movs	r3, #192	; 0xc0
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	401a      	ands	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b00a      	add	sp, #40	; 0x28
 8002aee:	bdb0      	pop	{r4, r5, r7, pc}
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e128      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b96      	ldr	r3, [pc, #600]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4013      	ands	r3, r2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d91e      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b93      	ldr	r3, [pc, #588]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	4b90      	ldr	r3, [pc, #576]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b28:	f7fe ffc0 	bl	8001aac <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b30:	e009      	b.n	8002b46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b32:	f7fe ffbb 	bl	8001aac <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	4a8a      	ldr	r2, [pc, #552]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e109      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b87      	ldr	r3, [pc, #540]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d1ee      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5e:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	22f0      	movs	r2, #240	; 0xf0
 8002b64:	4393      	bics	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x8a>
 8002b7c:	e089      	b.n	8002c92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b86:	4b79      	ldr	r3, [pc, #484]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	029b      	lsls	r3, r3, #10
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d120      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0e1      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b9e:	4b73      	ldr	r3, [pc, #460]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	049b      	lsls	r3, r3, #18
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d114      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0d5      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb6:	4b6d      	ldr	r3, [pc, #436]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0ca      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bc4:	4b69      	ldr	r3, [pc, #420]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0c2      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd4:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	4393      	bics	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4b62      	ldr	r3, [pc, #392]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe ff60 	bl	8001aac <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfa:	f7fe ff57 	bl	8001aac <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0a5      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0e:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	220c      	movs	r2, #12
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d1ef      	bne.n	8002bfa <HAL_RCC_ClockConfig+0x106>
 8002c1a:	e03a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c24:	e009      	b.n	8002c3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c26:	f7fe ff41 	bl	8001aac <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e08f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3a:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	220c      	movs	r2, #12
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d1ef      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x132>
 8002c46:	e024      	b.n	8002c92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d11b      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c50:	e009      	b.n	8002c66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c52:	f7fe ff2b 	bl	8001aac <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	4a42      	ldr	r2, [pc, #264]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e079      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d1ef      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x15e>
 8002c72:	e00e      	b.n	8002c92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe ff1a 	bl	8001aac <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e068      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	220c      	movs	r2, #12
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c92:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d21e      	bcs.n	8002cde <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca0:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4393      	bics	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cb2:	f7fe fefb 	bl	8001aac <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	e009      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe fef6 	bl	8001aac <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e044      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d1ee      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x27c>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	4013      	ands	r3, r2
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_RCC_ClockConfig+0x280>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00da      	lsls	r2, r3, #3
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1c:	f000 f8c4 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002d20:	0001      	movs	r1, r0
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	220f      	movs	r2, #15
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x284>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	000a      	movs	r2, r1
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_RCC_ClockConfig+0x288>)
 8002d36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_RCC_ClockConfig+0x28c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	250b      	movs	r5, #11
 8002d3e:	197c      	adds	r4, r7, r5
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7fe fe6d 	bl	8001a20 <HAL_InitTick>
 8002d46:	0003      	movs	r3, r0
 8002d48:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002d4a:	197b      	adds	r3, r7, r5
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002d52:	197b      	adds	r3, r7, r5
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bdb0      	pop	{r4, r5, r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	40022000 	.word	0x40022000
 8002d68:	00001388 	.word	0x00001388
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	fffff8ff 	.word	0xfffff8ff
 8002d74:	ffffc7ff 	.word	0xffffc7ff
 8002d78:	08004fd0 	.word	0x08004fd0
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b08d      	sub	sp, #52	; 0x34
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8002d90:	241c      	movs	r4, #28
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	0018      	movs	r0, r3
 8002d96:	2314      	movs	r3, #20
 8002d98:	001a      	movs	r2, r3
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f001 fc38 	bl	8004610 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002da0:	0020      	movs	r0, r4
 8002da2:	183b      	adds	r3, r7, r0
 8002da4:	2202      	movs	r2, #2
 8002da6:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	2202      	movs	r2, #2
 8002dac:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8002dae:	183b      	adds	r3, r7, r0
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d11a      	bne.n	8002df0 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 8002dba:	183b      	adds	r3, r7, r0
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	0052      	lsls	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002dc2:	183b      	adds	r3, r7, r0
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002de0:	183a      	adds	r2, r7, r0
 8002de2:	23a0      	movs	r3, #160	; 0xa0
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff f985 	bl	80020f8 <HAL_GPIO_Init>
 8002dee:	e038      	b.n	8002e62 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d11a      	bne.n	8002e2c <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8002df6:	201c      	movs	r0, #28
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	0192      	lsls	r2, r2, #6
 8002dfe:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8002e00:	183b      	adds	r3, r7, r0
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	2202      	movs	r2, #2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8002e1e:	183b      	adds	r3, r7, r0
 8002e20:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <HAL_RCC_MCOConfig+0x100>)
 8002e22:	0019      	movs	r1, r3
 8002e24:	0010      	movs	r0, r2
 8002e26:	f7ff f967 	bl	80020f8 <HAL_GPIO_Init>
 8002e2a:	e01a      	b.n	8002e62 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8002e2c:	201c      	movs	r0, #28
 8002e2e:	183b      	adds	r3, r7, r0
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	0092      	lsls	r2, r2, #2
 8002e34:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002e36:	183b      	adds	r3, r7, r0
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8002e3c:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	430a      	orrs	r2, r1
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e48:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8002e54:	183a      	adds	r2, r7, r0
 8002e56:	23a0      	movs	r3, #160	; 0xa0
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f7ff f94b 	bl	80020f8 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <HAL_RCC_MCOConfig+0x104>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_RCC_MCOConfig+0xfc>)
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b00d      	add	sp, #52	; 0x34
 8002e7e:	bd90      	pop	{r4, r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	50000400 	.word	0x50000400
 8002e88:	80ffffff 	.word	0x80ffffff

08002e8c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCC_EnableCSS+0x18>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_RCC_EnableCSS+0x18>)
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	0309      	lsls	r1, r1, #12
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	b5b0      	push	{r4, r5, r7, lr}
 8002eaa:	b08e      	sub	sp, #56	; 0x38
 8002eac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002eae:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d014      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ebe:	d900      	bls.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x1a>
 8002ec0:	e07b      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x112>
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x24>
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eca:	e076      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ecc:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ed6:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002eda:	e07c      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002edc:	4b42      	ldr	r3, [pc, #264]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ee0:	e079      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b42      	ldr	r3, [pc, #264]	; (8002fec <HAL_RCC_GetSysClockFreq+0x144>)
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ee6:	e076      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	0c9a      	lsrs	r2, r3, #18
 8002eec:	230f      	movs	r3, #15
 8002eee:	401a      	ands	r2, r3
 8002ef0:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x148>)
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	0d9a      	lsrs	r2, r3, #22
 8002efa:	2303      	movs	r3, #3
 8002efc:	4013      	ands	r3, r2
 8002efe:	3301      	adds	r3, #1
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	025b      	lsls	r3, r3, #9
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d01a      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	4a35      	ldr	r2, [pc, #212]	; (8002fec <HAL_RCC_GetSysClockFreq+0x144>)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	69b8      	ldr	r0, [r7, #24]
 8002f1c:	69f9      	ldr	r1, [r7, #28]
 8002f1e:	f7fd f9b1 	bl	8000284 <__aeabi_lmul>
 8002f22:	0002      	movs	r2, r0
 8002f24:	000b      	movs	r3, r1
 8002f26:	0010      	movs	r0, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f7fd f985 	bl	8000244 <__aeabi_uldivmod>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	000b      	movs	r3, r1
 8002f3e:	0013      	movs	r3, r2
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
 8002f42:	e037      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d01a      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	68b8      	ldr	r0, [r7, #8]
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	f7fd f991 	bl	8000284 <__aeabi_lmul>
 8002f62:	0002      	movs	r2, r0
 8002f64:	000b      	movs	r3, r1
 8002f66:	0010      	movs	r0, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f7fd f965 	bl	8000244 <__aeabi_uldivmod>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	000b      	movs	r3, r1
 8002f7e:	0013      	movs	r3, r2
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
 8002f82:	e017      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	0018      	movs	r0, r3
 8002f88:	2300      	movs	r3, #0
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f7fd f978 	bl	8000284 <__aeabi_lmul>
 8002f94:	0002      	movs	r2, r0
 8002f96:	000b      	movs	r3, r1
 8002f98:	0010      	movs	r0, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	001c      	movs	r4, r3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	001d      	movs	r5, r3
 8002fa4:	0022      	movs	r2, r4
 8002fa6:	002b      	movs	r3, r5
 8002fa8:	f7fd f94c 	bl	8000244 <__aeabi_uldivmod>
 8002fac:	0002      	movs	r2, r0
 8002fae:	000b      	movs	r3, r1
 8002fb0:	0013      	movs	r3, r2
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fb8:	e00d      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0b5b      	lsrs	r3, r3, #13
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	0212      	lsls	r2, r2, #8
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	0013      	movs	r3, r2
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fd4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b00e      	add	sp, #56	; 0x38
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	003d0900 	.word	0x003d0900
 8002fe8:	00f42400 	.word	0x00f42400
 8002fec:	007a1200 	.word	0x007a1200
 8002ff0:	08004fe8 	.word	0x08004fe8

08002ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff8:	4b02      	ldr	r3, [pc, #8]	; (8003004 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	20000000 	.word	0x20000000

08003008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800300c:	f7ff fff2 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003010:	0001      	movs	r1, r0
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	2207      	movs	r2, #7
 800301a:	4013      	ands	r3, r2
 800301c:	4a04      	ldr	r2, [pc, #16]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	40d9      	lsrs	r1, r3
 8003022:	000b      	movs	r3, r1
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	40021000 	.word	0x40021000
 8003030:	08004fe0 	.word	0x08004fe0

08003034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003038:	f7ff ffdc 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 800303c:	0001      	movs	r1, r0
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	0adb      	lsrs	r3, r3, #11
 8003044:	2207      	movs	r2, #7
 8003046:	4013      	ands	r3, r2
 8003048:	4a04      	ldr	r2, [pc, #16]	; (800305c <HAL_RCC_GetPCLK2Freq+0x28>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	40d9      	lsrs	r1, r3
 800304e:	000b      	movs	r3, r1
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	40021000 	.word	0x40021000
 800305c:	08004fe0 	.word	0x08004fe0

08003060 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_RCC_NMI_IRQHandler+0x28>)
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	401a      	ands	r2, r3
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	429a      	cmp	r2, r3
 8003074:	d105      	bne.n	8003082 <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003076:	f000 f809 	bl	800308c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800307a:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_NMI_IRQHandler+0x28>)
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	0052      	lsls	r2, r2, #1
 8003080:	619a      	str	r2, [r3, #24]
  }
}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000

0800308c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80030a0:	2017      	movs	r0, #23
 80030a2:	183b      	adds	r3, r7, r0
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	4013      	ands	r3, r2
 80030b0:	d100      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80030b2:	e0c7      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b4:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	055b      	lsls	r3, r3, #21
 80030bc:	4013      	ands	r3, r2
 80030be:	d109      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c0:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c4:	4b87      	ldr	r3, [pc, #540]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	0549      	lsls	r1, r1, #21
 80030ca:	430a      	orrs	r2, r1
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80030ce:	183b      	adds	r3, r7, r0
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	4b84      	ldr	r3, [pc, #528]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4013      	ands	r3, r2
 80030de:	d11a      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e0:	4b81      	ldr	r3, [pc, #516]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b80      	ldr	r3, [pc, #512]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	0049      	lsls	r1, r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fcdd 	bl	8001aac <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	e008      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f8:	f7fe fcd8 	bl	8001aac <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0e8      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b77      	ldr	r3, [pc, #476]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4013      	ands	r3, r2
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003116:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	23c0      	movs	r3, #192	; 0xc0
 800311c:	039b      	lsls	r3, r3, #14
 800311e:	4013      	ands	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	23c0      	movs	r3, #192	; 0xc0
 8003128:	039b      	lsls	r3, r3, #14
 800312a:	4013      	ands	r3, r2
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	429a      	cmp	r2, r3
 8003130:	d013      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	23c0      	movs	r3, #192	; 0xc0
 8003138:	029b      	lsls	r3, r3, #10
 800313a:	401a      	ands	r2, r3
 800313c:	23c0      	movs	r3, #192	; 0xc0
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	429a      	cmp	r2, r3
 8003142:	d10a      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003144:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	029b      	lsls	r3, r3, #10
 800314c:	401a      	ands	r2, r3
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	029b      	lsls	r3, r3, #10
 8003152:	429a      	cmp	r2, r3
 8003154:	d101      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0c0      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800315c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800315e:	23c0      	movs	r3, #192	; 0xc0
 8003160:	029b      	lsls	r3, r3, #10
 8003162:	4013      	ands	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	23c0      	movs	r3, #192	; 0xc0
 8003172:	029b      	lsls	r3, r3, #10
 8003174:	4013      	ands	r3, r2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	429a      	cmp	r2, r3
 800317a:	d033      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2220      	movs	r2, #32
 8003182:	4013      	ands	r3, r2
 8003184:	d02e      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003186:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	4a58      	ldr	r2, [pc, #352]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800318c:	4013      	ands	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003190:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	0309      	lsls	r1, r1, #12
 800319a:	430a      	orrs	r2, r1
 800319c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031a2:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031a4:	4952      	ldr	r1, [pc, #328]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80031aa:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	d014      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe fc77 	bl	8001aac <HAL_GetTick>
 80031be:	0003      	movs	r3, r0
 80031c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c2:	e009      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fe fc72 	bl	8001aac <HAL_GetTick>
 80031c8:	0002      	movs	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	4a49      	ldr	r2, [pc, #292]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e081      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d8:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	d0ef      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2220      	movs	r2, #32
 80031ea:	4013      	ands	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	029b      	lsls	r3, r3, #10
 80031f6:	401a      	ands	r2, r3
 80031f8:	23c0      	movs	r3, #192	; 0xc0
 80031fa:	029b      	lsls	r3, r3, #10
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d10c      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003200:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	4013      	ands	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	23c0      	movs	r3, #192	; 0xc0
 8003210:	039b      	lsls	r3, r3, #14
 8003212:	401a      	ands	r2, r3
 8003214:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800321c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	23c0      	movs	r3, #192	; 0xc0
 8003224:	029b      	lsls	r3, r3, #10
 8003226:	401a      	ands	r2, r3
 8003228:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800322a:	430a      	orrs	r2, r1
 800322c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800322e:	2317      	movs	r3, #23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800323a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800323e:	492f      	ldr	r1, [pc, #188]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003240:	400a      	ands	r2, r1
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	2203      	movs	r2, #3
 8003254:	4393      	bics	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800325e:	430a      	orrs	r2, r1
 8003260:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2202      	movs	r2, #2
 8003268:	4013      	ands	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	220c      	movs	r2, #12
 8003272:	4393      	bics	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800327c:	430a      	orrs	r2, r1
 800327e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2204      	movs	r2, #4
 8003286:	4013      	ands	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800329a:	430a      	orrs	r2, r1
 800329c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2208      	movs	r2, #8
 80032a4:	4013      	ands	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	4a15      	ldr	r2, [pc, #84]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032b8:	430a      	orrs	r2, r1
 80032ba:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	4013      	ands	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ca:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032d6:	430a      	orrs	r2, r1
 80032d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b006      	add	sp, #24
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	fffcffff 	.word	0xfffcffff
 80032f0:	fff7ffff 	.word	0xfff7ffff
 80032f4:	00001388 	.word	0x00001388
 80032f8:	ffcfffff 	.word	0xffcfffff
 80032fc:	efffffff 	.word	0xefffffff
 8003300:	fffff3ff 	.word	0xfffff3ff
 8003304:	ffffcfff 	.word	0xffffcfff
 8003308:	fff3ffff 	.word	0xfff3ffff

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e032      	b.n	8003384 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2239      	movs	r2, #57	; 0x39
 8003322:	5c9b      	ldrb	r3, [r3, r2]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2238      	movs	r2, #56	; 0x38
 800332e:	2100      	movs	r1, #0
 8003330:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f7fe fa3f 	bl	80017b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2239      	movs	r2, #57	; 0x39
 800333e:	2102      	movs	r1, #2
 8003340:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	0019      	movs	r1, r3
 800334c:	0010      	movs	r0, r2
 800334e:	f000 fa4d 	bl	80037ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	223e      	movs	r2, #62	; 0x3e
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223a      	movs	r2, #58	; 0x3a
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	223b      	movs	r2, #59	; 0x3b
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223c      	movs	r2, #60	; 0x3c
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	223d      	movs	r2, #61	; 0x3d
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2239      	movs	r2, #57	; 0x39
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2239      	movs	r2, #57	; 0x39
 8003398:	5c9b      	ldrb	r3, [r3, r2]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d001      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e036      	b.n	8003412 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2239      	movs	r2, #57	; 0x39
 80033a8:	2102      	movs	r1, #2
 80033aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2101      	movs	r1, #1
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	05db      	lsls	r3, r3, #23
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d009      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x50>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <HAL_TIM_Base_Start_IT+0x90>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x50>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <HAL_TIM_Base_Start_IT+0x94>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d111      	bne.n	8003400 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2207      	movs	r2, #7
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d010      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fe:	e007      	b.n	8003410 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2101      	movs	r1, #1
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b004      	add	sp, #16
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	40010800 	.word	0x40010800
 8003420:	40011400 	.word	0x40011400

08003424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2202      	movs	r2, #2
 8003434:	4013      	ands	r3, r2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d124      	bne.n	8003484 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2202      	movs	r2, #2
 8003442:	4013      	ands	r3, r2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d11d      	bne.n	8003484 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2203      	movs	r2, #3
 800344e:	4252      	negs	r2, r2
 8003450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2203      	movs	r2, #3
 8003460:	4013      	ands	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f9a8 	bl	80037bc <HAL_TIM_IC_CaptureCallback>
 800346c:	e007      	b.n	800347e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 f99b 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 f9a7 	bl	80037cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2204      	movs	r2, #4
 800348c:	4013      	ands	r3, r2
 800348e:	2b04      	cmp	r3, #4
 8003490:	d125      	bne.n	80034de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2204      	movs	r2, #4
 800349a:	4013      	ands	r3, r2
 800349c:	2b04      	cmp	r3, #4
 800349e:	d11e      	bne.n	80034de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2205      	movs	r2, #5
 80034a6:	4252      	negs	r2, r2
 80034a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	23c0      	movs	r3, #192	; 0xc0
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f97b 	bl	80037bc <HAL_TIM_IC_CaptureCallback>
 80034c6:	e007      	b.n	80034d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 f96e 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f97a 	bl	80037cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2208      	movs	r2, #8
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d124      	bne.n	8003536 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2208      	movs	r2, #8
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11d      	bne.n	8003536 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2209      	movs	r2, #9
 8003500:	4252      	negs	r2, r2
 8003502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2204      	movs	r2, #4
 8003508:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2203      	movs	r2, #3
 8003512:	4013      	ands	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f94f 	bl	80037bc <HAL_TIM_IC_CaptureCallback>
 800351e:	e007      	b.n	8003530 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f942 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f94e 	bl	80037cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	2b10      	cmp	r3, #16
 8003542:	d125      	bne.n	8003590 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2210      	movs	r2, #16
 800354c:	4013      	ands	r3, r2
 800354e:	2b10      	cmp	r3, #16
 8003550:	d11e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2211      	movs	r2, #17
 8003558:	4252      	negs	r2, r2
 800355a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2208      	movs	r2, #8
 8003560:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	23c0      	movs	r3, #192	; 0xc0
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4013      	ands	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f922 	bl	80037bc <HAL_TIM_IC_CaptureCallback>
 8003578:	e007      	b.n	800358a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 f915 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 f921 	bl	80037cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2201      	movs	r2, #1
 8003598:	4013      	ands	r3, r2
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10f      	bne.n	80035be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d108      	bne.n	80035be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	4252      	negs	r2, r2
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 f8ef 	bl	800379c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2240      	movs	r2, #64	; 0x40
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d10f      	bne.n	80035ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d108      	bne.n	80035ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2241      	movs	r2, #65	; 0x41
 80035e0:	4252      	negs	r2, r2
 80035e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 f8f8 	bl	80037dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	230f      	movs	r3, #15
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2238      	movs	r2, #56	; 0x38
 800360a:	5c9b      	ldrb	r3, [r3, r2]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_TIM_ConfigClockSource+0x20>
 8003610:	2302      	movs	r3, #2
 8003612:	e0bc      	b.n	800378e <HAL_TIM_ConfigClockSource+0x19a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2238      	movs	r2, #56	; 0x38
 8003618:	2101      	movs	r1, #1
 800361a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2239      	movs	r2, #57	; 0x39
 8003620:	2102      	movs	r1, #2
 8003622:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2277      	movs	r2, #119	; 0x77
 8003630:	4393      	bics	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003638:	4013      	ands	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	0192      	lsls	r2, r2, #6
 800364c:	4293      	cmp	r3, r2
 800364e:	d040      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0xde>
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	0192      	lsls	r2, r2, #6
 8003654:	4293      	cmp	r3, r2
 8003656:	d900      	bls.n	800365a <HAL_TIM_ConfigClockSource+0x66>
 8003658:	e088      	b.n	800376c <HAL_TIM_ConfigClockSource+0x178>
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	0152      	lsls	r2, r2, #5
 800365e:	4293      	cmp	r3, r2
 8003660:	d100      	bne.n	8003664 <HAL_TIM_ConfigClockSource+0x70>
 8003662:	e088      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x182>
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	0152      	lsls	r2, r2, #5
 8003668:	4293      	cmp	r3, r2
 800366a:	d900      	bls.n	800366e <HAL_TIM_ConfigClockSource+0x7a>
 800366c:	e07e      	b.n	800376c <HAL_TIM_ConfigClockSource+0x178>
 800366e:	2b70      	cmp	r3, #112	; 0x70
 8003670:	d018      	beq.n	80036a4 <HAL_TIM_ConfigClockSource+0xb0>
 8003672:	d900      	bls.n	8003676 <HAL_TIM_ConfigClockSource+0x82>
 8003674:	e07a      	b.n	800376c <HAL_TIM_ConfigClockSource+0x178>
 8003676:	2b60      	cmp	r3, #96	; 0x60
 8003678:	d04f      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x126>
 800367a:	d900      	bls.n	800367e <HAL_TIM_ConfigClockSource+0x8a>
 800367c:	e076      	b.n	800376c <HAL_TIM_ConfigClockSource+0x178>
 800367e:	2b50      	cmp	r3, #80	; 0x50
 8003680:	d03b      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x106>
 8003682:	d900      	bls.n	8003686 <HAL_TIM_ConfigClockSource+0x92>
 8003684:	e072      	b.n	800376c <HAL_TIM_ConfigClockSource+0x178>
 8003686:	2b40      	cmp	r3, #64	; 0x40
 8003688:	d057      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x146>
 800368a:	d900      	bls.n	800368e <HAL_TIM_ConfigClockSource+0x9a>
 800368c:	e06e      	b.n	800376c <HAL_TIM_ConfigClockSource+0x178>
 800368e:	2b30      	cmp	r3, #48	; 0x30
 8003690:	d063      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x166>
 8003692:	d86b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x178>
 8003694:	2b20      	cmp	r3, #32
 8003696:	d060      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x166>
 8003698:	d868      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x178>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d05d      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x166>
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d05b      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x166>
 80036a2:	e063      	b.n	800376c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6899      	ldr	r1, [r3, #8]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f000 f968 	bl	8003988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2277      	movs	r2, #119	; 0x77
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
      break;
 80036d0:	e052      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f000 f951 	bl	8003988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	01c9      	lsls	r1, r1, #7
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
      break;
 80036f8:	e03e      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	001a      	movs	r2, r3
 8003708:	f000 f8c4 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2150      	movs	r1, #80	; 0x50
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f91e 	bl	8003954 <TIM_ITRx_SetConfig>
      break;
 8003718:	e02e      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	001a      	movs	r2, r3
 8003728:	f000 f8e2 	bl	80038f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2160      	movs	r1, #96	; 0x60
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f90e 	bl	8003954 <TIM_ITRx_SetConfig>
      break;
 8003738:	e01e      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	001a      	movs	r2, r3
 8003748:	f000 f8a4 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	0018      	movs	r0, r3
 8003754:	f000 f8fe 	bl	8003954 <TIM_ITRx_SetConfig>
      break;
 8003758:	e00e      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	0019      	movs	r1, r3
 8003764:	0010      	movs	r0, r2
 8003766:	f000 f8f5 	bl	8003954 <TIM_ITRx_SetConfig>
      break;
 800376a:	e005      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800376c:	230f      	movs	r3, #15
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
      break;
 8003774:	e000      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003776:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2239      	movs	r2, #57	; 0x39
 800377c:	2101      	movs	r1, #1
 800377e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2238      	movs	r2, #56	; 0x38
 8003784:	2100      	movs	r1, #0
 8003786:	5499      	strb	r1, [r3, r2]

  return status;
 8003788:	230f      	movs	r3, #15
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b004      	add	sp, #16
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	ffff00ff 	.word	0xffff00ff

0800379c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b002      	add	sp, #8
 80037ea:	bd80      	pop	{r7, pc}

080037ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	05db      	lsls	r3, r3, #23
 8003802:	429a      	cmp	r2, r3
 8003804:	d007      	beq.n	8003816 <TIM_Base_SetConfig+0x2a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <TIM_Base_SetConfig+0x9c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_Base_SetConfig+0x2a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <TIM_Base_SetConfig+0xa0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2270      	movs	r2, #112	; 0x70
 800381a:	4393      	bics	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	05db      	lsls	r3, r3, #23
 800382e:	429a      	cmp	r2, r3
 8003830:	d007      	beq.n	8003842 <TIM_Base_SetConfig+0x56>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a14      	ldr	r2, [pc, #80]	; (8003888 <TIM_Base_SetConfig+0x9c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_Base_SetConfig+0x56>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a13      	ldr	r2, [pc, #76]	; (800388c <TIM_Base_SetConfig+0xa0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d108      	bne.n	8003854 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a12      	ldr	r2, [pc, #72]	; (8003890 <TIM_Base_SetConfig+0xa4>)
 8003846:	4013      	ands	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	4393      	bics	r3, r2
 800385a:	001a      	movs	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	615a      	str	r2, [r3, #20]
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b004      	add	sp, #16
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40010800 	.word	0x40010800
 800388c:	40011400 	.word	0x40011400
 8003890:	fffffcff 	.word	0xfffffcff

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	2201      	movs	r2, #1
 80038ac:	4393      	bics	r3, r2
 80038ae:	001a      	movs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	22f0      	movs	r2, #240	; 0xf0
 80038be:	4393      	bics	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	220a      	movs	r2, #10
 80038d0:	4393      	bics	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	621a      	str	r2, [r3, #32]
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b006      	add	sp, #24
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	2210      	movs	r2, #16
 8003902:	4393      	bics	r3, r2
 8003904:	001a      	movs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <TIM_TI2_ConfigInputStage+0x60>)
 800391a:	4013      	ands	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	22a0      	movs	r2, #160	; 0xa0
 800392c:	4393      	bics	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b006      	add	sp, #24
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	ffff0fff 	.word	0xffff0fff

08003954 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2270      	movs	r2, #112	; 0x70
 8003968:	4393      	bics	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	2207      	movs	r2, #7
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	609a      	str	r2, [r3, #8]
}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <TIM_ETR_SetConfig+0x3c>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	021a      	lsls	r2, r3, #8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b006      	add	sp, #24
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	ffff00ff 	.word	0xffff00ff

080039c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2238      	movs	r2, #56	; 0x38
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039dc:	2302      	movs	r3, #2
 80039de:	e042      	b.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2238      	movs	r2, #56	; 0x38
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2239      	movs	r2, #57	; 0x39
 80039ec:	2102      	movs	r1, #2
 80039ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2270      	movs	r2, #112	; 0x70
 8003a04:	4393      	bics	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	05db      	lsls	r3, r3, #23
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d009      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a11      	ldr	r2, [pc, #68]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10c      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	4393      	bics	r3, r2
 8003a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2239      	movs	r2, #57	; 0x39
 8003a58:	2101      	movs	r1, #1
 8003a5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2238      	movs	r2, #56	; 0x38
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b004      	add	sp, #16
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	40010800 	.word	0x40010800
 8003a74:	40011400 	.word	0x40011400

08003a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e044      	b.n	8003b14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2278      	movs	r2, #120	; 0x78
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7fd fec1 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2224      	movs	r2, #36	; 0x24
 8003aa6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 f8d0 	bl	8003c60 <UART_SetConfig>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e024      	b.n	8003b14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fb47 	bl	8004168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	490d      	ldr	r1, [pc, #52]	; (8003b1c <HAL_UART_Init+0xa4>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	212a      	movs	r1, #42	; 0x2a
 8003af6:	438a      	bics	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 fbdf 	bl	80042d0 <UART_CheckIdleState>
 8003b12:	0003      	movs	r3, r0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	ffffb7ff 	.word	0xffffb7ff

08003b20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	1dbb      	adds	r3, r7, #6
 8003b2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d000      	beq.n	8003b3a <HAL_UART_Transmit+0x1a>
 8003b38:	e08c      	b.n	8003c54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_UART_Transmit+0x28>
 8003b40:	1dbb      	adds	r3, r7, #6
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e084      	b.n	8003c56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	015b      	lsls	r3, r3, #5
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d109      	bne.n	8003b6c <HAL_UART_Transmit+0x4c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2201      	movs	r2, #1
 8003b64:	4013      	ands	r3, r2
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e074      	b.n	8003c56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2284      	movs	r2, #132	; 0x84
 8003b70:	2100      	movs	r1, #0
 8003b72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2221      	movs	r2, #33	; 0x21
 8003b78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b7a:	f7fd ff97 	bl	8001aac <HAL_GetTick>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1dba      	adds	r2, r7, #6
 8003b86:	2150      	movs	r1, #80	; 0x50
 8003b88:	8812      	ldrh	r2, [r2, #0]
 8003b8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1dba      	adds	r2, r7, #6
 8003b90:	2152      	movs	r1, #82	; 0x52
 8003b92:	8812      	ldrh	r2, [r2, #0]
 8003b94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	015b      	lsls	r3, r3, #5
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d108      	bne.n	8003bb4 <HAL_UART_Transmit+0x94>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e003      	b.n	8003bbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bbc:	e02f      	b.n	8003c1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	0013      	movs	r3, r2
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	f000 fc28 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e03b      	b.n	8003c56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	001a      	movs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	05d2      	lsls	r2, r2, #23
 8003bf0:	0dd2      	lsrs	r2, r2, #23
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e007      	b.n	8003c0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2252      	movs	r2, #82	; 0x52
 8003c10:	5a9b      	ldrh	r3, [r3, r2]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b299      	uxth	r1, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2252      	movs	r2, #82	; 0x52
 8003c1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2252      	movs	r2, #82	; 0x52
 8003c22:	5a9b      	ldrh	r3, [r3, r2]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1c9      	bne.n	8003bbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	0013      	movs	r3, r2
 8003c34:	2200      	movs	r2, #0
 8003c36:	2140      	movs	r1, #64	; 0x40
 8003c38:	f000 fbf2 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d004      	beq.n	8003c4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e005      	b.n	8003c56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b008      	add	sp, #32
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c60:	b5b0      	push	{r4, r5, r7, lr}
 8003c62:	b08e      	sub	sp, #56	; 0x38
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c68:	231a      	movs	r3, #26
 8003c6a:	2218      	movs	r2, #24
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4ac6      	ldr	r2, [pc, #792]	; (8003fac <UART_SetConfig+0x34c>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4ac1      	ldr	r2, [pc, #772]	; (8003fb0 <UART_SetConfig+0x350>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4abb      	ldr	r2, [pc, #748]	; (8003fb4 <UART_SetConfig+0x354>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	4ab7      	ldr	r2, [pc, #732]	; (8003fb8 <UART_SetConfig+0x358>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	0019      	movs	r1, r3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4ab3      	ldr	r2, [pc, #716]	; (8003fbc <UART_SetConfig+0x35c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d131      	bne.n	8003d58 <UART_SetConfig+0xf8>
 8003cf4:	4bb2      	ldr	r3, [pc, #712]	; (8003fc0 <UART_SetConfig+0x360>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d01d      	beq.n	8003d3c <UART_SetConfig+0xdc>
 8003d00:	d823      	bhi.n	8003d4a <UART_SetConfig+0xea>
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d00c      	beq.n	8003d20 <UART_SetConfig+0xc0>
 8003d06:	d820      	bhi.n	8003d4a <UART_SetConfig+0xea>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <UART_SetConfig+0xb2>
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d00e      	beq.n	8003d2e <UART_SetConfig+0xce>
 8003d10:	e01b      	b.n	8003d4a <UART_SetConfig+0xea>
 8003d12:	231b      	movs	r3, #27
 8003d14:	2218      	movs	r2, #24
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	19db      	adds	r3, r3, r7
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e09c      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003d20:	231b      	movs	r3, #27
 8003d22:	2218      	movs	r2, #24
 8003d24:	189b      	adds	r3, r3, r2
 8003d26:	19db      	adds	r3, r3, r7
 8003d28:	2202      	movs	r2, #2
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	e095      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003d2e:	231b      	movs	r3, #27
 8003d30:	2218      	movs	r2, #24
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	19db      	adds	r3, r3, r7
 8003d36:	2204      	movs	r2, #4
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e08e      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003d3c:	231b      	movs	r3, #27
 8003d3e:	2218      	movs	r2, #24
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	19db      	adds	r3, r3, r7
 8003d44:	2208      	movs	r2, #8
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	e087      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003d4a:	231b      	movs	r3, #27
 8003d4c:	2218      	movs	r2, #24
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	19db      	adds	r3, r3, r7
 8003d52:	2210      	movs	r2, #16
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e080      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a99      	ldr	r2, [pc, #612]	; (8003fc4 <UART_SetConfig+0x364>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d131      	bne.n	8003dc6 <UART_SetConfig+0x166>
 8003d62:	4b97      	ldr	r3, [pc, #604]	; (8003fc0 <UART_SetConfig+0x360>)
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	220c      	movs	r2, #12
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d01d      	beq.n	8003daa <UART_SetConfig+0x14a>
 8003d6e:	d823      	bhi.n	8003db8 <UART_SetConfig+0x158>
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d00c      	beq.n	8003d8e <UART_SetConfig+0x12e>
 8003d74:	d820      	bhi.n	8003db8 <UART_SetConfig+0x158>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <UART_SetConfig+0x120>
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d00e      	beq.n	8003d9c <UART_SetConfig+0x13c>
 8003d7e:	e01b      	b.n	8003db8 <UART_SetConfig+0x158>
 8003d80:	231b      	movs	r3, #27
 8003d82:	2218      	movs	r2, #24
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	19db      	adds	r3, r3, r7
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e065      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003d8e:	231b      	movs	r3, #27
 8003d90:	2218      	movs	r2, #24
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	19db      	adds	r3, r3, r7
 8003d96:	2202      	movs	r2, #2
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e05e      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003d9c:	231b      	movs	r3, #27
 8003d9e:	2218      	movs	r2, #24
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	19db      	adds	r3, r3, r7
 8003da4:	2204      	movs	r2, #4
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e057      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003daa:	231b      	movs	r3, #27
 8003dac:	2218      	movs	r2, #24
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	19db      	adds	r3, r3, r7
 8003db2:	2208      	movs	r2, #8
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e050      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003db8:	231b      	movs	r3, #27
 8003dba:	2218      	movs	r2, #24
 8003dbc:	189b      	adds	r3, r3, r2
 8003dbe:	19db      	adds	r3, r3, r7
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e049      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a7a      	ldr	r2, [pc, #488]	; (8003fb4 <UART_SetConfig+0x354>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d13e      	bne.n	8003e4e <UART_SetConfig+0x1ee>
 8003dd0:	4b7b      	ldr	r3, [pc, #492]	; (8003fc0 <UART_SetConfig+0x360>)
 8003dd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dd4:	23c0      	movs	r3, #192	; 0xc0
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	4013      	ands	r3, r2
 8003dda:	22c0      	movs	r2, #192	; 0xc0
 8003ddc:	0112      	lsls	r2, r2, #4
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d027      	beq.n	8003e32 <UART_SetConfig+0x1d2>
 8003de2:	22c0      	movs	r2, #192	; 0xc0
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d82a      	bhi.n	8003e40 <UART_SetConfig+0x1e0>
 8003dea:	2280      	movs	r2, #128	; 0x80
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d011      	beq.n	8003e16 <UART_SetConfig+0x1b6>
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d822      	bhi.n	8003e40 <UART_SetConfig+0x1e0>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <UART_SetConfig+0x1a8>
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	00d2      	lsls	r2, r2, #3
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <UART_SetConfig+0x1c4>
 8003e06:	e01b      	b.n	8003e40 <UART_SetConfig+0x1e0>
 8003e08:	231b      	movs	r3, #27
 8003e0a:	2218      	movs	r2, #24
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	19db      	adds	r3, r3, r7
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e021      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003e16:	231b      	movs	r3, #27
 8003e18:	2218      	movs	r2, #24
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	19db      	adds	r3, r3, r7
 8003e1e:	2202      	movs	r2, #2
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e01a      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003e24:	231b      	movs	r3, #27
 8003e26:	2218      	movs	r2, #24
 8003e28:	189b      	adds	r3, r3, r2
 8003e2a:	19db      	adds	r3, r3, r7
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e013      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003e32:	231b      	movs	r3, #27
 8003e34:	2218      	movs	r2, #24
 8003e36:	189b      	adds	r3, r3, r2
 8003e38:	19db      	adds	r3, r3, r7
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e00c      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003e40:	231b      	movs	r3, #27
 8003e42:	2218      	movs	r2, #24
 8003e44:	189b      	adds	r3, r3, r2
 8003e46:	19db      	adds	r3, r3, r7
 8003e48:	2210      	movs	r2, #16
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e005      	b.n	8003e5a <UART_SetConfig+0x1fa>
 8003e4e:	231b      	movs	r3, #27
 8003e50:	2218      	movs	r2, #24
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	19db      	adds	r3, r3, r7
 8003e56:	2210      	movs	r2, #16
 8003e58:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a55      	ldr	r2, [pc, #340]	; (8003fb4 <UART_SetConfig+0x354>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d000      	beq.n	8003e66 <UART_SetConfig+0x206>
 8003e64:	e084      	b.n	8003f70 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e66:	231b      	movs	r3, #27
 8003e68:	2218      	movs	r2, #24
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	19db      	adds	r3, r3, r7
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d01d      	beq.n	8003eb0 <UART_SetConfig+0x250>
 8003e74:	dc20      	bgt.n	8003eb8 <UART_SetConfig+0x258>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d015      	beq.n	8003ea6 <UART_SetConfig+0x246>
 8003e7a:	dc1d      	bgt.n	8003eb8 <UART_SetConfig+0x258>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <UART_SetConfig+0x226>
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d005      	beq.n	8003e90 <UART_SetConfig+0x230>
 8003e84:	e018      	b.n	8003eb8 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e86:	f7ff f8bf 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e8e:	e01c      	b.n	8003eca <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e90:	4b4b      	ldr	r3, [pc, #300]	; (8003fc0 <UART_SetConfig+0x360>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2210      	movs	r2, #16
 8003e96:	4013      	ands	r3, r2
 8003e98:	d002      	beq.n	8003ea0 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e9a:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <UART_SetConfig+0x368>)
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e9e:	e014      	b.n	8003eca <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003ea0:	4b4a      	ldr	r3, [pc, #296]	; (8003fcc <UART_SetConfig+0x36c>)
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ea4:	e011      	b.n	8003eca <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe ffff 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003eae:	e00c      	b.n	8003eca <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003eb6:	e008      	b.n	8003eca <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003ebc:	231a      	movs	r3, #26
 8003ebe:	2218      	movs	r2, #24
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]
        break;
 8003ec8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d100      	bne.n	8003ed2 <UART_SetConfig+0x272>
 8003ed0:	e132      	b.n	8004138 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	0013      	movs	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d305      	bcc.n	8003eee <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d906      	bls.n	8003efc <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003eee:	231a      	movs	r3, #26
 8003ef0:	2218      	movs	r2, #24
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	19db      	adds	r3, r3, r7
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	e11d      	b.n	8004138 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	6939      	ldr	r1, [r7, #16]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	000b      	movs	r3, r1
 8003f0a:	0e1b      	lsrs	r3, r3, #24
 8003f0c:	0010      	movs	r0, r2
 8003f0e:	0205      	lsls	r5, r0, #8
 8003f10:	431d      	orrs	r5, r3
 8003f12:	000b      	movs	r3, r1
 8003f14:	021c      	lsls	r4, r3, #8
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	68b8      	ldr	r0, [r7, #8]
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	1900      	adds	r0, r0, r4
 8003f28:	4169      	adcs	r1, r5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	2300      	movs	r3, #0
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f7fc f984 	bl	8000244 <__aeabi_uldivmod>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	000b      	movs	r3, r1
 8003f40:	0013      	movs	r3, r2
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f46:	23c0      	movs	r3, #192	; 0xc0
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d309      	bcc.n	8003f62 <UART_SetConfig+0x302>
 8003f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	035b      	lsls	r3, r3, #13
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d204      	bcs.n	8003f62 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	e0ea      	b.n	8004138 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f62:	231a      	movs	r3, #26
 8003f64:	2218      	movs	r2, #24
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	19db      	adds	r3, r3, r7
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e0e3      	b.n	8004138 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d000      	beq.n	8003f7e <UART_SetConfig+0x31e>
 8003f7c:	e085      	b.n	800408a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003f7e:	231b      	movs	r3, #27
 8003f80:	2218      	movs	r2, #24
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	19db      	adds	r3, r3, r7
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d837      	bhi.n	8003ffc <UART_SetConfig+0x39c>
 8003f8c:	009a      	lsls	r2, r3, #2
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <UART_SetConfig+0x370>)
 8003f90:	18d3      	adds	r3, r2, r3
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f96:	f7ff f837 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f9e:	e036      	b.n	800400e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa0:	f7ff f848 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fa8:	e031      	b.n	800400e <UART_SetConfig+0x3ae>
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	efff69f3 	.word	0xefff69f3
 8003fb0:	ffffcfff 	.word	0xffffcfff
 8003fb4:	40004800 	.word	0x40004800
 8003fb8:	fffff4ff 	.word	0xfffff4ff
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40004400 	.word	0x40004400
 8003fc8:	003d0900 	.word	0x003d0900
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	08004ff4 	.word	0x08004ff4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fd4:	4b60      	ldr	r3, [pc, #384]	; (8004158 <UART_SetConfig+0x4f8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2210      	movs	r2, #16
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d002      	beq.n	8003fe4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003fde:	4b5f      	ldr	r3, [pc, #380]	; (800415c <UART_SetConfig+0x4fc>)
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003fe2:	e014      	b.n	800400e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b5e      	ldr	r3, [pc, #376]	; (8004160 <UART_SetConfig+0x500>)
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fe8:	e011      	b.n	800400e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fe ff5d 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ff2:	e00c      	b.n	800400e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ffa:	e008      	b.n	800400e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004000:	231a      	movs	r3, #26
 8004002:	2218      	movs	r2, #24
 8004004:	189b      	adds	r3, r3, r2
 8004006:	19db      	adds	r3, r3, r7
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
        break;
 800400c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d100      	bne.n	8004016 <UART_SetConfig+0x3b6>
 8004014:	e090      	b.n	8004138 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	005a      	lsls	r2, r3, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	18d2      	adds	r2, r2, r3
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	0019      	movs	r1, r3
 8004028:	0010      	movs	r0, r2
 800402a:	f7fc f87f 	bl	800012c <__udivsi3>
 800402e:	0003      	movs	r3, r0
 8004030:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	2b0f      	cmp	r3, #15
 8004036:	d921      	bls.n	800407c <UART_SetConfig+0x41c>
 8004038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	025b      	lsls	r3, r3, #9
 800403e:	429a      	cmp	r2, r3
 8004040:	d21c      	bcs.n	800407c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	b29a      	uxth	r2, r3
 8004046:	200e      	movs	r0, #14
 8004048:	2418      	movs	r4, #24
 800404a:	1903      	adds	r3, r0, r4
 800404c:	19db      	adds	r3, r3, r7
 800404e:	210f      	movs	r1, #15
 8004050:	438a      	bics	r2, r1
 8004052:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	b29b      	uxth	r3, r3
 800405a:	2207      	movs	r2, #7
 800405c:	4013      	ands	r3, r2
 800405e:	b299      	uxth	r1, r3
 8004060:	1903      	adds	r3, r0, r4
 8004062:	19db      	adds	r3, r3, r7
 8004064:	1902      	adds	r2, r0, r4
 8004066:	19d2      	adds	r2, r2, r7
 8004068:	8812      	ldrh	r2, [r2, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	1902      	adds	r2, r0, r4
 8004074:	19d2      	adds	r2, r2, r7
 8004076:	8812      	ldrh	r2, [r2, #0]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	e05d      	b.n	8004138 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800407c:	231a      	movs	r3, #26
 800407e:	2218      	movs	r2, #24
 8004080:	189b      	adds	r3, r3, r2
 8004082:	19db      	adds	r3, r3, r7
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e056      	b.n	8004138 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800408a:	231b      	movs	r3, #27
 800408c:	2218      	movs	r2, #24
 800408e:	189b      	adds	r3, r3, r2
 8004090:	19db      	adds	r3, r3, r7
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d822      	bhi.n	80040de <UART_SetConfig+0x47e>
 8004098:	009a      	lsls	r2, r3, #2
 800409a:	4b32      	ldr	r3, [pc, #200]	; (8004164 <UART_SetConfig+0x504>)
 800409c:	18d3      	adds	r3, r2, r3
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a2:	f7fe ffb1 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 80040a6:	0003      	movs	r3, r0
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040aa:	e021      	b.n	80040f0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7fe ffc2 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
 80040b0:	0003      	movs	r3, r0
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040b4:	e01c      	b.n	80040f0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <UART_SetConfig+0x4f8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2210      	movs	r2, #16
 80040bc:	4013      	ands	r3, r2
 80040be:	d002      	beq.n	80040c6 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80040c0:	4b26      	ldr	r3, [pc, #152]	; (800415c <UART_SetConfig+0x4fc>)
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80040c4:	e014      	b.n	80040f0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <UART_SetConfig+0x500>)
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040ca:	e011      	b.n	80040f0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040cc:	f7fe feec 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 80040d0:	0003      	movs	r3, r0
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040d4:	e00c      	b.n	80040f0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040dc:	e008      	b.n	80040f0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80040e2:	231a      	movs	r3, #26
 80040e4:	2218      	movs	r2, #24
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	19db      	adds	r3, r3, r7
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
        break;
 80040ee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d020      	beq.n	8004138 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	085a      	lsrs	r2, r3, #1
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	18d2      	adds	r2, r2, r3
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0019      	movs	r1, r3
 8004106:	0010      	movs	r0, r2
 8004108:	f7fc f810 	bl	800012c <__udivsi3>
 800410c:	0003      	movs	r3, r0
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	2b0f      	cmp	r3, #15
 8004114:	d90a      	bls.n	800412c <UART_SetConfig+0x4cc>
 8004116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	025b      	lsls	r3, r3, #9
 800411c:	429a      	cmp	r2, r3
 800411e:	d205      	bcs.n	800412c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	b29a      	uxth	r2, r3
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	e005      	b.n	8004138 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800412c:	231a      	movs	r3, #26
 800412e:	2218      	movs	r2, #24
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2200      	movs	r2, #0
 800413c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2200      	movs	r2, #0
 8004142:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004144:	231a      	movs	r3, #26
 8004146:	2218      	movs	r2, #24
 8004148:	189b      	adds	r3, r3, r2
 800414a:	19db      	adds	r3, r3, r7
 800414c:	781b      	ldrb	r3, [r3, #0]
}
 800414e:	0018      	movs	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	b00e      	add	sp, #56	; 0x38
 8004154:	bdb0      	pop	{r4, r5, r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	40021000 	.word	0x40021000
 800415c:	003d0900 	.word	0x003d0900
 8004160:	00f42400 	.word	0x00f42400
 8004164:	08005018 	.word	0x08005018

08004168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2201      	movs	r2, #1
 8004176:	4013      	ands	r3, r2
 8004178:	d00b      	beq.n	8004192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a4a      	ldr	r2, [pc, #296]	; (80042ac <UART_AdvFeatureConfig+0x144>)
 8004182:	4013      	ands	r3, r2
 8004184:	0019      	movs	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2202      	movs	r2, #2
 8004198:	4013      	ands	r3, r2
 800419a:	d00b      	beq.n	80041b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4a43      	ldr	r2, [pc, #268]	; (80042b0 <UART_AdvFeatureConfig+0x148>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2204      	movs	r2, #4
 80041ba:	4013      	ands	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a3b      	ldr	r2, [pc, #236]	; (80042b4 <UART_AdvFeatureConfig+0x14c>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2208      	movs	r2, #8
 80041dc:	4013      	ands	r3, r2
 80041de:	d00b      	beq.n	80041f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <UART_AdvFeatureConfig+0x150>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2210      	movs	r2, #16
 80041fe:	4013      	ands	r3, r2
 8004200:	d00b      	beq.n	800421a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <UART_AdvFeatureConfig+0x154>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2220      	movs	r2, #32
 8004220:	4013      	ands	r3, r2
 8004222:	d00b      	beq.n	800423c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <UART_AdvFeatureConfig+0x158>)
 800422c:	4013      	ands	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	2240      	movs	r2, #64	; 0x40
 8004242:	4013      	ands	r3, r2
 8004244:	d01d      	beq.n	8004282 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <UART_AdvFeatureConfig+0x15c>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	035b      	lsls	r3, r3, #13
 8004266:	429a      	cmp	r2, r3
 8004268:	d10b      	bne.n	8004282 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <UART_AdvFeatureConfig+0x160>)
 8004272:	4013      	ands	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2280      	movs	r2, #128	; 0x80
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <UART_AdvFeatureConfig+0x164>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }
}
 80042a4:	46c0      	nop			; (mov r8, r8)
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b002      	add	sp, #8
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	fffdffff 	.word	0xfffdffff
 80042b0:	fffeffff 	.word	0xfffeffff
 80042b4:	fffbffff 	.word	0xfffbffff
 80042b8:	ffff7fff 	.word	0xffff7fff
 80042bc:	ffffefff 	.word	0xffffefff
 80042c0:	ffffdfff 	.word	0xffffdfff
 80042c4:	ffefffff 	.word	0xffefffff
 80042c8:	ff9fffff 	.word	0xff9fffff
 80042cc:	fff7ffff 	.word	0xfff7ffff

080042d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b092      	sub	sp, #72	; 0x48
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2284      	movs	r2, #132	; 0x84
 80042dc:	2100      	movs	r1, #0
 80042de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e0:	f7fd fbe4 	bl	8001aac <HAL_GetTick>
 80042e4:	0003      	movs	r3, r0
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2208      	movs	r2, #8
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d12c      	bne.n	8004350 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f8:	2280      	movs	r2, #128	; 0x80
 80042fa:	0391      	lsls	r1, r2, #14
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4a46      	ldr	r2, [pc, #280]	; (8004418 <UART_CheckIdleState+0x148>)
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	f000 f88c 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d021      	beq.n	8004350 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430c:	f3ef 8310 	mrs	r3, PRIMASK
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
 8004316:	2301      	movs	r3, #1
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	438a      	bics	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2278      	movs	r2, #120	; 0x78
 8004348:	2100      	movs	r1, #0
 800434a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e05f      	b.n	8004410 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2204      	movs	r2, #4
 8004358:	4013      	ands	r3, r2
 800435a:	2b04      	cmp	r3, #4
 800435c:	d146      	bne.n	80043ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	03d1      	lsls	r1, r2, #15
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4a2c      	ldr	r2, [pc, #176]	; (8004418 <UART_CheckIdleState+0x148>)
 8004368:	9200      	str	r2, [sp, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	f000 f858 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d03b      	beq.n	80043ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	60fb      	str	r3, [r7, #12]
  return(result);
 800437a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
 800437e:	2301      	movs	r3, #1
 8004380:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4921      	ldr	r1, [pc, #132]	; (800441c <UART_CheckIdleState+0x14c>)
 8004396:	400a      	ands	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a6:	f3ef 8310 	mrs	r3, PRIMASK
 80043aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80043ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
 80043b0:	2301      	movs	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2101      	movs	r1, #1
 80043c8:	438a      	bics	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	2120      	movs	r1, #32
 80043de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2278      	movs	r2, #120	; 0x78
 80043e4:	2100      	movs	r1, #0
 80043e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e011      	b.n	8004410 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	2120      	movs	r1, #32
 80043f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2278      	movs	r2, #120	; 0x78
 800440a:	2100      	movs	r1, #0
 800440c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b010      	add	sp, #64	; 0x40
 8004416:	bd80      	pop	{r7, pc}
 8004418:	01ffffff 	.word	0x01ffffff
 800441c:	fffffedf 	.word	0xfffffedf

08004420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	1dfb      	adds	r3, r7, #7
 800442e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004430:	e04b      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	3301      	adds	r3, #1
 8004436:	d048      	beq.n	80044ca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004438:	f7fd fb38 	bl	8001aac <HAL_GetTick>
 800443c:	0002      	movs	r2, r0
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	429a      	cmp	r2, r3
 8004446:	d302      	bcc.n	800444e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04b      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2204      	movs	r2, #4
 800445a:	4013      	ands	r3, r2
 800445c:	d035      	beq.n	80044ca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	2208      	movs	r2, #8
 8004466:	4013      	ands	r3, r2
 8004468:	2b08      	cmp	r3, #8
 800446a:	d111      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2208      	movs	r2, #8
 8004472:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	0018      	movs	r0, r3
 8004478:	f000 f83c 	bl	80044f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2284      	movs	r2, #132	; 0x84
 8004480:	2108      	movs	r1, #8
 8004482:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2278      	movs	r2, #120	; 0x78
 8004488:	2100      	movs	r1, #0
 800448a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e02c      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	401a      	ands	r2, r3
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d112      	bne.n	80044ca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2280      	movs	r2, #128	; 0x80
 80044aa:	0112      	lsls	r2, r2, #4
 80044ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f000 f81f 	bl	80044f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2284      	movs	r2, #132	; 0x84
 80044ba:	2120      	movs	r1, #32
 80044bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2278      	movs	r2, #120	; 0x78
 80044c2:	2100      	movs	r1, #0
 80044c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e00f      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	425a      	negs	r2, r3
 80044da:	4153      	adcs	r3, r2
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	001a      	movs	r2, r3
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d0a4      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08e      	sub	sp, #56	; 0x38
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004500:	617b      	str	r3, [r7, #20]
  return(result);
 8004502:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
 8004506:	2301      	movs	r3, #1
 8004508:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f383 8810 	msr	PRIMASK, r3
}
 8004510:	46c0      	nop			; (mov r8, r8)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4926      	ldr	r1, [pc, #152]	; (80045b8 <UART_EndRxTransfer+0xc4>)
 800451e:	400a      	ands	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004524:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f383 8810 	msr	PRIMASK, r3
}
 800452c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452e:	f3ef 8310 	mrs	r3, PRIMASK
 8004532:	623b      	str	r3, [r7, #32]
  return(result);
 8004534:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
 8004538:	2301      	movs	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	f383 8810 	msr	PRIMASK, r3
}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2101      	movs	r1, #1
 8004550:	438a      	bics	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004564:	2b01      	cmp	r3, #1
 8004566:	d118      	bne.n	800459a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004568:	f3ef 8310 	mrs	r3, PRIMASK
 800456c:	60bb      	str	r3, [r7, #8]
  return(result);
 800456e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004572:	2301      	movs	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f383 8810 	msr	PRIMASK, r3
}
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2110      	movs	r1, #16
 800458a:	438a      	bics	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	2120      	movs	r1, #32
 80045a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b00e      	add	sp, #56	; 0x38
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	fffffedf 	.word	0xfffffedf

080045bc <__errno>:
 80045bc:	4b01      	ldr	r3, [pc, #4]	; (80045c4 <__errno+0x8>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	4770      	bx	lr
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	2000000c 	.word	0x2000000c

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	2600      	movs	r6, #0
 80045cc:	4d0c      	ldr	r5, [pc, #48]	; (8004600 <__libc_init_array+0x38>)
 80045ce:	4c0d      	ldr	r4, [pc, #52]	; (8004604 <__libc_init_array+0x3c>)
 80045d0:	1b64      	subs	r4, r4, r5
 80045d2:	10a4      	asrs	r4, r4, #2
 80045d4:	42a6      	cmp	r6, r4
 80045d6:	d109      	bne.n	80045ec <__libc_init_array+0x24>
 80045d8:	2600      	movs	r6, #0
 80045da:	f000 fc8b 	bl	8004ef4 <_init>
 80045de:	4d0a      	ldr	r5, [pc, #40]	; (8004608 <__libc_init_array+0x40>)
 80045e0:	4c0a      	ldr	r4, [pc, #40]	; (800460c <__libc_init_array+0x44>)
 80045e2:	1b64      	subs	r4, r4, r5
 80045e4:	10a4      	asrs	r4, r4, #2
 80045e6:	42a6      	cmp	r6, r4
 80045e8:	d105      	bne.n	80045f6 <__libc_init_array+0x2e>
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	00b3      	lsls	r3, r6, #2
 80045ee:	58eb      	ldr	r3, [r5, r3]
 80045f0:	4798      	blx	r3
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7ee      	b.n	80045d4 <__libc_init_array+0xc>
 80045f6:	00b3      	lsls	r3, r6, #2
 80045f8:	58eb      	ldr	r3, [r5, r3]
 80045fa:	4798      	blx	r3
 80045fc:	3601      	adds	r6, #1
 80045fe:	e7f2      	b.n	80045e6 <__libc_init_array+0x1e>
 8004600:	08005078 	.word	0x08005078
 8004604:	08005078 	.word	0x08005078
 8004608:	08005078 	.word	0x08005078
 800460c:	0800507c 	.word	0x0800507c

08004610 <memset>:
 8004610:	0003      	movs	r3, r0
 8004612:	1882      	adds	r2, r0, r2
 8004614:	4293      	cmp	r3, r2
 8004616:	d100      	bne.n	800461a <memset+0xa>
 8004618:	4770      	bx	lr
 800461a:	7019      	strb	r1, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	e7f9      	b.n	8004614 <memset+0x4>

08004620 <siprintf>:
 8004620:	b40e      	push	{r1, r2, r3}
 8004622:	b500      	push	{lr}
 8004624:	490b      	ldr	r1, [pc, #44]	; (8004654 <siprintf+0x34>)
 8004626:	b09c      	sub	sp, #112	; 0x70
 8004628:	ab1d      	add	r3, sp, #116	; 0x74
 800462a:	9002      	str	r0, [sp, #8]
 800462c:	9006      	str	r0, [sp, #24]
 800462e:	9107      	str	r1, [sp, #28]
 8004630:	9104      	str	r1, [sp, #16]
 8004632:	4809      	ldr	r0, [pc, #36]	; (8004658 <siprintf+0x38>)
 8004634:	4909      	ldr	r1, [pc, #36]	; (800465c <siprintf+0x3c>)
 8004636:	cb04      	ldmia	r3!, {r2}
 8004638:	9105      	str	r1, [sp, #20]
 800463a:	6800      	ldr	r0, [r0, #0]
 800463c:	a902      	add	r1, sp, #8
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	f000 f870 	bl	8004724 <_svfiprintf_r>
 8004644:	2300      	movs	r3, #0
 8004646:	9a02      	ldr	r2, [sp, #8]
 8004648:	7013      	strb	r3, [r2, #0]
 800464a:	b01c      	add	sp, #112	; 0x70
 800464c:	bc08      	pop	{r3}
 800464e:	b003      	add	sp, #12
 8004650:	4718      	bx	r3
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	7fffffff 	.word	0x7fffffff
 8004658:	2000000c 	.word	0x2000000c
 800465c:	ffff0208 	.word	0xffff0208

08004660 <__ssputs_r>:
 8004660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004662:	688e      	ldr	r6, [r1, #8]
 8004664:	b085      	sub	sp, #20
 8004666:	0007      	movs	r7, r0
 8004668:	000c      	movs	r4, r1
 800466a:	9203      	str	r2, [sp, #12]
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	429e      	cmp	r6, r3
 8004670:	d83c      	bhi.n	80046ec <__ssputs_r+0x8c>
 8004672:	2390      	movs	r3, #144	; 0x90
 8004674:	898a      	ldrh	r2, [r1, #12]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	421a      	tst	r2, r3
 800467a:	d034      	beq.n	80046e6 <__ssputs_r+0x86>
 800467c:	6909      	ldr	r1, [r1, #16]
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	6960      	ldr	r0, [r4, #20]
 8004682:	1a5b      	subs	r3, r3, r1
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	2303      	movs	r3, #3
 8004688:	4343      	muls	r3, r0
 800468a:	0fdd      	lsrs	r5, r3, #31
 800468c:	18ed      	adds	r5, r5, r3
 800468e:	9b01      	ldr	r3, [sp, #4]
 8004690:	9802      	ldr	r0, [sp, #8]
 8004692:	3301      	adds	r3, #1
 8004694:	181b      	adds	r3, r3, r0
 8004696:	106d      	asrs	r5, r5, #1
 8004698:	42ab      	cmp	r3, r5
 800469a:	d900      	bls.n	800469e <__ssputs_r+0x3e>
 800469c:	001d      	movs	r5, r3
 800469e:	0553      	lsls	r3, r2, #21
 80046a0:	d532      	bpl.n	8004708 <__ssputs_r+0xa8>
 80046a2:	0029      	movs	r1, r5
 80046a4:	0038      	movs	r0, r7
 80046a6:	f000 fb53 	bl	8004d50 <_malloc_r>
 80046aa:	1e06      	subs	r6, r0, #0
 80046ac:	d109      	bne.n	80046c2 <__ssputs_r+0x62>
 80046ae:	230c      	movs	r3, #12
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	2340      	movs	r3, #64	; 0x40
 80046b4:	2001      	movs	r0, #1
 80046b6:	89a2      	ldrh	r2, [r4, #12]
 80046b8:	4240      	negs	r0, r0
 80046ba:	4313      	orrs	r3, r2
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	b005      	add	sp, #20
 80046c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c2:	9a02      	ldr	r2, [sp, #8]
 80046c4:	6921      	ldr	r1, [r4, #16]
 80046c6:	f000 faba 	bl	8004c3e <memcpy>
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	4a14      	ldr	r2, [pc, #80]	; (8004720 <__ssputs_r+0xc0>)
 80046ce:	401a      	ands	r2, r3
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	4313      	orrs	r3, r2
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	9b02      	ldr	r3, [sp, #8]
 80046d8:	6126      	str	r6, [r4, #16]
 80046da:	18f6      	adds	r6, r6, r3
 80046dc:	6026      	str	r6, [r4, #0]
 80046de:	6165      	str	r5, [r4, #20]
 80046e0:	9e01      	ldr	r6, [sp, #4]
 80046e2:	1aed      	subs	r5, r5, r3
 80046e4:	60a5      	str	r5, [r4, #8]
 80046e6:	9b01      	ldr	r3, [sp, #4]
 80046e8:	429e      	cmp	r6, r3
 80046ea:	d900      	bls.n	80046ee <__ssputs_r+0x8e>
 80046ec:	9e01      	ldr	r6, [sp, #4]
 80046ee:	0032      	movs	r2, r6
 80046f0:	9903      	ldr	r1, [sp, #12]
 80046f2:	6820      	ldr	r0, [r4, #0]
 80046f4:	f000 faac 	bl	8004c50 <memmove>
 80046f8:	68a3      	ldr	r3, [r4, #8]
 80046fa:	2000      	movs	r0, #0
 80046fc:	1b9b      	subs	r3, r3, r6
 80046fe:	60a3      	str	r3, [r4, #8]
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	199e      	adds	r6, r3, r6
 8004704:	6026      	str	r6, [r4, #0]
 8004706:	e7da      	b.n	80046be <__ssputs_r+0x5e>
 8004708:	002a      	movs	r2, r5
 800470a:	0038      	movs	r0, r7
 800470c:	f000 fb96 	bl	8004e3c <_realloc_r>
 8004710:	1e06      	subs	r6, r0, #0
 8004712:	d1e0      	bne.n	80046d6 <__ssputs_r+0x76>
 8004714:	0038      	movs	r0, r7
 8004716:	6921      	ldr	r1, [r4, #16]
 8004718:	f000 faae 	bl	8004c78 <_free_r>
 800471c:	e7c7      	b.n	80046ae <__ssputs_r+0x4e>
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	fffffb7f 	.word	0xfffffb7f

08004724 <_svfiprintf_r>:
 8004724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004726:	b0a1      	sub	sp, #132	; 0x84
 8004728:	9003      	str	r0, [sp, #12]
 800472a:	001d      	movs	r5, r3
 800472c:	898b      	ldrh	r3, [r1, #12]
 800472e:	000f      	movs	r7, r1
 8004730:	0016      	movs	r6, r2
 8004732:	061b      	lsls	r3, r3, #24
 8004734:	d511      	bpl.n	800475a <_svfiprintf_r+0x36>
 8004736:	690b      	ldr	r3, [r1, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10e      	bne.n	800475a <_svfiprintf_r+0x36>
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	f000 fb07 	bl	8004d50 <_malloc_r>
 8004742:	6038      	str	r0, [r7, #0]
 8004744:	6138      	str	r0, [r7, #16]
 8004746:	2800      	cmp	r0, #0
 8004748:	d105      	bne.n	8004756 <_svfiprintf_r+0x32>
 800474a:	230c      	movs	r3, #12
 800474c:	9a03      	ldr	r2, [sp, #12]
 800474e:	3801      	subs	r0, #1
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	b021      	add	sp, #132	; 0x84
 8004754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004756:	2340      	movs	r3, #64	; 0x40
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	2300      	movs	r3, #0
 800475c:	ac08      	add	r4, sp, #32
 800475e:	6163      	str	r3, [r4, #20]
 8004760:	3320      	adds	r3, #32
 8004762:	7663      	strb	r3, [r4, #25]
 8004764:	3310      	adds	r3, #16
 8004766:	76a3      	strb	r3, [r4, #26]
 8004768:	9507      	str	r5, [sp, #28]
 800476a:	0035      	movs	r5, r6
 800476c:	782b      	ldrb	r3, [r5, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <_svfiprintf_r+0x52>
 8004772:	2b25      	cmp	r3, #37	; 0x25
 8004774:	d147      	bne.n	8004806 <_svfiprintf_r+0xe2>
 8004776:	1bab      	subs	r3, r5, r6
 8004778:	9305      	str	r3, [sp, #20]
 800477a:	42b5      	cmp	r5, r6
 800477c:	d00c      	beq.n	8004798 <_svfiprintf_r+0x74>
 800477e:	0032      	movs	r2, r6
 8004780:	0039      	movs	r1, r7
 8004782:	9803      	ldr	r0, [sp, #12]
 8004784:	f7ff ff6c 	bl	8004660 <__ssputs_r>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d100      	bne.n	800478e <_svfiprintf_r+0x6a>
 800478c:	e0ae      	b.n	80048ec <_svfiprintf_r+0x1c8>
 800478e:	6962      	ldr	r2, [r4, #20]
 8004790:	9b05      	ldr	r3, [sp, #20]
 8004792:	4694      	mov	ip, r2
 8004794:	4463      	add	r3, ip
 8004796:	6163      	str	r3, [r4, #20]
 8004798:	782b      	ldrb	r3, [r5, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <_svfiprintf_r+0x7c>
 800479e:	e0a5      	b.n	80048ec <_svfiprintf_r+0x1c8>
 80047a0:	2201      	movs	r2, #1
 80047a2:	2300      	movs	r3, #0
 80047a4:	4252      	negs	r2, r2
 80047a6:	6062      	str	r2, [r4, #4]
 80047a8:	a904      	add	r1, sp, #16
 80047aa:	3254      	adds	r2, #84	; 0x54
 80047ac:	1852      	adds	r2, r2, r1
 80047ae:	1c6e      	adds	r6, r5, #1
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	60e3      	str	r3, [r4, #12]
 80047b4:	60a3      	str	r3, [r4, #8]
 80047b6:	7013      	strb	r3, [r2, #0]
 80047b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80047ba:	2205      	movs	r2, #5
 80047bc:	7831      	ldrb	r1, [r6, #0]
 80047be:	4854      	ldr	r0, [pc, #336]	; (8004910 <_svfiprintf_r+0x1ec>)
 80047c0:	f000 fa32 	bl	8004c28 <memchr>
 80047c4:	1c75      	adds	r5, r6, #1
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d11f      	bne.n	800480a <_svfiprintf_r+0xe6>
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	06d3      	lsls	r3, r2, #27
 80047ce:	d504      	bpl.n	80047da <_svfiprintf_r+0xb6>
 80047d0:	2353      	movs	r3, #83	; 0x53
 80047d2:	a904      	add	r1, sp, #16
 80047d4:	185b      	adds	r3, r3, r1
 80047d6:	2120      	movs	r1, #32
 80047d8:	7019      	strb	r1, [r3, #0]
 80047da:	0713      	lsls	r3, r2, #28
 80047dc:	d504      	bpl.n	80047e8 <_svfiprintf_r+0xc4>
 80047de:	2353      	movs	r3, #83	; 0x53
 80047e0:	a904      	add	r1, sp, #16
 80047e2:	185b      	adds	r3, r3, r1
 80047e4:	212b      	movs	r1, #43	; 0x2b
 80047e6:	7019      	strb	r1, [r3, #0]
 80047e8:	7833      	ldrb	r3, [r6, #0]
 80047ea:	2b2a      	cmp	r3, #42	; 0x2a
 80047ec:	d016      	beq.n	800481c <_svfiprintf_r+0xf8>
 80047ee:	0035      	movs	r5, r6
 80047f0:	2100      	movs	r1, #0
 80047f2:	200a      	movs	r0, #10
 80047f4:	68e3      	ldr	r3, [r4, #12]
 80047f6:	782a      	ldrb	r2, [r5, #0]
 80047f8:	1c6e      	adds	r6, r5, #1
 80047fa:	3a30      	subs	r2, #48	; 0x30
 80047fc:	2a09      	cmp	r2, #9
 80047fe:	d94e      	bls.n	800489e <_svfiprintf_r+0x17a>
 8004800:	2900      	cmp	r1, #0
 8004802:	d111      	bne.n	8004828 <_svfiprintf_r+0x104>
 8004804:	e017      	b.n	8004836 <_svfiprintf_r+0x112>
 8004806:	3501      	adds	r5, #1
 8004808:	e7b0      	b.n	800476c <_svfiprintf_r+0x48>
 800480a:	4b41      	ldr	r3, [pc, #260]	; (8004910 <_svfiprintf_r+0x1ec>)
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	1ac0      	subs	r0, r0, r3
 8004810:	2301      	movs	r3, #1
 8004812:	4083      	lsls	r3, r0
 8004814:	4313      	orrs	r3, r2
 8004816:	002e      	movs	r6, r5
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	e7ce      	b.n	80047ba <_svfiprintf_r+0x96>
 800481c:	9b07      	ldr	r3, [sp, #28]
 800481e:	1d19      	adds	r1, r3, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	9107      	str	r1, [sp, #28]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db01      	blt.n	800482c <_svfiprintf_r+0x108>
 8004828:	930b      	str	r3, [sp, #44]	; 0x2c
 800482a:	e004      	b.n	8004836 <_svfiprintf_r+0x112>
 800482c:	425b      	negs	r3, r3
 800482e:	60e3      	str	r3, [r4, #12]
 8004830:	2302      	movs	r3, #2
 8004832:	4313      	orrs	r3, r2
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	782b      	ldrb	r3, [r5, #0]
 8004838:	2b2e      	cmp	r3, #46	; 0x2e
 800483a:	d10a      	bne.n	8004852 <_svfiprintf_r+0x12e>
 800483c:	786b      	ldrb	r3, [r5, #1]
 800483e:	2b2a      	cmp	r3, #42	; 0x2a
 8004840:	d135      	bne.n	80048ae <_svfiprintf_r+0x18a>
 8004842:	9b07      	ldr	r3, [sp, #28]
 8004844:	3502      	adds	r5, #2
 8004846:	1d1a      	adds	r2, r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	9207      	str	r2, [sp, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	db2b      	blt.n	80048a8 <_svfiprintf_r+0x184>
 8004850:	9309      	str	r3, [sp, #36]	; 0x24
 8004852:	4e30      	ldr	r6, [pc, #192]	; (8004914 <_svfiprintf_r+0x1f0>)
 8004854:	2203      	movs	r2, #3
 8004856:	0030      	movs	r0, r6
 8004858:	7829      	ldrb	r1, [r5, #0]
 800485a:	f000 f9e5 	bl	8004c28 <memchr>
 800485e:	2800      	cmp	r0, #0
 8004860:	d006      	beq.n	8004870 <_svfiprintf_r+0x14c>
 8004862:	2340      	movs	r3, #64	; 0x40
 8004864:	1b80      	subs	r0, r0, r6
 8004866:	4083      	lsls	r3, r0
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	3501      	adds	r5, #1
 800486c:	4313      	orrs	r3, r2
 800486e:	6023      	str	r3, [r4, #0]
 8004870:	7829      	ldrb	r1, [r5, #0]
 8004872:	2206      	movs	r2, #6
 8004874:	4828      	ldr	r0, [pc, #160]	; (8004918 <_svfiprintf_r+0x1f4>)
 8004876:	1c6e      	adds	r6, r5, #1
 8004878:	7621      	strb	r1, [r4, #24]
 800487a:	f000 f9d5 	bl	8004c28 <memchr>
 800487e:	2800      	cmp	r0, #0
 8004880:	d03c      	beq.n	80048fc <_svfiprintf_r+0x1d8>
 8004882:	4b26      	ldr	r3, [pc, #152]	; (800491c <_svfiprintf_r+0x1f8>)
 8004884:	2b00      	cmp	r3, #0
 8004886:	d125      	bne.n	80048d4 <_svfiprintf_r+0x1b0>
 8004888:	2207      	movs	r2, #7
 800488a:	9b07      	ldr	r3, [sp, #28]
 800488c:	3307      	adds	r3, #7
 800488e:	4393      	bics	r3, r2
 8004890:	3308      	adds	r3, #8
 8004892:	9307      	str	r3, [sp, #28]
 8004894:	6963      	ldr	r3, [r4, #20]
 8004896:	9a04      	ldr	r2, [sp, #16]
 8004898:	189b      	adds	r3, r3, r2
 800489a:	6163      	str	r3, [r4, #20]
 800489c:	e765      	b.n	800476a <_svfiprintf_r+0x46>
 800489e:	4343      	muls	r3, r0
 80048a0:	0035      	movs	r5, r6
 80048a2:	2101      	movs	r1, #1
 80048a4:	189b      	adds	r3, r3, r2
 80048a6:	e7a6      	b.n	80047f6 <_svfiprintf_r+0xd2>
 80048a8:	2301      	movs	r3, #1
 80048aa:	425b      	negs	r3, r3
 80048ac:	e7d0      	b.n	8004850 <_svfiprintf_r+0x12c>
 80048ae:	2300      	movs	r3, #0
 80048b0:	200a      	movs	r0, #10
 80048b2:	001a      	movs	r2, r3
 80048b4:	3501      	adds	r5, #1
 80048b6:	6063      	str	r3, [r4, #4]
 80048b8:	7829      	ldrb	r1, [r5, #0]
 80048ba:	1c6e      	adds	r6, r5, #1
 80048bc:	3930      	subs	r1, #48	; 0x30
 80048be:	2909      	cmp	r1, #9
 80048c0:	d903      	bls.n	80048ca <_svfiprintf_r+0x1a6>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0c5      	beq.n	8004852 <_svfiprintf_r+0x12e>
 80048c6:	9209      	str	r2, [sp, #36]	; 0x24
 80048c8:	e7c3      	b.n	8004852 <_svfiprintf_r+0x12e>
 80048ca:	4342      	muls	r2, r0
 80048cc:	0035      	movs	r5, r6
 80048ce:	2301      	movs	r3, #1
 80048d0:	1852      	adds	r2, r2, r1
 80048d2:	e7f1      	b.n	80048b8 <_svfiprintf_r+0x194>
 80048d4:	ab07      	add	r3, sp, #28
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	003a      	movs	r2, r7
 80048da:	0021      	movs	r1, r4
 80048dc:	4b10      	ldr	r3, [pc, #64]	; (8004920 <_svfiprintf_r+0x1fc>)
 80048de:	9803      	ldr	r0, [sp, #12]
 80048e0:	e000      	b.n	80048e4 <_svfiprintf_r+0x1c0>
 80048e2:	bf00      	nop
 80048e4:	9004      	str	r0, [sp, #16]
 80048e6:	9b04      	ldr	r3, [sp, #16]
 80048e8:	3301      	adds	r3, #1
 80048ea:	d1d3      	bne.n	8004894 <_svfiprintf_r+0x170>
 80048ec:	89bb      	ldrh	r3, [r7, #12]
 80048ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80048f0:	065b      	lsls	r3, r3, #25
 80048f2:	d400      	bmi.n	80048f6 <_svfiprintf_r+0x1d2>
 80048f4:	e72d      	b.n	8004752 <_svfiprintf_r+0x2e>
 80048f6:	2001      	movs	r0, #1
 80048f8:	4240      	negs	r0, r0
 80048fa:	e72a      	b.n	8004752 <_svfiprintf_r+0x2e>
 80048fc:	ab07      	add	r3, sp, #28
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	003a      	movs	r2, r7
 8004902:	0021      	movs	r1, r4
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <_svfiprintf_r+0x1fc>)
 8004906:	9803      	ldr	r0, [sp, #12]
 8004908:	f000 f87c 	bl	8004a04 <_printf_i>
 800490c:	e7ea      	b.n	80048e4 <_svfiprintf_r+0x1c0>
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	0800503c 	.word	0x0800503c
 8004914:	08005042 	.word	0x08005042
 8004918:	08005046 	.word	0x08005046
 800491c:	00000000 	.word	0x00000000
 8004920:	08004661 	.word	0x08004661

08004924 <_printf_common>:
 8004924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004926:	0015      	movs	r5, r2
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	688a      	ldr	r2, [r1, #8]
 800492c:	690b      	ldr	r3, [r1, #16]
 800492e:	000c      	movs	r4, r1
 8004930:	9000      	str	r0, [sp, #0]
 8004932:	4293      	cmp	r3, r2
 8004934:	da00      	bge.n	8004938 <_printf_common+0x14>
 8004936:	0013      	movs	r3, r2
 8004938:	0022      	movs	r2, r4
 800493a:	602b      	str	r3, [r5, #0]
 800493c:	3243      	adds	r2, #67	; 0x43
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	2a00      	cmp	r2, #0
 8004942:	d001      	beq.n	8004948 <_printf_common+0x24>
 8004944:	3301      	adds	r3, #1
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	069b      	lsls	r3, r3, #26
 800494c:	d502      	bpl.n	8004954 <_printf_common+0x30>
 800494e:	682b      	ldr	r3, [r5, #0]
 8004950:	3302      	adds	r3, #2
 8004952:	602b      	str	r3, [r5, #0]
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	2306      	movs	r3, #6
 8004958:	0017      	movs	r7, r2
 800495a:	401f      	ands	r7, r3
 800495c:	421a      	tst	r2, r3
 800495e:	d027      	beq.n	80049b0 <_printf_common+0x8c>
 8004960:	0023      	movs	r3, r4
 8004962:	3343      	adds	r3, #67	; 0x43
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	1e5a      	subs	r2, r3, #1
 8004968:	4193      	sbcs	r3, r2
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	0692      	lsls	r2, r2, #26
 800496e:	d430      	bmi.n	80049d2 <_printf_common+0xae>
 8004970:	0022      	movs	r2, r4
 8004972:	9901      	ldr	r1, [sp, #4]
 8004974:	9800      	ldr	r0, [sp, #0]
 8004976:	9e08      	ldr	r6, [sp, #32]
 8004978:	3243      	adds	r2, #67	; 0x43
 800497a:	47b0      	blx	r6
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d025      	beq.n	80049cc <_printf_common+0xa8>
 8004980:	2306      	movs	r3, #6
 8004982:	6820      	ldr	r0, [r4, #0]
 8004984:	682a      	ldr	r2, [r5, #0]
 8004986:	68e1      	ldr	r1, [r4, #12]
 8004988:	2500      	movs	r5, #0
 800498a:	4003      	ands	r3, r0
 800498c:	2b04      	cmp	r3, #4
 800498e:	d103      	bne.n	8004998 <_printf_common+0x74>
 8004990:	1a8d      	subs	r5, r1, r2
 8004992:	43eb      	mvns	r3, r5
 8004994:	17db      	asrs	r3, r3, #31
 8004996:	401d      	ands	r5, r3
 8004998:	68a3      	ldr	r3, [r4, #8]
 800499a:	6922      	ldr	r2, [r4, #16]
 800499c:	4293      	cmp	r3, r2
 800499e:	dd01      	ble.n	80049a4 <_printf_common+0x80>
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	18ed      	adds	r5, r5, r3
 80049a4:	2700      	movs	r7, #0
 80049a6:	42bd      	cmp	r5, r7
 80049a8:	d120      	bne.n	80049ec <_printf_common+0xc8>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e010      	b.n	80049d0 <_printf_common+0xac>
 80049ae:	3701      	adds	r7, #1
 80049b0:	68e3      	ldr	r3, [r4, #12]
 80049b2:	682a      	ldr	r2, [r5, #0]
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	42bb      	cmp	r3, r7
 80049b8:	ddd2      	ble.n	8004960 <_printf_common+0x3c>
 80049ba:	0022      	movs	r2, r4
 80049bc:	2301      	movs	r3, #1
 80049be:	9901      	ldr	r1, [sp, #4]
 80049c0:	9800      	ldr	r0, [sp, #0]
 80049c2:	9e08      	ldr	r6, [sp, #32]
 80049c4:	3219      	adds	r2, #25
 80049c6:	47b0      	blx	r6
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d1f0      	bne.n	80049ae <_printf_common+0x8a>
 80049cc:	2001      	movs	r0, #1
 80049ce:	4240      	negs	r0, r0
 80049d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049d2:	2030      	movs	r0, #48	; 0x30
 80049d4:	18e1      	adds	r1, r4, r3
 80049d6:	3143      	adds	r1, #67	; 0x43
 80049d8:	7008      	strb	r0, [r1, #0]
 80049da:	0021      	movs	r1, r4
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	3145      	adds	r1, #69	; 0x45
 80049e0:	7809      	ldrb	r1, [r1, #0]
 80049e2:	18a2      	adds	r2, r4, r2
 80049e4:	3243      	adds	r2, #67	; 0x43
 80049e6:	3302      	adds	r3, #2
 80049e8:	7011      	strb	r1, [r2, #0]
 80049ea:	e7c1      	b.n	8004970 <_printf_common+0x4c>
 80049ec:	0022      	movs	r2, r4
 80049ee:	2301      	movs	r3, #1
 80049f0:	9901      	ldr	r1, [sp, #4]
 80049f2:	9800      	ldr	r0, [sp, #0]
 80049f4:	9e08      	ldr	r6, [sp, #32]
 80049f6:	321a      	adds	r2, #26
 80049f8:	47b0      	blx	r6
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d0e6      	beq.n	80049cc <_printf_common+0xa8>
 80049fe:	3701      	adds	r7, #1
 8004a00:	e7d1      	b.n	80049a6 <_printf_common+0x82>
	...

08004a04 <_printf_i>:
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a06:	b08b      	sub	sp, #44	; 0x2c
 8004a08:	9206      	str	r2, [sp, #24]
 8004a0a:	000a      	movs	r2, r1
 8004a0c:	3243      	adds	r2, #67	; 0x43
 8004a0e:	9307      	str	r3, [sp, #28]
 8004a10:	9005      	str	r0, [sp, #20]
 8004a12:	9204      	str	r2, [sp, #16]
 8004a14:	7e0a      	ldrb	r2, [r1, #24]
 8004a16:	000c      	movs	r4, r1
 8004a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a1a:	2a78      	cmp	r2, #120	; 0x78
 8004a1c:	d807      	bhi.n	8004a2e <_printf_i+0x2a>
 8004a1e:	2a62      	cmp	r2, #98	; 0x62
 8004a20:	d809      	bhi.n	8004a36 <_printf_i+0x32>
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d100      	bne.n	8004a28 <_printf_i+0x24>
 8004a26:	e0c1      	b.n	8004bac <_printf_i+0x1a8>
 8004a28:	2a58      	cmp	r2, #88	; 0x58
 8004a2a:	d100      	bne.n	8004a2e <_printf_i+0x2a>
 8004a2c:	e08c      	b.n	8004b48 <_printf_i+0x144>
 8004a2e:	0026      	movs	r6, r4
 8004a30:	3642      	adds	r6, #66	; 0x42
 8004a32:	7032      	strb	r2, [r6, #0]
 8004a34:	e022      	b.n	8004a7c <_printf_i+0x78>
 8004a36:	0010      	movs	r0, r2
 8004a38:	3863      	subs	r0, #99	; 0x63
 8004a3a:	2815      	cmp	r0, #21
 8004a3c:	d8f7      	bhi.n	8004a2e <_printf_i+0x2a>
 8004a3e:	f7fb fb6b 	bl	8000118 <__gnu_thumb1_case_shi>
 8004a42:	0016      	.short	0x0016
 8004a44:	fff6001f 	.word	0xfff6001f
 8004a48:	fff6fff6 	.word	0xfff6fff6
 8004a4c:	001ffff6 	.word	0x001ffff6
 8004a50:	fff6fff6 	.word	0xfff6fff6
 8004a54:	fff6fff6 	.word	0xfff6fff6
 8004a58:	003600a8 	.word	0x003600a8
 8004a5c:	fff6009a 	.word	0xfff6009a
 8004a60:	00b9fff6 	.word	0x00b9fff6
 8004a64:	0036fff6 	.word	0x0036fff6
 8004a68:	fff6fff6 	.word	0xfff6fff6
 8004a6c:	009e      	.short	0x009e
 8004a6e:	0026      	movs	r6, r4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	3642      	adds	r6, #66	; 0x42
 8004a74:	1d11      	adds	r1, r2, #4
 8004a76:	6019      	str	r1, [r3, #0]
 8004a78:	6813      	ldr	r3, [r2, #0]
 8004a7a:	7033      	strb	r3, [r6, #0]
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0a7      	b.n	8004bd0 <_printf_i+0x1cc>
 8004a80:	6808      	ldr	r0, [r1, #0]
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	1d0a      	adds	r2, r1, #4
 8004a86:	0605      	lsls	r5, r0, #24
 8004a88:	d50b      	bpl.n	8004aa2 <_printf_i+0x9e>
 8004a8a:	680d      	ldr	r5, [r1, #0]
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	da03      	bge.n	8004a9a <_printf_i+0x96>
 8004a92:	232d      	movs	r3, #45	; 0x2d
 8004a94:	9a04      	ldr	r2, [sp, #16]
 8004a96:	426d      	negs	r5, r5
 8004a98:	7013      	strb	r3, [r2, #0]
 8004a9a:	4b61      	ldr	r3, [pc, #388]	; (8004c20 <_printf_i+0x21c>)
 8004a9c:	270a      	movs	r7, #10
 8004a9e:	9303      	str	r3, [sp, #12]
 8004aa0:	e01b      	b.n	8004ada <_printf_i+0xd6>
 8004aa2:	680d      	ldr	r5, [r1, #0]
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	0641      	lsls	r1, r0, #25
 8004aa8:	d5f1      	bpl.n	8004a8e <_printf_i+0x8a>
 8004aaa:	b22d      	sxth	r5, r5
 8004aac:	e7ef      	b.n	8004a8e <_printf_i+0x8a>
 8004aae:	680d      	ldr	r5, [r1, #0]
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	1d08      	adds	r0, r1, #4
 8004ab4:	6018      	str	r0, [r3, #0]
 8004ab6:	062e      	lsls	r6, r5, #24
 8004ab8:	d501      	bpl.n	8004abe <_printf_i+0xba>
 8004aba:	680d      	ldr	r5, [r1, #0]
 8004abc:	e003      	b.n	8004ac6 <_printf_i+0xc2>
 8004abe:	066d      	lsls	r5, r5, #25
 8004ac0:	d5fb      	bpl.n	8004aba <_printf_i+0xb6>
 8004ac2:	680d      	ldr	r5, [r1, #0]
 8004ac4:	b2ad      	uxth	r5, r5
 8004ac6:	4b56      	ldr	r3, [pc, #344]	; (8004c20 <_printf_i+0x21c>)
 8004ac8:	2708      	movs	r7, #8
 8004aca:	9303      	str	r3, [sp, #12]
 8004acc:	2a6f      	cmp	r2, #111	; 0x6f
 8004ace:	d000      	beq.n	8004ad2 <_printf_i+0xce>
 8004ad0:	3702      	adds	r7, #2
 8004ad2:	0023      	movs	r3, r4
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	3343      	adds	r3, #67	; 0x43
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	6863      	ldr	r3, [r4, #4]
 8004adc:	60a3      	str	r3, [r4, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	db03      	blt.n	8004aea <_printf_i+0xe6>
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	6821      	ldr	r1, [r4, #0]
 8004ae6:	4391      	bics	r1, r2
 8004ae8:	6021      	str	r1, [r4, #0]
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	d102      	bne.n	8004af4 <_printf_i+0xf0>
 8004aee:	9e04      	ldr	r6, [sp, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <_printf_i+0x10a>
 8004af4:	9e04      	ldr	r6, [sp, #16]
 8004af6:	0028      	movs	r0, r5
 8004af8:	0039      	movs	r1, r7
 8004afa:	f7fb fb9d 	bl	8000238 <__aeabi_uidivmod>
 8004afe:	9b03      	ldr	r3, [sp, #12]
 8004b00:	3e01      	subs	r6, #1
 8004b02:	5c5b      	ldrb	r3, [r3, r1]
 8004b04:	7033      	strb	r3, [r6, #0]
 8004b06:	002b      	movs	r3, r5
 8004b08:	0005      	movs	r5, r0
 8004b0a:	429f      	cmp	r7, r3
 8004b0c:	d9f3      	bls.n	8004af6 <_printf_i+0xf2>
 8004b0e:	2f08      	cmp	r7, #8
 8004b10:	d109      	bne.n	8004b26 <_printf_i+0x122>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	07db      	lsls	r3, r3, #31
 8004b16:	d506      	bpl.n	8004b26 <_printf_i+0x122>
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	6922      	ldr	r2, [r4, #16]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	dc02      	bgt.n	8004b26 <_printf_i+0x122>
 8004b20:	2330      	movs	r3, #48	; 0x30
 8004b22:	3e01      	subs	r6, #1
 8004b24:	7033      	strb	r3, [r6, #0]
 8004b26:	9b04      	ldr	r3, [sp, #16]
 8004b28:	1b9b      	subs	r3, r3, r6
 8004b2a:	6123      	str	r3, [r4, #16]
 8004b2c:	9b07      	ldr	r3, [sp, #28]
 8004b2e:	0021      	movs	r1, r4
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	9805      	ldr	r0, [sp, #20]
 8004b34:	9b06      	ldr	r3, [sp, #24]
 8004b36:	aa09      	add	r2, sp, #36	; 0x24
 8004b38:	f7ff fef4 	bl	8004924 <_printf_common>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d14c      	bne.n	8004bda <_printf_i+0x1d6>
 8004b40:	2001      	movs	r0, #1
 8004b42:	4240      	negs	r0, r0
 8004b44:	b00b      	add	sp, #44	; 0x2c
 8004b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b48:	3145      	adds	r1, #69	; 0x45
 8004b4a:	700a      	strb	r2, [r1, #0]
 8004b4c:	4a34      	ldr	r2, [pc, #208]	; (8004c20 <_printf_i+0x21c>)
 8004b4e:	9203      	str	r2, [sp, #12]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	6821      	ldr	r1, [r4, #0]
 8004b54:	ca20      	ldmia	r2!, {r5}
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	0608      	lsls	r0, r1, #24
 8004b5a:	d516      	bpl.n	8004b8a <_printf_i+0x186>
 8004b5c:	07cb      	lsls	r3, r1, #31
 8004b5e:	d502      	bpl.n	8004b66 <_printf_i+0x162>
 8004b60:	2320      	movs	r3, #32
 8004b62:	4319      	orrs	r1, r3
 8004b64:	6021      	str	r1, [r4, #0]
 8004b66:	2710      	movs	r7, #16
 8004b68:	2d00      	cmp	r5, #0
 8004b6a:	d1b2      	bne.n	8004ad2 <_printf_i+0xce>
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	439a      	bics	r2, r3
 8004b72:	6022      	str	r2, [r4, #0]
 8004b74:	e7ad      	b.n	8004ad2 <_printf_i+0xce>
 8004b76:	2220      	movs	r2, #32
 8004b78:	6809      	ldr	r1, [r1, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	6022      	str	r2, [r4, #0]
 8004b7e:	0022      	movs	r2, r4
 8004b80:	2178      	movs	r1, #120	; 0x78
 8004b82:	3245      	adds	r2, #69	; 0x45
 8004b84:	7011      	strb	r1, [r2, #0]
 8004b86:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <_printf_i+0x220>)
 8004b88:	e7e1      	b.n	8004b4e <_printf_i+0x14a>
 8004b8a:	0648      	lsls	r0, r1, #25
 8004b8c:	d5e6      	bpl.n	8004b5c <_printf_i+0x158>
 8004b8e:	b2ad      	uxth	r5, r5
 8004b90:	e7e4      	b.n	8004b5c <_printf_i+0x158>
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	680d      	ldr	r5, [r1, #0]
 8004b96:	1d10      	adds	r0, r2, #4
 8004b98:	6949      	ldr	r1, [r1, #20]
 8004b9a:	6018      	str	r0, [r3, #0]
 8004b9c:	6813      	ldr	r3, [r2, #0]
 8004b9e:	062e      	lsls	r6, r5, #24
 8004ba0:	d501      	bpl.n	8004ba6 <_printf_i+0x1a2>
 8004ba2:	6019      	str	r1, [r3, #0]
 8004ba4:	e002      	b.n	8004bac <_printf_i+0x1a8>
 8004ba6:	066d      	lsls	r5, r5, #25
 8004ba8:	d5fb      	bpl.n	8004ba2 <_printf_i+0x19e>
 8004baa:	8019      	strh	r1, [r3, #0]
 8004bac:	2300      	movs	r3, #0
 8004bae:	9e04      	ldr	r6, [sp, #16]
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	e7bb      	b.n	8004b2c <_printf_i+0x128>
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	1d11      	adds	r1, r2, #4
 8004bb8:	6019      	str	r1, [r3, #0]
 8004bba:	6816      	ldr	r6, [r2, #0]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	0030      	movs	r0, r6
 8004bc0:	6862      	ldr	r2, [r4, #4]
 8004bc2:	f000 f831 	bl	8004c28 <memchr>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d001      	beq.n	8004bce <_printf_i+0x1ca>
 8004bca:	1b80      	subs	r0, r0, r6
 8004bcc:	6060      	str	r0, [r4, #4]
 8004bce:	6863      	ldr	r3, [r4, #4]
 8004bd0:	6123      	str	r3, [r4, #16]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9a04      	ldr	r2, [sp, #16]
 8004bd6:	7013      	strb	r3, [r2, #0]
 8004bd8:	e7a8      	b.n	8004b2c <_printf_i+0x128>
 8004bda:	6923      	ldr	r3, [r4, #16]
 8004bdc:	0032      	movs	r2, r6
 8004bde:	9906      	ldr	r1, [sp, #24]
 8004be0:	9805      	ldr	r0, [sp, #20]
 8004be2:	9d07      	ldr	r5, [sp, #28]
 8004be4:	47a8      	blx	r5
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	d0aa      	beq.n	8004b40 <_printf_i+0x13c>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	079b      	lsls	r3, r3, #30
 8004bee:	d415      	bmi.n	8004c1c <_printf_i+0x218>
 8004bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf2:	68e0      	ldr	r0, [r4, #12]
 8004bf4:	4298      	cmp	r0, r3
 8004bf6:	daa5      	bge.n	8004b44 <_printf_i+0x140>
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	e7a3      	b.n	8004b44 <_printf_i+0x140>
 8004bfc:	0022      	movs	r2, r4
 8004bfe:	2301      	movs	r3, #1
 8004c00:	9906      	ldr	r1, [sp, #24]
 8004c02:	9805      	ldr	r0, [sp, #20]
 8004c04:	9e07      	ldr	r6, [sp, #28]
 8004c06:	3219      	adds	r2, #25
 8004c08:	47b0      	blx	r6
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d098      	beq.n	8004b40 <_printf_i+0x13c>
 8004c0e:	3501      	adds	r5, #1
 8004c10:	68e3      	ldr	r3, [r4, #12]
 8004c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	42ab      	cmp	r3, r5
 8004c18:	dcf0      	bgt.n	8004bfc <_printf_i+0x1f8>
 8004c1a:	e7e9      	b.n	8004bf0 <_printf_i+0x1ec>
 8004c1c:	2500      	movs	r5, #0
 8004c1e:	e7f7      	b.n	8004c10 <_printf_i+0x20c>
 8004c20:	0800504d 	.word	0x0800504d
 8004c24:	0800505e 	.word	0x0800505e

08004c28 <memchr>:
 8004c28:	b2c9      	uxtb	r1, r1
 8004c2a:	1882      	adds	r2, r0, r2
 8004c2c:	4290      	cmp	r0, r2
 8004c2e:	d101      	bne.n	8004c34 <memchr+0xc>
 8004c30:	2000      	movs	r0, #0
 8004c32:	4770      	bx	lr
 8004c34:	7803      	ldrb	r3, [r0, #0]
 8004c36:	428b      	cmp	r3, r1
 8004c38:	d0fb      	beq.n	8004c32 <memchr+0xa>
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	e7f6      	b.n	8004c2c <memchr+0x4>

08004c3e <memcpy>:
 8004c3e:	2300      	movs	r3, #0
 8004c40:	b510      	push	{r4, lr}
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d100      	bne.n	8004c48 <memcpy+0xa>
 8004c46:	bd10      	pop	{r4, pc}
 8004c48:	5ccc      	ldrb	r4, [r1, r3]
 8004c4a:	54c4      	strb	r4, [r0, r3]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	e7f8      	b.n	8004c42 <memcpy+0x4>

08004c50 <memmove>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	4288      	cmp	r0, r1
 8004c54:	d902      	bls.n	8004c5c <memmove+0xc>
 8004c56:	188b      	adds	r3, r1, r2
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	d303      	bcc.n	8004c64 <memmove+0x14>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e007      	b.n	8004c70 <memmove+0x20>
 8004c60:	5c8b      	ldrb	r3, [r1, r2]
 8004c62:	5483      	strb	r3, [r0, r2]
 8004c64:	3a01      	subs	r2, #1
 8004c66:	d2fb      	bcs.n	8004c60 <memmove+0x10>
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	5ccc      	ldrb	r4, [r1, r3]
 8004c6c:	54c4      	strb	r4, [r0, r3]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1fa      	bne.n	8004c6a <memmove+0x1a>
 8004c74:	e7f8      	b.n	8004c68 <memmove+0x18>
	...

08004c78 <_free_r>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	0005      	movs	r5, r0
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d010      	beq.n	8004ca2 <_free_r+0x2a>
 8004c80:	1f0c      	subs	r4, r1, #4
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	da00      	bge.n	8004c8a <_free_r+0x12>
 8004c88:	18e4      	adds	r4, r4, r3
 8004c8a:	0028      	movs	r0, r5
 8004c8c:	f000 f918 	bl	8004ec0 <__malloc_lock>
 8004c90:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <_free_r+0x90>)
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <_free_r+0x2c>
 8004c98:	6063      	str	r3, [r4, #4]
 8004c9a:	6014      	str	r4, [r2, #0]
 8004c9c:	0028      	movs	r0, r5
 8004c9e:	f000 f917 	bl	8004ed0 <__malloc_unlock>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d908      	bls.n	8004cba <_free_r+0x42>
 8004ca8:	6821      	ldr	r1, [r4, #0]
 8004caa:	1860      	adds	r0, r4, r1
 8004cac:	4283      	cmp	r3, r0
 8004cae:	d1f3      	bne.n	8004c98 <_free_r+0x20>
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	1841      	adds	r1, r0, r1
 8004cb6:	6021      	str	r1, [r4, #0]
 8004cb8:	e7ee      	b.n	8004c98 <_free_r+0x20>
 8004cba:	001a      	movs	r2, r3
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <_free_r+0x4e>
 8004cc2:	42a3      	cmp	r3, r4
 8004cc4:	d9f9      	bls.n	8004cba <_free_r+0x42>
 8004cc6:	6811      	ldr	r1, [r2, #0]
 8004cc8:	1850      	adds	r0, r2, r1
 8004cca:	42a0      	cmp	r0, r4
 8004ccc:	d10b      	bne.n	8004ce6 <_free_r+0x6e>
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	1809      	adds	r1, r1, r0
 8004cd2:	1850      	adds	r0, r2, r1
 8004cd4:	6011      	str	r1, [r2, #0]
 8004cd6:	4283      	cmp	r3, r0
 8004cd8:	d1e0      	bne.n	8004c9c <_free_r+0x24>
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	1841      	adds	r1, r0, r1
 8004ce0:	6011      	str	r1, [r2, #0]
 8004ce2:	6053      	str	r3, [r2, #4]
 8004ce4:	e7da      	b.n	8004c9c <_free_r+0x24>
 8004ce6:	42a0      	cmp	r0, r4
 8004ce8:	d902      	bls.n	8004cf0 <_free_r+0x78>
 8004cea:	230c      	movs	r3, #12
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	e7d5      	b.n	8004c9c <_free_r+0x24>
 8004cf0:	6821      	ldr	r1, [r4, #0]
 8004cf2:	1860      	adds	r0, r4, r1
 8004cf4:	4283      	cmp	r3, r0
 8004cf6:	d103      	bne.n	8004d00 <_free_r+0x88>
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	1841      	adds	r1, r0, r1
 8004cfe:	6021      	str	r1, [r4, #0]
 8004d00:	6063      	str	r3, [r4, #4]
 8004d02:	6054      	str	r4, [r2, #4]
 8004d04:	e7ca      	b.n	8004c9c <_free_r+0x24>
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	20000278 	.word	0x20000278

08004d0c <sbrk_aligned>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	4e0f      	ldr	r6, [pc, #60]	; (8004d4c <sbrk_aligned+0x40>)
 8004d10:	000d      	movs	r5, r1
 8004d12:	6831      	ldr	r1, [r6, #0]
 8004d14:	0004      	movs	r4, r0
 8004d16:	2900      	cmp	r1, #0
 8004d18:	d102      	bne.n	8004d20 <sbrk_aligned+0x14>
 8004d1a:	f000 f8bf 	bl	8004e9c <_sbrk_r>
 8004d1e:	6030      	str	r0, [r6, #0]
 8004d20:	0029      	movs	r1, r5
 8004d22:	0020      	movs	r0, r4
 8004d24:	f000 f8ba 	bl	8004e9c <_sbrk_r>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d00a      	beq.n	8004d42 <sbrk_aligned+0x36>
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	1cc5      	adds	r5, r0, #3
 8004d30:	439d      	bics	r5, r3
 8004d32:	42a8      	cmp	r0, r5
 8004d34:	d007      	beq.n	8004d46 <sbrk_aligned+0x3a>
 8004d36:	1a29      	subs	r1, r5, r0
 8004d38:	0020      	movs	r0, r4
 8004d3a:	f000 f8af 	bl	8004e9c <_sbrk_r>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	d101      	bne.n	8004d46 <sbrk_aligned+0x3a>
 8004d42:	2501      	movs	r5, #1
 8004d44:	426d      	negs	r5, r5
 8004d46:	0028      	movs	r0, r5
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	2000027c 	.word	0x2000027c

08004d50 <_malloc_r>:
 8004d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d52:	2203      	movs	r2, #3
 8004d54:	1ccb      	adds	r3, r1, #3
 8004d56:	4393      	bics	r3, r2
 8004d58:	3308      	adds	r3, #8
 8004d5a:	0006      	movs	r6, r0
 8004d5c:	001f      	movs	r7, r3
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d232      	bcs.n	8004dc8 <_malloc_r+0x78>
 8004d62:	270c      	movs	r7, #12
 8004d64:	42b9      	cmp	r1, r7
 8004d66:	d831      	bhi.n	8004dcc <_malloc_r+0x7c>
 8004d68:	0030      	movs	r0, r6
 8004d6a:	f000 f8a9 	bl	8004ec0 <__malloc_lock>
 8004d6e:	4d32      	ldr	r5, [pc, #200]	; (8004e38 <_malloc_r+0xe8>)
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	001c      	movs	r4, r3
 8004d74:	2c00      	cmp	r4, #0
 8004d76:	d12e      	bne.n	8004dd6 <_malloc_r+0x86>
 8004d78:	0039      	movs	r1, r7
 8004d7a:	0030      	movs	r0, r6
 8004d7c:	f7ff ffc6 	bl	8004d0c <sbrk_aligned>
 8004d80:	0004      	movs	r4, r0
 8004d82:	1c43      	adds	r3, r0, #1
 8004d84:	d11e      	bne.n	8004dc4 <_malloc_r+0x74>
 8004d86:	682c      	ldr	r4, [r5, #0]
 8004d88:	0025      	movs	r5, r4
 8004d8a:	2d00      	cmp	r5, #0
 8004d8c:	d14a      	bne.n	8004e24 <_malloc_r+0xd4>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	0029      	movs	r1, r5
 8004d92:	18e3      	adds	r3, r4, r3
 8004d94:	0030      	movs	r0, r6
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	f000 f880 	bl	8004e9c <_sbrk_r>
 8004d9c:	9b01      	ldr	r3, [sp, #4]
 8004d9e:	4283      	cmp	r3, r0
 8004da0:	d143      	bne.n	8004e2a <_malloc_r+0xda>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	3703      	adds	r7, #3
 8004da6:	1aff      	subs	r7, r7, r3
 8004da8:	2303      	movs	r3, #3
 8004daa:	439f      	bics	r7, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	2f0c      	cmp	r7, #12
 8004db0:	d200      	bcs.n	8004db4 <_malloc_r+0x64>
 8004db2:	270c      	movs	r7, #12
 8004db4:	0039      	movs	r1, r7
 8004db6:	0030      	movs	r0, r6
 8004db8:	f7ff ffa8 	bl	8004d0c <sbrk_aligned>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d034      	beq.n	8004e2a <_malloc_r+0xda>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	19df      	adds	r7, r3, r7
 8004dc4:	6027      	str	r7, [r4, #0]
 8004dc6:	e013      	b.n	8004df0 <_malloc_r+0xa0>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	dacb      	bge.n	8004d64 <_malloc_r+0x14>
 8004dcc:	230c      	movs	r3, #12
 8004dce:	2500      	movs	r5, #0
 8004dd0:	6033      	str	r3, [r6, #0]
 8004dd2:	0028      	movs	r0, r5
 8004dd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004dd6:	6822      	ldr	r2, [r4, #0]
 8004dd8:	1bd1      	subs	r1, r2, r7
 8004dda:	d420      	bmi.n	8004e1e <_malloc_r+0xce>
 8004ddc:	290b      	cmp	r1, #11
 8004dde:	d917      	bls.n	8004e10 <_malloc_r+0xc0>
 8004de0:	19e2      	adds	r2, r4, r7
 8004de2:	6027      	str	r7, [r4, #0]
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	d111      	bne.n	8004e0c <_malloc_r+0xbc>
 8004de8:	602a      	str	r2, [r5, #0]
 8004dea:	6863      	ldr	r3, [r4, #4]
 8004dec:	6011      	str	r1, [r2, #0]
 8004dee:	6053      	str	r3, [r2, #4]
 8004df0:	0030      	movs	r0, r6
 8004df2:	0025      	movs	r5, r4
 8004df4:	f000 f86c 	bl	8004ed0 <__malloc_unlock>
 8004df8:	2207      	movs	r2, #7
 8004dfa:	350b      	adds	r5, #11
 8004dfc:	1d23      	adds	r3, r4, #4
 8004dfe:	4395      	bics	r5, r2
 8004e00:	1aea      	subs	r2, r5, r3
 8004e02:	429d      	cmp	r5, r3
 8004e04:	d0e5      	beq.n	8004dd2 <_malloc_r+0x82>
 8004e06:	1b5b      	subs	r3, r3, r5
 8004e08:	50a3      	str	r3, [r4, r2]
 8004e0a:	e7e2      	b.n	8004dd2 <_malloc_r+0x82>
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	e7ec      	b.n	8004dea <_malloc_r+0x9a>
 8004e10:	6862      	ldr	r2, [r4, #4]
 8004e12:	42a3      	cmp	r3, r4
 8004e14:	d101      	bne.n	8004e1a <_malloc_r+0xca>
 8004e16:	602a      	str	r2, [r5, #0]
 8004e18:	e7ea      	b.n	8004df0 <_malloc_r+0xa0>
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	e7e8      	b.n	8004df0 <_malloc_r+0xa0>
 8004e1e:	0023      	movs	r3, r4
 8004e20:	6864      	ldr	r4, [r4, #4]
 8004e22:	e7a7      	b.n	8004d74 <_malloc_r+0x24>
 8004e24:	002c      	movs	r4, r5
 8004e26:	686d      	ldr	r5, [r5, #4]
 8004e28:	e7af      	b.n	8004d8a <_malloc_r+0x3a>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	0030      	movs	r0, r6
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	f000 f84e 	bl	8004ed0 <__malloc_unlock>
 8004e34:	e7cd      	b.n	8004dd2 <_malloc_r+0x82>
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	20000278 	.word	0x20000278

08004e3c <_realloc_r>:
 8004e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3e:	0007      	movs	r7, r0
 8004e40:	000e      	movs	r6, r1
 8004e42:	0014      	movs	r4, r2
 8004e44:	2900      	cmp	r1, #0
 8004e46:	d105      	bne.n	8004e54 <_realloc_r+0x18>
 8004e48:	0011      	movs	r1, r2
 8004e4a:	f7ff ff81 	bl	8004d50 <_malloc_r>
 8004e4e:	0005      	movs	r5, r0
 8004e50:	0028      	movs	r0, r5
 8004e52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e54:	2a00      	cmp	r2, #0
 8004e56:	d103      	bne.n	8004e60 <_realloc_r+0x24>
 8004e58:	f7ff ff0e 	bl	8004c78 <_free_r>
 8004e5c:	0025      	movs	r5, r4
 8004e5e:	e7f7      	b.n	8004e50 <_realloc_r+0x14>
 8004e60:	f000 f83e 	bl	8004ee0 <_malloc_usable_size_r>
 8004e64:	9001      	str	r0, [sp, #4]
 8004e66:	4284      	cmp	r4, r0
 8004e68:	d803      	bhi.n	8004e72 <_realloc_r+0x36>
 8004e6a:	0035      	movs	r5, r6
 8004e6c:	0843      	lsrs	r3, r0, #1
 8004e6e:	42a3      	cmp	r3, r4
 8004e70:	d3ee      	bcc.n	8004e50 <_realloc_r+0x14>
 8004e72:	0021      	movs	r1, r4
 8004e74:	0038      	movs	r0, r7
 8004e76:	f7ff ff6b 	bl	8004d50 <_malloc_r>
 8004e7a:	1e05      	subs	r5, r0, #0
 8004e7c:	d0e8      	beq.n	8004e50 <_realloc_r+0x14>
 8004e7e:	9b01      	ldr	r3, [sp, #4]
 8004e80:	0022      	movs	r2, r4
 8004e82:	429c      	cmp	r4, r3
 8004e84:	d900      	bls.n	8004e88 <_realloc_r+0x4c>
 8004e86:	001a      	movs	r2, r3
 8004e88:	0031      	movs	r1, r6
 8004e8a:	0028      	movs	r0, r5
 8004e8c:	f7ff fed7 	bl	8004c3e <memcpy>
 8004e90:	0031      	movs	r1, r6
 8004e92:	0038      	movs	r0, r7
 8004e94:	f7ff fef0 	bl	8004c78 <_free_r>
 8004e98:	e7da      	b.n	8004e50 <_realloc_r+0x14>
	...

08004e9c <_sbrk_r>:
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	b570      	push	{r4, r5, r6, lr}
 8004ea0:	4d06      	ldr	r5, [pc, #24]	; (8004ebc <_sbrk_r+0x20>)
 8004ea2:	0004      	movs	r4, r0
 8004ea4:	0008      	movs	r0, r1
 8004ea6:	602b      	str	r3, [r5, #0]
 8004ea8:	f7fc fd34 	bl	8001914 <_sbrk>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d103      	bne.n	8004eb8 <_sbrk_r+0x1c>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d000      	beq.n	8004eb8 <_sbrk_r+0x1c>
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	20000280 	.word	0x20000280

08004ec0 <__malloc_lock>:
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	4802      	ldr	r0, [pc, #8]	; (8004ecc <__malloc_lock+0xc>)
 8004ec4:	f000 f814 	bl	8004ef0 <__retarget_lock_acquire_recursive>
 8004ec8:	bd10      	pop	{r4, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20000284 	.word	0x20000284

08004ed0 <__malloc_unlock>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4802      	ldr	r0, [pc, #8]	; (8004edc <__malloc_unlock+0xc>)
 8004ed4:	f000 f80d 	bl	8004ef2 <__retarget_lock_release_recursive>
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	20000284 	.word	0x20000284

08004ee0 <_malloc_usable_size_r>:
 8004ee0:	1f0b      	subs	r3, r1, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	1f18      	subs	r0, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da01      	bge.n	8004eee <_malloc_usable_size_r+0xe>
 8004eea:	580b      	ldr	r3, [r1, r0]
 8004eec:	18c0      	adds	r0, r0, r3
 8004eee:	4770      	bx	lr

08004ef0 <__retarget_lock_acquire_recursive>:
 8004ef0:	4770      	bx	lr

08004ef2 <__retarget_lock_release_recursive>:
 8004ef2:	4770      	bx	lr

08004ef4 <_init>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr

08004f00 <_fini>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr
